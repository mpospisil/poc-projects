/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using connection_restapi_client_poc.Client;
using connection_restapi_client_poc.Api;
// uncomment below to import models
//using connection_restapi_client_poc.Model;

namespace connection_restapi_client_poc.Test.Api
{
    /// <summary>
    ///  Class for testing LoadEffectApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class LoadEffectApiTests : IDisposable
    {
        private LoadEffectApi instance;

        public LoadEffectApiTests()
        {
            instance = new LoadEffectApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of LoadEffectApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' LoadEffectApi
            //Assert.IsType<LoadEffectApi>(instance);
        }

        /// <summary>
        /// Test AddLoadEffect
        /// </summary>
        [Fact]
        public void AddLoadEffectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //int connectionId = null;
            //ConLoadEffect? conLoadEffect = null;
            //var response = instance.AddLoadEffect(projectId, connectionId, conLoadEffect);
            //Assert.IsType<LoadEffectData>(response);
        }

        /// <summary>
        /// Test DeleteLoadEffect
        /// </summary>
        [Fact]
        public void DeleteLoadEffectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //int connectionId = null;
            //int loadEffectId = null;
            //var response = instance.DeleteLoadEffect(projectId, connectionId, loadEffectId);
            //Assert.IsType<int>(response);
        }

        /// <summary>
        /// Test GetLoadEffect
        /// </summary>
        [Fact]
        public void GetLoadEffectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //int connectionId = null;
            //int loadEffectId = null;
            //bool? isPercentage = null;
            //var response = instance.GetLoadEffect(projectId, connectionId, loadEffectId, isPercentage);
            //Assert.IsType<ConLoadEffect>(response);
        }

        /// <summary>
        /// Test GetLoadEffects
        /// </summary>
        [Fact]
        public void GetLoadEffectsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //int connectionId = null;
            //bool? isPercentage = null;
            //var response = instance.GetLoadEffects(projectId, connectionId, isPercentage);
            //Assert.IsType<List<ConLoadEffect>>(response);
        }

        /// <summary>
        /// Test GetLoadSettings
        /// </summary>
        [Fact]
        public void GetLoadSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //int connectionId = null;
            //var response = instance.GetLoadSettings(projectId, connectionId);
            //Assert.IsType<ConLoadSettings>(response);
        }

        /// <summary>
        /// Test SetLoadSettings
        /// </summary>
        [Fact]
        public void SetLoadSettingsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //int connectionId = null;
            //ConLoadSettings? conLoadSettings = null;
            //var response = instance.SetLoadSettings(projectId, connectionId, conLoadSettings);
            //Assert.IsType<ConLoadSettings>(response);
        }

        /// <summary>
        /// Test UpdateLoadEffect
        /// </summary>
        [Fact]
        public void UpdateLoadEffectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid projectId = null;
            //int connectionId = null;
            //int loadEffectId = null;
            //ConLoadEffect? conLoadEffect = null;
            //var response = instance.UpdateLoadEffect(projectId, connectionId, loadEffectId, conLoadEffect);
            //Assert.IsType<ConLoadEffect>(response);
        }
    }
}
