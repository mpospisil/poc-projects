/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// Results for connection in project
    /// </summary>
    [DataContract(Name = "Connection_ConnectionCheckRes-IdeaRS_OpenModel")]
    public partial class ConnectionConnectionCheckResIdeaRSOpenModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionConnectionCheckResIdeaRSOpenModel" /> class.
        /// </summary>
        /// <param name="checkResSummary">List of CheckResSummary.</param>
        /// <param name="checkResPlate">List of check results for plates.</param>
        /// <param name="checkResWeld">List of check results for welds.</param>
        /// <param name="checkResBolt">List of check results for bolts.</param>
        /// <param name="checkResAnchor">List of check results for anchors.</param>
        /// <param name="checkResConcreteBlock">List of check results for concrete blocks.</param>
        /// <param name="bucklingResults">List of results of buckling analysis.</param>
        /// <param name="name">Name of connection.</param>
        /// <param name="connectionID">Guid of connection.</param>
        /// <param name="id">Integer Id of connection.</param>
        /// <param name="messages">messages.</param>
        public ConnectionConnectionCheckResIdeaRSOpenModel(List<ConnectionCheckResSummaryIdeaRSOpenModel> checkResSummary = default(List<ConnectionCheckResSummaryIdeaRSOpenModel>), List<ConnectionCheckResPlateIdeaRSOpenModel> checkResPlate = default(List<ConnectionCheckResPlateIdeaRSOpenModel>), List<ConnectionCheckResWeldIdeaRSOpenModel> checkResWeld = default(List<ConnectionCheckResWeldIdeaRSOpenModel>), List<ConnectionCheckResBoltIdeaRSOpenModel> checkResBolt = default(List<ConnectionCheckResBoltIdeaRSOpenModel>), List<ConnectionCheckResAnchorIdeaRSOpenModel> checkResAnchor = default(List<ConnectionCheckResAnchorIdeaRSOpenModel>), List<ConnectionCheckResConcreteBlockIdeaRSOpenModel> checkResConcreteBlock = default(List<ConnectionCheckResConcreteBlockIdeaRSOpenModel>), List<ConnectionBucklingResIdeaRSOpenModel> bucklingResults = default(List<ConnectionBucklingResIdeaRSOpenModel>), string name = default(string), Guid connectionID = default(Guid), int id = default(int), MessageOpenMessagesIdeaRSOpenModel messages = default(MessageOpenMessagesIdeaRSOpenModel))
        {
            this.CheckResSummary = checkResSummary;
            this.CheckResPlate = checkResPlate;
            this.CheckResWeld = checkResWeld;
            this.CheckResBolt = checkResBolt;
            this.CheckResAnchor = checkResAnchor;
            this.CheckResConcreteBlock = checkResConcreteBlock;
            this.BucklingResults = bucklingResults;
            this.Name = name;
            this.ConnectionID = connectionID;
            this.Id = id;
            this.Messages = messages;
        }

        /// <summary>
        /// List of CheckResSummary
        /// </summary>
        /// <value>List of CheckResSummary</value>
        [DataMember(Name = "checkResSummary", EmitDefaultValue = true)]
        public List<ConnectionCheckResSummaryIdeaRSOpenModel> CheckResSummary { get; set; }

        /// <summary>
        /// List of check results for plates
        /// </summary>
        /// <value>List of check results for plates</value>
        [DataMember(Name = "checkResPlate", EmitDefaultValue = true)]
        public List<ConnectionCheckResPlateIdeaRSOpenModel> CheckResPlate { get; set; }

        /// <summary>
        /// List of check results for welds
        /// </summary>
        /// <value>List of check results for welds</value>
        [DataMember(Name = "checkResWeld", EmitDefaultValue = true)]
        public List<ConnectionCheckResWeldIdeaRSOpenModel> CheckResWeld { get; set; }

        /// <summary>
        /// List of check results for bolts
        /// </summary>
        /// <value>List of check results for bolts</value>
        [DataMember(Name = "checkResBolt", EmitDefaultValue = true)]
        public List<ConnectionCheckResBoltIdeaRSOpenModel> CheckResBolt { get; set; }

        /// <summary>
        /// List of check results for anchors
        /// </summary>
        /// <value>List of check results for anchors</value>
        [DataMember(Name = "checkResAnchor", EmitDefaultValue = true)]
        public List<ConnectionCheckResAnchorIdeaRSOpenModel> CheckResAnchor { get; set; }

        /// <summary>
        /// List of check results for concrete blocks
        /// </summary>
        /// <value>List of check results for concrete blocks</value>
        [DataMember(Name = "checkResConcreteBlock", EmitDefaultValue = true)]
        public List<ConnectionCheckResConcreteBlockIdeaRSOpenModel> CheckResConcreteBlock { get; set; }

        /// <summary>
        /// List of results of buckling analysis
        /// </summary>
        /// <value>List of results of buckling analysis</value>
        [DataMember(Name = "bucklingResults", EmitDefaultValue = true)]
        public List<ConnectionBucklingResIdeaRSOpenModel> BucklingResults { get; set; }

        /// <summary>
        /// Name of connection
        /// </summary>
        /// <value>Name of connection</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Guid of connection
        /// </summary>
        /// <value>Guid of connection</value>
        [DataMember(Name = "connectionID", EmitDefaultValue = false)]
        public Guid ConnectionID { get; set; }

        /// <summary>
        /// Integer Id of connection
        /// </summary>
        /// <value>Integer Id of connection</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [DataMember(Name = "messages", EmitDefaultValue = false)]
        public MessageOpenMessagesIdeaRSOpenModel Messages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectionConnectionCheckResIdeaRSOpenModel {\n");
            sb.Append("  CheckResSummary: ").Append(CheckResSummary).Append("\n");
            sb.Append("  CheckResPlate: ").Append(CheckResPlate).Append("\n");
            sb.Append("  CheckResWeld: ").Append(CheckResWeld).Append("\n");
            sb.Append("  CheckResBolt: ").Append(CheckResBolt).Append("\n");
            sb.Append("  CheckResAnchor: ").Append(CheckResAnchor).Append("\n");
            sb.Append("  CheckResConcreteBlock: ").Append(CheckResConcreteBlock).Append("\n");
            sb.Append("  BucklingResults: ").Append(BucklingResults).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ConnectionID: ").Append(ConnectionID).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
