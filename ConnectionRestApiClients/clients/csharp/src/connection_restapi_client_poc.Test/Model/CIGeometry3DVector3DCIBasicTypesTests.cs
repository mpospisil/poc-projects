/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using connection_restapi_client_poc.Model;
using connection_restapi_client_poc.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace connection_restapi_client_poc.Test.Model
{
    /// <summary>
    ///  Class for testing CIGeometry3DVector3DCIBasicTypes
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class CIGeometry3DVector3DCIBasicTypesTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for CIGeometry3DVector3DCIBasicTypes
        //private CIGeometry3DVector3DCIBasicTypes instance;

        public CIGeometry3DVector3DCIBasicTypesTests()
        {
            // TODO uncomment below to create an instance of CIGeometry3DVector3DCIBasicTypes
            //instance = new CIGeometry3DVector3DCIBasicTypes();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CIGeometry3DVector3DCIBasicTypes
        /// </summary>
        [Fact]
        public void CIGeometry3DVector3DCIBasicTypesInstanceTest()
        {
            // TODO uncomment below to test "IsType" CIGeometry3DVector3DCIBasicTypes
            //Assert.IsType<CIGeometry3DVector3DCIBasicTypes>(instance);
        }

        /// <summary>
        /// Test the property 'DirectionX'
        /// </summary>
        [Fact]
        public void DirectionXTest()
        {
            // TODO unit test for the property 'DirectionX'
        }

        /// <summary>
        /// Test the property 'DirectionY'
        /// </summary>
        [Fact]
        public void DirectionYTest()
        {
            // TODO unit test for the property 'DirectionY'
        }

        /// <summary>
        /// Test the property 'DirectionZ'
        /// </summary>
        [Fact]
        public void DirectionZTest()
        {
            // TODO unit test for the property 'DirectionZ'
        }

        /// <summary>
        /// Test the property 'Normalize'
        /// </summary>
        [Fact]
        public void NormalizeTest()
        {
            // TODO unit test for the property 'Normalize'
        }

        /// <summary>
        /// Test the property 'Magnitude'
        /// </summary>
        [Fact]
        public void MagnitudeTest()
        {
            // TODO unit test for the property 'Magnitude'
        }

        /// <summary>
        /// Test the property 'MagnitudeSquared'
        /// </summary>
        [Fact]
        public void MagnitudeSquaredTest()
        {
            // TODO unit test for the property 'MagnitudeSquared'
        }
    }
}
