"use strict";
/**
 * Connection Rest API 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenModel = void 0;
/**
* Open model
*/
class OpenModel {
    static getAttributeTypeMap() {
        return OpenModel.attributeTypeMap;
    }
}
exports.OpenModel = OpenModel;
OpenModel.discriminator = undefined;
OpenModel.attributeTypeMap = [
    {
        "name": "version",
        "baseName": "version",
        "type": "number"
    },
    {
        "name": "originSettings",
        "baseName": "originSettings",
        "type": "object"
    },
    {
        "name": "point3D",
        "baseName": "point3D",
        "type": "Array<Point3D>"
    },
    {
        "name": "lineSegment3D",
        "baseName": "lineSegment3D",
        "type": "Array<LineSegment3D>"
    },
    {
        "name": "arcSegment3D",
        "baseName": "arcSegment3D",
        "type": "Array<ArcSegment3D>"
    },
    {
        "name": "polyLine3D",
        "baseName": "polyLine3D",
        "type": "Array<PolyLine3D>"
    },
    {
        "name": "region3D",
        "baseName": "region3D",
        "type": "Array<Region3D>"
    },
    {
        "name": "matConcrete",
        "baseName": "matConcrete",
        "type": "Array<MatConcrete>"
    },
    {
        "name": "matReinforcement",
        "baseName": "matReinforcement",
        "type": "Array<MatReinforcement>"
    },
    {
        "name": "matSteel",
        "baseName": "matSteel",
        "type": "Array<MatSteel>"
    },
    {
        "name": "matPrestressSteel",
        "baseName": "matPrestressSteel",
        "type": "Array<MatPrestressSteel>"
    },
    {
        "name": "matWelding",
        "baseName": "matWelding",
        "type": "Array<MatWelding>"
    },
    {
        "name": "crossSection",
        "baseName": "crossSection",
        "type": "Array<CrossSection>"
    },
    {
        "name": "reinforcedCrossSection",
        "baseName": "reinforcedCrossSection",
        "type": "Array<ReinforcedCrossSection>"
    },
    {
        "name": "hingeElement1D",
        "baseName": "hingeElement1D",
        "type": "Array<HingeElement1D>"
    },
    {
        "name": "opening",
        "baseName": "opening",
        "type": "Array<Opening>"
    },
    {
        "name": "dappedEnd",
        "baseName": "dappedEnd",
        "type": "Array<DappedEnd>"
    },
    {
        "name": "patchDevice",
        "baseName": "patchDevice",
        "type": "Array<PatchDevice>"
    },
    {
        "name": "element1D",
        "baseName": "element1D",
        "type": "Array<Element1D>"
    },
    {
        "name": "beam",
        "baseName": "beam",
        "type": "Array<Beam>"
    },
    {
        "name": "member1D",
        "baseName": "member1D",
        "type": "Array<Member1D>"
    },
    {
        "name": "element2D",
        "baseName": "element2D",
        "type": "Array<Element2D>"
    },
    {
        "name": "wall",
        "baseName": "wall",
        "type": "Array<Wall>"
    },
    {
        "name": "member2D",
        "baseName": "member2D",
        "type": "Array<Member2D>"
    },
    {
        "name": "rigidLink",
        "baseName": "rigidLink",
        "type": "Array<RigidLink>"
    },
    {
        "name": "pointOnLine3D",
        "baseName": "pointOnLine3D",
        "type": "Array<PointOnLine3D>"
    },
    {
        "name": "pointSupportNode",
        "baseName": "pointSupportNode",
        "type": "Array<PointSupportNode>"
    },
    {
        "name": "lineSupportSegment",
        "baseName": "lineSupportSegment",
        "type": "Array<LineSupportSegment>"
    },
    {
        "name": "loadsInPoint",
        "baseName": "loadsInPoint",
        "type": "Array<LoadInPoint>"
    },
    {
        "name": "loadsOnLine",
        "baseName": "loadsOnLine",
        "type": "Array<LoadOnLine>"
    },
    {
        "name": "strainLoadsOnLine",
        "baseName": "strainLoadsOnLine",
        "type": "Array<StrainLoadOnLine>"
    },
    {
        "name": "pointLoadsOnLine",
        "baseName": "pointLoadsOnLine",
        "type": "Array<PointLoadOnLine>"
    },
    {
        "name": "loadsOnSurface",
        "baseName": "loadsOnSurface",
        "type": "Array<LoadOnSurface>"
    },
    {
        "name": "settlements",
        "baseName": "settlements",
        "type": "Array<Settlement>"
    },
    {
        "name": "temperatureLoadsOnLine",
        "baseName": "temperatureLoadsOnLine",
        "type": "Array<TemperatureLoadOnLine>"
    },
    {
        "name": "loadGroup",
        "baseName": "loadGroup",
        "type": "Array<LoadGroup>"
    },
    {
        "name": "loadCase",
        "baseName": "loadCase",
        "type": "Array<LoadCase>"
    },
    {
        "name": "combiInput",
        "baseName": "combiInput",
        "type": "Array<CombiInput>"
    },
    {
        "name": "attribute",
        "baseName": "attribute",
        "type": "Array<object>"
    },
    {
        "name": "connectionPoint",
        "baseName": "connectionPoint",
        "type": "Array<ConnectionPoint>"
    },
    {
        "name": "connections",
        "baseName": "connections",
        "type": "Array<ConnectionData>"
    },
    {
        "name": "reinforcement",
        "baseName": "reinforcement",
        "type": "Array<Reinforcement>"
    },
    {
        "name": "isdModel",
        "baseName": "isdModel",
        "type": "Array<ISDModel>"
    },
    {
        "name": "initialImperfectionOfPoint",
        "baseName": "initialImperfectionOfPoint",
        "type": "Array<InitialImperfectionOfPoint>"
    },
    {
        "name": "tendon",
        "baseName": "tendon",
        "type": "Array<Tendon>"
    },
    {
        "name": "resultClass",
        "baseName": "resultClass",
        "type": "Array<ResultClass>"
    },
    {
        "name": "designMember",
        "baseName": "designMember",
        "type": "Array<DesignMember>"
    },
    {
        "name": "subStructure",
        "baseName": "subStructure",
        "type": "Array<SubStructure>"
    },
    {
        "name": "connectionSetup",
        "baseName": "connectionSetup",
        "type": "ConnectionSetup"
    },
    {
        "name": "projectData",
        "baseName": "projectData",
        "type": "object"
    },
    {
        "name": "checkMember",
        "baseName": "checkMember",
        "type": "Array<CheckMember>"
    },
    {
        "name": "concreteCheckSection",
        "baseName": "concreteCheckSection",
        "type": "Array<CheckSection>"
    },
    {
        "name": "concreteSetup",
        "baseName": "concreteSetup",
        "type": "ConcreteSetup"
    },
    {
        "name": "projectDataConcrete",
        "baseName": "projectDataConcrete",
        "type": "object"
    },
    {
        "name": "rebarShape",
        "baseName": "rebarShape",
        "type": "Array<RebarShape>"
    },
    {
        "name": "rebarGeneral",
        "baseName": "rebarGeneral",
        "type": "Array<RebarGeneral>"
    },
    {
        "name": "rebarSingle",
        "baseName": "rebarSingle",
        "type": "Array<RebarSingle>"
    },
    {
        "name": "rebarStirrups",
        "baseName": "rebarStirrups",
        "type": "Array<RebarStirrups>"
    },
    {
        "name": "taper",
        "baseName": "taper",
        "type": "Array<Taper>"
    },
    {
        "name": "span",
        "baseName": "span",
        "type": "Array<Span>"
    },
    {
        "name": "solidBlocks3D",
        "baseName": "solidBlocks3D",
        "type": "Array<SolidBlock3D>"
    },
    {
        "name": "surfaceSupports3D",
        "baseName": "surfaceSupports3D",
        "type": "Array<SurfaceSupport3D>"
    },
    {
        "name": "basePlates3D",
        "baseName": "basePlates3D",
        "type": "Array<BasePlate3D>"
    },
    {
        "name": "anchors3D",
        "baseName": "anchors3D",
        "type": "Array<Anchor3D>"
    },
    {
        "name": "detailLoadCase",
        "baseName": "detailLoadCase",
        "type": "Array<DetailLoadCase>"
    },
    {
        "name": "detailCombination",
        "baseName": "detailCombination",
        "type": "Array<DetailCombination>"
    }
];
