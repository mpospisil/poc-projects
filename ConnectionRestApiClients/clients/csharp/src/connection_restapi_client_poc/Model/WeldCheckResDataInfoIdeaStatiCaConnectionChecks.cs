/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// WeldCheckResDataInfoIdeaStatiCaConnectionChecks
    /// </summary>
    [DataContract(Name = "WeldCheckResDataInfo-IdeaStatiCa_ConnectionChecks")]
    public partial class WeldCheckResDataInfoIdeaStatiCaConnectionChecks : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets WeldingType
        /// </summary>
        [DataMember(Name = "weldingType", EmitDefaultValue = false)]
        public DataWeldingTypeSNIPCIBasicTypes? WeldingType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WeldCheckResDataInfoIdeaStatiCaConnectionChecks" /> class.
        /// </summary>
        /// <param name="itemName">itemName.</param>
        /// <param name="equivalentStressResistance">equivalentStressResistance.</param>
        /// <param name="sigmaPerpendicularResistance">sigmaPerpendicularResistance.</param>
        /// <param name="betaW">betaW.</param>
        /// <param name="weldStrength">weldStrength.</param>
        /// <param name="eNelectrode">eNelectrode.</param>
        /// <param name="flatPosition">flatPosition.</param>
        /// <param name="weldingType">weldingType.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="checkStatus">checkStatus.</param>
        /// <param name="limitCheckStatus">limitCheckStatus.</param>
        /// <param name="loadCaseId">loadCaseId.</param>
        /// <param name="loadCase">loadCase.</param>
        /// <param name="maxUnityCheck">maxUnityCheck.</param>
        /// <param name="form">form.</param>
        public WeldCheckResDataInfoIdeaStatiCaConnectionChecks(string itemName = default(string), double equivalentStressResistance = default(double), double sigmaPerpendicularResistance = default(double), double betaW = default(double), double weldStrength = default(double), bool eNelectrode = default(bool), bool flatPosition = default(bool), DataWeldingTypeSNIPCIBasicTypes? weldingType = default(DataWeldingTypeSNIPCIBasicTypes?), int id = default(int), string name = default(string), bool checkStatus = default(bool), bool limitCheckStatus = default(bool), int loadCaseId = default(int), string loadCase = default(string), double maxUnityCheck = default(double), string form = default(string))
        {
            this.ItemName = itemName;
            this.EquivalentStressResistance = equivalentStressResistance;
            this.SigmaPerpendicularResistance = sigmaPerpendicularResistance;
            this.BetaW = betaW;
            this.WeldStrength = weldStrength;
            this.ENelectrode = eNelectrode;
            this.FlatPosition = flatPosition;
            this.WeldingType = weldingType;
            this.Id = id;
            this.Name = name;
            this.CheckStatus = checkStatus;
            this.LimitCheckStatus = limitCheckStatus;
            this.LoadCaseId = loadCaseId;
            this.LoadCase = loadCase;
            this.MaxUnityCheck = maxUnityCheck;
            this.Form = form;
        }

        /// <summary>
        /// Gets or Sets ItemName
        /// </summary>
        [DataMember(Name = "itemName", EmitDefaultValue = true)]
        public string ItemName { get; set; }

        /// <summary>
        /// Gets or Sets EquivalentStressResistance
        /// </summary>
        [DataMember(Name = "equivalentStressResistance", EmitDefaultValue = false)]
        public double EquivalentStressResistance { get; set; }

        /// <summary>
        /// Gets or Sets SigmaPerpendicularResistance
        /// </summary>
        [DataMember(Name = "sigmaPerpendicularResistance", EmitDefaultValue = false)]
        public double SigmaPerpendicularResistance { get; set; }

        /// <summary>
        /// Gets or Sets BetaW
        /// </summary>
        [DataMember(Name = "betaW", EmitDefaultValue = false)]
        public double BetaW { get; set; }

        /// <summary>
        /// Gets or Sets WeldStrength
        /// </summary>
        [DataMember(Name = "weldStrength", EmitDefaultValue = false)]
        public double WeldStrength { get; set; }

        /// <summary>
        /// Gets or Sets ENelectrode
        /// </summary>
        [DataMember(Name = "eNelectrode", EmitDefaultValue = true)]
        public bool ENelectrode { get; set; }

        /// <summary>
        /// Gets or Sets FlatPosition
        /// </summary>
        [DataMember(Name = "flatPosition", EmitDefaultValue = true)]
        public bool FlatPosition { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CheckStatus
        /// </summary>
        [DataMember(Name = "checkStatus", EmitDefaultValue = true)]
        public bool CheckStatus { get; set; }

        /// <summary>
        /// Gets or Sets LimitCheckStatus
        /// </summary>
        [DataMember(Name = "limitCheckStatus", EmitDefaultValue = true)]
        public bool LimitCheckStatus { get; set; }

        /// <summary>
        /// Gets or Sets LoadCaseId
        /// </summary>
        [DataMember(Name = "loadCaseId", EmitDefaultValue = false)]
        public int LoadCaseId { get; set; }

        /// <summary>
        /// Gets or Sets LoadCase
        /// </summary>
        [DataMember(Name = "loadCase", EmitDefaultValue = true)]
        public string LoadCase { get; set; }

        /// <summary>
        /// Gets or Sets MaxUnityCheck
        /// </summary>
        [DataMember(Name = "maxUnityCheck", EmitDefaultValue = false)]
        public double MaxUnityCheck { get; set; }

        /// <summary>
        /// Gets or Sets Form
        /// </summary>
        [DataMember(Name = "form", EmitDefaultValue = true)]
        public string Form { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WeldCheckResDataInfoIdeaStatiCaConnectionChecks {\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  EquivalentStressResistance: ").Append(EquivalentStressResistance).Append("\n");
            sb.Append("  SigmaPerpendicularResistance: ").Append(SigmaPerpendicularResistance).Append("\n");
            sb.Append("  BetaW: ").Append(BetaW).Append("\n");
            sb.Append("  WeldStrength: ").Append(WeldStrength).Append("\n");
            sb.Append("  ENelectrode: ").Append(ENelectrode).Append("\n");
            sb.Append("  FlatPosition: ").Append(FlatPosition).Append("\n");
            sb.Append("  WeldingType: ").Append(WeldingType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CheckStatus: ").Append(CheckStatus).Append("\n");
            sb.Append("  LimitCheckStatus: ").Append(LimitCheckStatus).Append("\n");
            sb.Append("  LoadCaseId: ").Append(LoadCaseId).Append("\n");
            sb.Append("  LoadCase: ").Append(LoadCase).Append("\n");
            sb.Append("  MaxUnityCheck: ").Append(MaxUnityCheck).Append("\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
