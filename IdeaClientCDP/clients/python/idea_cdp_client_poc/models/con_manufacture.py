# coding: utf-8

"""
    ConDesignProposer API 1.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from idea_cdp_client_poc.models.con_part import ConPart
from idea_cdp_client_poc.models.manufacturing_types import ManufacturingTypes
from idea_cdp_client_poc.models.operations_info import OperationsInfo
from typing import Optional, Set
from typing_extensions import Self

class ConManufacture(BaseModel):
    """
    ConManufacture
    """ # noqa: E501
    manufacturing_type: Optional[ManufacturingTypes] = Field(default=None, alias="manufacturingType")
    connection_template: Optional[StrictStr] = Field(default=None, alias="connectionTemplate")
    con_parts: Optional[List[ConPart]] = Field(default=None, alias="conParts")
    operations_info: Optional[OperationsInfo] = Field(default=None, alias="operationsInfo")
    typology_code: Optional[StrictStr] = Field(default=None, alias="typologyCode")
    __properties: ClassVar[List[str]] = ["manufacturingType", "connectionTemplate", "conParts", "operationsInfo", "typologyCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConManufacture from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in con_parts (list)
        _items = []
        if self.con_parts:
            for _item in self.con_parts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['conParts'] = _items
        # override the default output from pydantic by calling `to_dict()` of operations_info
        if self.operations_info:
            _dict['operationsInfo'] = self.operations_info.to_dict()
        # set to None if connection_template (nullable) is None
        # and model_fields_set contains the field
        if self.connection_template is None and "connection_template" in self.model_fields_set:
            _dict['connectionTemplate'] = None

        # set to None if con_parts (nullable) is None
        # and model_fields_set contains the field
        if self.con_parts is None and "con_parts" in self.model_fields_set:
            _dict['conParts'] = None

        # set to None if typology_code (nullable) is None
        # and model_fields_set contains the field
        if self.typology_code is None and "typology_code" in self.model_fields_set:
            _dict['typologyCode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConManufacture from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "manufacturingType": obj.get("manufacturingType"),
            "connectionTemplate": obj.get("connectionTemplate"),
            "conParts": [ConPart.from_dict(_item) for _item in obj["conParts"]] if obj.get("conParts") is not None else None,
            "operationsInfo": OperationsInfo.from_dict(obj["operationsInfo"]) if obj.get("operationsInfo") is not None else None,
            "typologyCode": obj.get("typologyCode")
        })
        return _obj


