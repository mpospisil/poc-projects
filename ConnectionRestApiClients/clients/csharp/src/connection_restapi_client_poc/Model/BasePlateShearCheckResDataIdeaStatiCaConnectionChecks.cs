/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// BasePlateShearCheckResDataIdeaStatiCaConnectionChecks
    /// </summary>
    [DataContract(Name = "BasePlateShearCheckResData-IdeaStatiCa_ConnectionChecks")]
    public partial class BasePlateShearCheckResDataIdeaStatiCaConnectionChecks : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets ConeBreakoutCheckType
        /// </summary>
        [DataMember(Name = "coneBreakoutCheckType", EmitDefaultValue = false)]
        public DataConeBreakoutCheckTypeCIBasicTypes? ConeBreakoutCheckType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BasePlateShearCheckResDataIdeaStatiCaConnectionChecks" /> class.
        /// </summary>
        /// <param name="vrdf">vrdf.</param>
        /// <param name="vrdx">vrdx.</param>
        /// <param name="vrdy">vrdy.</param>
        /// <param name="vx">vx.</param>
        /// <param name="vy">vy.</param>
        /// <param name="v">v.</param>
        /// <param name="vr">vr.</param>
        /// <param name="pbr">pbr.</param>
        /// <param name="vcb">vcb.</param>
        /// <param name="frictionCoefficient">frictionCoefficient.</param>
        /// <param name="shearIronCss">shearIronCss.</param>
        /// <param name="shearIronApplied">shearIronApplied.</param>
        /// <param name="unityCheck">unityCheck.</param>
        /// <param name="avx">avx.</param>
        /// <param name="avy">avy.</param>
        /// <param name="fy">fy.</param>
        /// <param name="nsd">nsd.</param>
        /// <param name="shearForceTransfer">shearForceTransfer.</param>
        /// <param name="gammaM0">gammaM0.</param>
        /// <param name="asd">asd.</param>
        /// <param name="phiOmega">phiOmega.</param>
        /// <param name="bearingResistance">bearingResistance.</param>
        /// <param name="numOfTensionedAnchors">numOfTensionedAnchors.</param>
        /// <param name="phiBr">phiBr.</param>
        /// <param name="fc">fc.</param>
        /// <param name="alphaV">alphaV.</param>
        /// <param name="psiAlphaV">psiAlphaV.</param>
        /// <param name="avcConeBreakoutArea">avcConeBreakoutArea.</param>
        /// <param name="unityCheckConeBreakoutResistance">unityCheckConeBreakoutResistance.</param>
        /// <param name="unityCheckBearingCapacity">unityCheckBearingCapacity.</param>
        /// <param name="phiC">phiC.</param>
        /// <param name="omegaC">omegaC.</param>
        /// <param name="phiS">phiS.</param>
        /// <param name="shearLugForce">shearLugForce.</param>
        /// <param name="shearLugForceComponent">shearLugForceComponent.</param>
        /// <param name="coneBreakoutCheckType">coneBreakoutCheckType.</param>
        /// <param name="shearLugProjectionArea">shearLugProjectionArea.</param>
        /// <param name="compForce">compForce.</param>
        /// <param name="kc">kc.</param>
        /// <param name="connectorTensileArea">connectorTensileArea.</param>
        /// <param name="connectorFy">connectorFy.</param>
        /// <param name="ny">ny.</param>
        /// <param name="pa">pa.</param>
        /// <param name="a">a.</param>
        /// <param name="l">l.</param>
        /// <param name="b">b.</param>
        /// <param name="gammaC">gammaC.</param>
        /// <param name="vFactor">vFactor.</param>
        /// <param name="k1Factor">k1Factor.</param>
        /// <param name="sigmaRdmax">sigmaRdmax.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="checkStatus">checkStatus.</param>
        /// <param name="limitCheckStatus">limitCheckStatus.</param>
        /// <param name="loadCaseId">loadCaseId.</param>
        /// <param name="loadCase">loadCase.</param>
        /// <param name="maxUnityCheck">maxUnityCheck.</param>
        /// <param name="form">form.</param>
        public BasePlateShearCheckResDataIdeaStatiCaConnectionChecks(double vrdf = default(double), double vrdx = default(double), double vrdy = default(double), double vx = default(double), double vy = default(double), double v = default(double), double vr = default(double), double pbr = default(double), double vcb = default(double), double frictionCoefficient = default(double), string shearIronCss = default(string), bool shearIronApplied = default(bool), double unityCheck = default(double), double avx = default(double), double avy = default(double), double fy = default(double), double nsd = default(double), int shearForceTransfer = default(int), double gammaM0 = default(double), bool asd = default(bool), double phiOmega = default(double), double bearingResistance = default(double), int numOfTensionedAnchors = default(int), double phiBr = default(double), double fc = default(double), double alphaV = default(double), double psiAlphaV = default(double), double avcConeBreakoutArea = default(double), double unityCheckConeBreakoutResistance = default(double), double unityCheckBearingCapacity = default(double), double phiC = default(double), double omegaC = default(double), double phiS = default(double), double shearLugForce = default(double), double shearLugForceComponent = default(double), DataConeBreakoutCheckTypeCIBasicTypes? coneBreakoutCheckType = default(DataConeBreakoutCheckTypeCIBasicTypes?), double shearLugProjectionArea = default(double), double compForce = default(double), double kc = default(double), double connectorTensileArea = default(double), double connectorFy = default(double), double ny = default(double), double pa = default(double), double a = default(double), double l = default(double), double b = default(double), double gammaC = default(double), double vFactor = default(double), double k1Factor = default(double), double sigmaRdmax = default(double), int id = default(int), string name = default(string), bool checkStatus = default(bool), bool limitCheckStatus = default(bool), int loadCaseId = default(int), string loadCase = default(string), double maxUnityCheck = default(double), string form = default(string))
        {
            this.Vrdf = vrdf;
            this.Vrdx = vrdx;
            this.Vrdy = vrdy;
            this.Vx = vx;
            this.Vy = vy;
            this.V = v;
            this.Vr = vr;
            this.Pbr = pbr;
            this.Vcb = vcb;
            this.FrictionCoefficient = frictionCoefficient;
            this.ShearIronCss = shearIronCss;
            this.ShearIronApplied = shearIronApplied;
            this.UnityCheck = unityCheck;
            this.Avx = avx;
            this.Avy = avy;
            this.Fy = fy;
            this.Nsd = nsd;
            this.ShearForceTransfer = shearForceTransfer;
            this.GammaM0 = gammaM0;
            this.Asd = asd;
            this.PhiOmega = phiOmega;
            this.BearingResistance = bearingResistance;
            this.NumOfTensionedAnchors = numOfTensionedAnchors;
            this.PhiBr = phiBr;
            this.Fc = fc;
            this.AlphaV = alphaV;
            this.PsiAlphaV = psiAlphaV;
            this.AvcConeBreakoutArea = avcConeBreakoutArea;
            this.UnityCheckConeBreakoutResistance = unityCheckConeBreakoutResistance;
            this.UnityCheckBearingCapacity = unityCheckBearingCapacity;
            this.PhiC = phiC;
            this.OmegaC = omegaC;
            this.PhiS = phiS;
            this.ShearLugForce = shearLugForce;
            this.ShearLugForceComponent = shearLugForceComponent;
            this.ConeBreakoutCheckType = coneBreakoutCheckType;
            this.ShearLugProjectionArea = shearLugProjectionArea;
            this.CompForce = compForce;
            this.Kc = kc;
            this.ConnectorTensileArea = connectorTensileArea;
            this.ConnectorFy = connectorFy;
            this.Ny = ny;
            this.Pa = pa;
            this.A = a;
            this.L = l;
            this.B = b;
            this.GammaC = gammaC;
            this.VFactor = vFactor;
            this.K1Factor = k1Factor;
            this.SigmaRdmax = sigmaRdmax;
            this.Id = id;
            this.Name = name;
            this.CheckStatus = checkStatus;
            this.LimitCheckStatus = limitCheckStatus;
            this.LoadCaseId = loadCaseId;
            this.LoadCase = loadCase;
            this.MaxUnityCheck = maxUnityCheck;
            this.Form = form;
        }

        /// <summary>
        /// Gets or Sets Vrdf
        /// </summary>
        [DataMember(Name = "vrdf", EmitDefaultValue = false)]
        public double Vrdf { get; set; }

        /// <summary>
        /// Gets or Sets Vrdx
        /// </summary>
        [DataMember(Name = "vrdx", EmitDefaultValue = false)]
        public double Vrdx { get; set; }

        /// <summary>
        /// Gets or Sets Vrdy
        /// </summary>
        [DataMember(Name = "vrdy", EmitDefaultValue = false)]
        public double Vrdy { get; set; }

        /// <summary>
        /// Gets or Sets Vx
        /// </summary>
        [DataMember(Name = "vx", EmitDefaultValue = false)]
        public double Vx { get; set; }

        /// <summary>
        /// Gets or Sets Vy
        /// </summary>
        [DataMember(Name = "vy", EmitDefaultValue = false)]
        public double Vy { get; set; }

        /// <summary>
        /// Gets or Sets V
        /// </summary>
        [DataMember(Name = "v", EmitDefaultValue = false)]
        public double V { get; set; }

        /// <summary>
        /// Gets or Sets Vr
        /// </summary>
        [DataMember(Name = "vr", EmitDefaultValue = false)]
        public double Vr { get; set; }

        /// <summary>
        /// Gets or Sets Pbr
        /// </summary>
        [DataMember(Name = "pbr", EmitDefaultValue = false)]
        public double Pbr { get; set; }

        /// <summary>
        /// Gets or Sets Vcb
        /// </summary>
        [DataMember(Name = "vcb", EmitDefaultValue = false)]
        public double Vcb { get; set; }

        /// <summary>
        /// Gets or Sets FrictionCoefficient
        /// </summary>
        [DataMember(Name = "frictionCoefficient", EmitDefaultValue = false)]
        public double FrictionCoefficient { get; set; }

        /// <summary>
        /// Gets or Sets ShearIronCss
        /// </summary>
        [DataMember(Name = "shearIronCss", EmitDefaultValue = true)]
        public string ShearIronCss { get; set; }

        /// <summary>
        /// Gets or Sets ShearIronApplied
        /// </summary>
        [DataMember(Name = "shearIronApplied", EmitDefaultValue = true)]
        public bool ShearIronApplied { get; set; }

        /// <summary>
        /// Gets or Sets UnityCheck
        /// </summary>
        [DataMember(Name = "unityCheck", EmitDefaultValue = false)]
        public double UnityCheck { get; set; }

        /// <summary>
        /// Gets or Sets Avx
        /// </summary>
        [DataMember(Name = "avx", EmitDefaultValue = false)]
        public double Avx { get; set; }

        /// <summary>
        /// Gets or Sets Avy
        /// </summary>
        [DataMember(Name = "avy", EmitDefaultValue = false)]
        public double Avy { get; set; }

        /// <summary>
        /// Gets or Sets Fy
        /// </summary>
        [DataMember(Name = "fy", EmitDefaultValue = false)]
        public double Fy { get; set; }

        /// <summary>
        /// Gets or Sets Nsd
        /// </summary>
        [DataMember(Name = "nsd", EmitDefaultValue = false)]
        public double Nsd { get; set; }

        /// <summary>
        /// Gets or Sets ShearForceTransfer
        /// </summary>
        [DataMember(Name = "shearForceTransfer", EmitDefaultValue = false)]
        public int ShearForceTransfer { get; set; }

        /// <summary>
        /// Gets or Sets GammaM0
        /// </summary>
        [DataMember(Name = "gammaM0", EmitDefaultValue = false)]
        public double GammaM0 { get; set; }

        /// <summary>
        /// Gets or Sets Asd
        /// </summary>
        [DataMember(Name = "asd", EmitDefaultValue = true)]
        public bool Asd { get; set; }

        /// <summary>
        /// Gets or Sets PhiOmega
        /// </summary>
        [DataMember(Name = "phiOmega", EmitDefaultValue = false)]
        public double PhiOmega { get; set; }

        /// <summary>
        /// Gets or Sets BearingResistance
        /// </summary>
        [DataMember(Name = "bearingResistance", EmitDefaultValue = false)]
        public double BearingResistance { get; set; }

        /// <summary>
        /// Gets or Sets NumOfTensionedAnchors
        /// </summary>
        [DataMember(Name = "numOfTensionedAnchors", EmitDefaultValue = false)]
        public int NumOfTensionedAnchors { get; set; }

        /// <summary>
        /// Gets or Sets PhiBr
        /// </summary>
        [DataMember(Name = "phiBr", EmitDefaultValue = false)]
        public double PhiBr { get; set; }

        /// <summary>
        /// Gets or Sets Fc
        /// </summary>
        [DataMember(Name = "fc", EmitDefaultValue = false)]
        public double Fc { get; set; }

        /// <summary>
        /// Gets or Sets AlphaV
        /// </summary>
        [DataMember(Name = "alphaV", EmitDefaultValue = false)]
        public double AlphaV { get; set; }

        /// <summary>
        /// Gets or Sets PsiAlphaV
        /// </summary>
        [DataMember(Name = "psiAlphaV", EmitDefaultValue = false)]
        public double PsiAlphaV { get; set; }

        /// <summary>
        /// Gets or Sets AvcConeBreakoutArea
        /// </summary>
        [DataMember(Name = "avcConeBreakoutArea", EmitDefaultValue = false)]
        public double AvcConeBreakoutArea { get; set; }

        /// <summary>
        /// Gets or Sets UnityCheckConeBreakoutResistance
        /// </summary>
        [DataMember(Name = "unityCheckConeBreakoutResistance", EmitDefaultValue = false)]
        public double UnityCheckConeBreakoutResistance { get; set; }

        /// <summary>
        /// Gets or Sets UnityCheckBearingCapacity
        /// </summary>
        [DataMember(Name = "unityCheckBearingCapacity", EmitDefaultValue = false)]
        public double UnityCheckBearingCapacity { get; set; }

        /// <summary>
        /// Gets or Sets PhiC
        /// </summary>
        [DataMember(Name = "phiC", EmitDefaultValue = false)]
        public double PhiC { get; set; }

        /// <summary>
        /// Gets or Sets OmegaC
        /// </summary>
        [DataMember(Name = "omegaC", EmitDefaultValue = false)]
        public double OmegaC { get; set; }

        /// <summary>
        /// Gets or Sets PhiS
        /// </summary>
        [DataMember(Name = "phiS", EmitDefaultValue = false)]
        public double PhiS { get; set; }

        /// <summary>
        /// Gets or Sets ShearLugForce
        /// </summary>
        [DataMember(Name = "shearLugForce", EmitDefaultValue = false)]
        public double ShearLugForce { get; set; }

        /// <summary>
        /// Gets or Sets ShearLugForceComponent
        /// </summary>
        [DataMember(Name = "shearLugForceComponent", EmitDefaultValue = false)]
        public double ShearLugForceComponent { get; set; }

        /// <summary>
        /// Gets or Sets ShearLugProjectionArea
        /// </summary>
        [DataMember(Name = "shearLugProjectionArea", EmitDefaultValue = false)]
        public double ShearLugProjectionArea { get; set; }

        /// <summary>
        /// Gets or Sets CompForce
        /// </summary>
        [DataMember(Name = "compForce", EmitDefaultValue = false)]
        public double CompForce { get; set; }

        /// <summary>
        /// Gets or Sets Kc
        /// </summary>
        [DataMember(Name = "kc", EmitDefaultValue = false)]
        public double Kc { get; set; }

        /// <summary>
        /// Gets or Sets ConnectorTensileArea
        /// </summary>
        [DataMember(Name = "connectorTensileArea", EmitDefaultValue = false)]
        public double ConnectorTensileArea { get; set; }

        /// <summary>
        /// Gets or Sets ConnectorFy
        /// </summary>
        [DataMember(Name = "connectorFy", EmitDefaultValue = false)]
        public double ConnectorFy { get; set; }

        /// <summary>
        /// Gets or Sets Ny
        /// </summary>
        [DataMember(Name = "ny", EmitDefaultValue = false)]
        public double Ny { get; set; }

        /// <summary>
        /// Gets or Sets Pa
        /// </summary>
        [DataMember(Name = "pa", EmitDefaultValue = false)]
        public double Pa { get; set; }

        /// <summary>
        /// Gets or Sets A
        /// </summary>
        [DataMember(Name = "a", EmitDefaultValue = false)]
        public double A { get; set; }

        /// <summary>
        /// Gets or Sets L
        /// </summary>
        [DataMember(Name = "l", EmitDefaultValue = false)]
        public double L { get; set; }

        /// <summary>
        /// Gets or Sets B
        /// </summary>
        [DataMember(Name = "b", EmitDefaultValue = false)]
        public double B { get; set; }

        /// <summary>
        /// Gets or Sets GammaC
        /// </summary>
        [DataMember(Name = "gammaC", EmitDefaultValue = false)]
        public double GammaC { get; set; }

        /// <summary>
        /// Gets or Sets VFactor
        /// </summary>
        [DataMember(Name = "vFactor", EmitDefaultValue = false)]
        public double VFactor { get; set; }

        /// <summary>
        /// Gets or Sets K1Factor
        /// </summary>
        [DataMember(Name = "k1Factor", EmitDefaultValue = false)]
        public double K1Factor { get; set; }

        /// <summary>
        /// Gets or Sets SigmaRdmax
        /// </summary>
        [DataMember(Name = "sigmaRdmax", EmitDefaultValue = false)]
        public double SigmaRdmax { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CheckStatus
        /// </summary>
        [DataMember(Name = "checkStatus", EmitDefaultValue = true)]
        public bool CheckStatus { get; set; }

        /// <summary>
        /// Gets or Sets LimitCheckStatus
        /// </summary>
        [DataMember(Name = "limitCheckStatus", EmitDefaultValue = true)]
        public bool LimitCheckStatus { get; set; }

        /// <summary>
        /// Gets or Sets LoadCaseId
        /// </summary>
        [DataMember(Name = "loadCaseId", EmitDefaultValue = false)]
        public int LoadCaseId { get; set; }

        /// <summary>
        /// Gets or Sets LoadCase
        /// </summary>
        [DataMember(Name = "loadCase", EmitDefaultValue = true)]
        public string LoadCase { get; set; }

        /// <summary>
        /// Gets or Sets MaxUnityCheck
        /// </summary>
        [DataMember(Name = "maxUnityCheck", EmitDefaultValue = false)]
        public double MaxUnityCheck { get; set; }

        /// <summary>
        /// Gets or Sets Form
        /// </summary>
        [DataMember(Name = "form", EmitDefaultValue = true)]
        public string Form { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BasePlateShearCheckResDataIdeaStatiCaConnectionChecks {\n");
            sb.Append("  Vrdf: ").Append(Vrdf).Append("\n");
            sb.Append("  Vrdx: ").Append(Vrdx).Append("\n");
            sb.Append("  Vrdy: ").Append(Vrdy).Append("\n");
            sb.Append("  Vx: ").Append(Vx).Append("\n");
            sb.Append("  Vy: ").Append(Vy).Append("\n");
            sb.Append("  V: ").Append(V).Append("\n");
            sb.Append("  Vr: ").Append(Vr).Append("\n");
            sb.Append("  Pbr: ").Append(Pbr).Append("\n");
            sb.Append("  Vcb: ").Append(Vcb).Append("\n");
            sb.Append("  FrictionCoefficient: ").Append(FrictionCoefficient).Append("\n");
            sb.Append("  ShearIronCss: ").Append(ShearIronCss).Append("\n");
            sb.Append("  ShearIronApplied: ").Append(ShearIronApplied).Append("\n");
            sb.Append("  UnityCheck: ").Append(UnityCheck).Append("\n");
            sb.Append("  Avx: ").Append(Avx).Append("\n");
            sb.Append("  Avy: ").Append(Avy).Append("\n");
            sb.Append("  Fy: ").Append(Fy).Append("\n");
            sb.Append("  Nsd: ").Append(Nsd).Append("\n");
            sb.Append("  ShearForceTransfer: ").Append(ShearForceTransfer).Append("\n");
            sb.Append("  GammaM0: ").Append(GammaM0).Append("\n");
            sb.Append("  Asd: ").Append(Asd).Append("\n");
            sb.Append("  PhiOmega: ").Append(PhiOmega).Append("\n");
            sb.Append("  BearingResistance: ").Append(BearingResistance).Append("\n");
            sb.Append("  NumOfTensionedAnchors: ").Append(NumOfTensionedAnchors).Append("\n");
            sb.Append("  PhiBr: ").Append(PhiBr).Append("\n");
            sb.Append("  Fc: ").Append(Fc).Append("\n");
            sb.Append("  AlphaV: ").Append(AlphaV).Append("\n");
            sb.Append("  PsiAlphaV: ").Append(PsiAlphaV).Append("\n");
            sb.Append("  AvcConeBreakoutArea: ").Append(AvcConeBreakoutArea).Append("\n");
            sb.Append("  UnityCheckConeBreakoutResistance: ").Append(UnityCheckConeBreakoutResistance).Append("\n");
            sb.Append("  UnityCheckBearingCapacity: ").Append(UnityCheckBearingCapacity).Append("\n");
            sb.Append("  PhiC: ").Append(PhiC).Append("\n");
            sb.Append("  OmegaC: ").Append(OmegaC).Append("\n");
            sb.Append("  PhiS: ").Append(PhiS).Append("\n");
            sb.Append("  ShearLugForce: ").Append(ShearLugForce).Append("\n");
            sb.Append("  ShearLugForceComponent: ").Append(ShearLugForceComponent).Append("\n");
            sb.Append("  ConeBreakoutCheckType: ").Append(ConeBreakoutCheckType).Append("\n");
            sb.Append("  ShearLugProjectionArea: ").Append(ShearLugProjectionArea).Append("\n");
            sb.Append("  CompForce: ").Append(CompForce).Append("\n");
            sb.Append("  Kc: ").Append(Kc).Append("\n");
            sb.Append("  ConnectorTensileArea: ").Append(ConnectorTensileArea).Append("\n");
            sb.Append("  ConnectorFy: ").Append(ConnectorFy).Append("\n");
            sb.Append("  Ny: ").Append(Ny).Append("\n");
            sb.Append("  Pa: ").Append(Pa).Append("\n");
            sb.Append("  A: ").Append(A).Append("\n");
            sb.Append("  L: ").Append(L).Append("\n");
            sb.Append("  B: ").Append(B).Append("\n");
            sb.Append("  GammaC: ").Append(GammaC).Append("\n");
            sb.Append("  VFactor: ").Append(VFactor).Append("\n");
            sb.Append("  K1Factor: ").Append(K1Factor).Append("\n");
            sb.Append("  SigmaRdmax: ").Append(SigmaRdmax).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CheckStatus: ").Append(CheckStatus).Append("\n");
            sb.Append("  LimitCheckStatus: ").Append(LimitCheckStatus).Append("\n");
            sb.Append("  LoadCaseId: ").Append(LoadCaseId).Append("\n");
            sb.Append("  LoadCase: ").Append(LoadCase).Append("\n");
            sb.Append("  MaxUnityCheck: ").Append(MaxUnityCheck).Append("\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
