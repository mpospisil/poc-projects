/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// CostEstimationItemSteelIdeaStatiCaConnectionChecks
    /// </summary>
    [DataContract(Name = "CostEstimationItemSteel-IdeaStatiCa_ConnectionChecks")]
    public partial class CostEstimationItemSteelIdeaStatiCaConnectionChecks : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CostEstimationItemSteelIdeaStatiCaConnectionChecks" /> class.
        /// </summary>
        /// <param name="uniqueId">uniqueId.</param>
        /// <param name="unitCost">unitCost.</param>
        /// <param name="cost">cost.</param>
        /// <param name="totalWeight">totalWeight.</param>
        /// <param name="name">name.</param>
        /// <param name="grade">grade.</param>
        /// <param name="plateThickness">plateThickness.</param>
        public CostEstimationItemSteelIdeaStatiCaConnectionChecks(int uniqueId = default(int), double unitCost = default(double), double cost = default(double), double totalWeight = default(double), string name = default(string), double grade = default(double), double plateThickness = default(double))
        {
            this.UniqueId = uniqueId;
            this.UnitCost = unitCost;
            this.Cost = cost;
            this.TotalWeight = totalWeight;
            this.Name = name;
            this.Grade = grade;
            this.PlateThickness = plateThickness;
        }

        /// <summary>
        /// Gets or Sets UniqueId
        /// </summary>
        [DataMember(Name = "uniqueId", EmitDefaultValue = false)]
        public int UniqueId { get; set; }

        /// <summary>
        /// Gets or Sets UnitCost
        /// </summary>
        [DataMember(Name = "unitCost", EmitDefaultValue = false)]
        public double UnitCost { get; set; }

        /// <summary>
        /// Gets or Sets Cost
        /// </summary>
        [DataMember(Name = "cost", EmitDefaultValue = false)]
        public double Cost { get; set; }

        /// <summary>
        /// Gets or Sets TotalWeight
        /// </summary>
        [DataMember(Name = "totalWeight", EmitDefaultValue = false)]
        public double TotalWeight { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Grade
        /// </summary>
        [DataMember(Name = "grade", EmitDefaultValue = false)]
        public double Grade { get; set; }

        /// <summary>
        /// Gets or Sets PlateThickness
        /// </summary>
        [DataMember(Name = "plateThickness", EmitDefaultValue = false)]
        public double PlateThickness { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CostEstimationItemSteelIdeaStatiCaConnectionChecks {\n");
            sb.Append("  UniqueId: ").Append(UniqueId).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  TotalWeight: ").Append(TotalWeight).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  PlateThickness: ").Append(PlateThickness).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
