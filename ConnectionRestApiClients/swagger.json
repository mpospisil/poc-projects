{
  "openapi": "3.0.1",
  "info": {
    "title": "Connection Rest API 1.0",
    "version": "1.0"
  },
  "paths": {
    "/api/1/projects/{projectId}/connections/calculate": {
      "post": {
        "tags": [
          "Calculation"
        ],
        "summary": "Run CBFEM caluclation and return the summary of the results",
        "operationId": "Calculate",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of connections to calculate and a type of CBFEM analysis",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConCalculationParameter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConResultSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/results": {
      "post": {
        "tags": [
          "Calculation"
        ],
        "summary": "Get detailed results of the CBFEM analysis",
        "operationId": "GetResults",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of connections to calculate and a type of CBFEM analysis",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConCalculationParameter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectionCheckRes"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/rawresults-text": {
      "post": {
        "tags": [
          "Calculation"
        ],
        "summary": "Get json string which represents raw CBFEM results (an instance of CheckResultsData)",
        "operationId": "GetRawJsonResults",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened connection in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Type of requested analysis and connection to calculate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConCalculationParameter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/clients/connect-client": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Connect a client to the ConnectionRestApi service. Method returns a unique identifier of the client.",
        "operationId": "ConnectClient",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/clients/idea-service-version": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Get the IdeaStatica version",
        "operationId": "GetVersion",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Get data about all connections in the project",
        "operationId": "GetAllConnectionsData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConConnection"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Get data about a specific connection in the project",
        "operationId": "GetConnectionData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "The id of the requested connection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConConnection"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Connection"
        ],
        "summary": "Update data of a specific connection in the project",
        "operationId": "UpdateConnectionData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to be update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New connection data to be set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConConnection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConConnection"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/production-cost": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Get production cost of the connection",
        "operationId": "GetProductionCost",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the requested connection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConProductionCost"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/export-iom": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export connection to XML which includes https://github.com/idea-statica/ideastatica-public/blob/main/src/IdeaRS.OpenModel/OpenModelContainer.cs",
        "operationId": "ExportIomXml",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/export-iom-connection-data": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Get https://github.com/idea-statica/ideastatica-public/blob/main/src/IdeaRS.OpenModel/Connection/ConnectionData.cs for required connection",
        "operationId": "ExportConnectionData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionData"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionData"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/export-ifc": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export connection to IFC format",
        "operationId": "ExportConnectionIFC",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/load-effects": {
      "get": {
        "tags": [
          "LoadEffect"
        ],
        "summary": "Get all load effects which are defined in connectionId",
        "operationId": "GetLoadEffects",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isPercentage",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConLoadEffect"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LoadEffect"
        ],
        "summary": "Add new load effect to the connection",
        "operationId": "AddLoadEffect",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConLoadEffect"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadEffectData"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/load-effects/{loadEffectId}": {
      "get": {
        "tags": [
          "LoadEffect"
        ],
        "summary": "Get load impulses from loadEffectId",
        "operationId": "GetLoadEffect",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadEffectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isPercentage",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConLoadEffect"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "LoadEffect"
        ],
        "summary": "Update load impulses in loadEffectId",
        "operationId": "UpdateLoadEffect",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadEffectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConLoadEffect"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConLoadEffect"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LoadEffect"
        ],
        "summary": "Delete load effect loadEffectId",
        "operationId": "DeleteLoadEffect",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadEffectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/load-effects/get-load-settings": {
      "get": {
        "tags": [
          "LoadEffect"
        ],
        "summary": "Get Load settings for connection in project",
        "operationId": "GetLoadSettings",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConLoadSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/load-effects/set-load-settings": {
      "post": {
        "tags": [
          "LoadEffect"
        ],
        "summary": "Set Load settings for connection in project",
        "operationId": "SetLoadSettings",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConLoadSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConLoadSettings"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials which are used in the project projectId",
        "operationId": "GetAllMaterials",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials/steel": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials which are used in the project projectId",
        "operationId": "GetSteelMaterials",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Add material to the project",
        "operationId": "AddMaterialSteel",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of a new material to be added to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMprlElement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMprlElement"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials/concrete": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials which are used in the project projectId",
        "operationId": "GetConcreteMaterials",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Add material to the project",
        "operationId": "AddMaterialConcrete",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of a new material to be added to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMprlElement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMprlElement"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials/bolt-grade": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials which are used in the project projectId",
        "operationId": "GetBlotGradeMaterials",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Add material to the project",
        "operationId": "AddMaterialBoltGrade",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of a new material to be added to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMprlElement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMprlElement"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials/welding": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials which are used in the project projectId",
        "operationId": "GetWeldingMaterials",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Add material to the project",
        "operationId": "AddMaterialWeld",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of a new material to be added to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMprlElement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMprlElement"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials/cross-sections": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get cross sections which are used in the project projectId",
        "operationId": "GetCrossSections",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Add cross section to the project",
        "operationId": "AddCrossSection",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of a new cross-section to be added to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMprlCrossSection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMprlCrossSection"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials/bolt-assemblies": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get bolt assemblies which are used in the project projectId",
        "operationId": "GetBoltAssemblies",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Add bolt assembly to the project",
        "operationId": "AddBoltAssembly",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of a new bolt assemby to be added to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMprlElement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMprlElement"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/members": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get information about all members in the connection",
        "operationId": "GetAllMemberData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to get its members",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConMember"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/members/{memberId}": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get information about the requires member in the connection",
        "operationId": "GetMemberData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to get its member",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "Id of the requested member in the connection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMember"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Update the member in the connection by newMemberData",
        "operationId": "UpdateMember",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to to update is member memberId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "Id of the member to be updated in the connection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New member data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMember"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMember"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/members/{memberId}/set-bearing-member": {
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Set bearing member for memberIt",
        "operationId": "SetBearingMember",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMember"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/operations": {
      "get": {
        "tags": [
          "Operation"
        ],
        "summary": "Get the list of operations for the connection",
        "operationId": "GetOperations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the requested connection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConOperation"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Operation"
        ],
        "summary": "Delete all operations for the connection",
        "operationId": "DeleteOperations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to be modified",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/parameters": {
      "get": {
        "tags": [
          "Parameter"
        ],
        "summary": "Get all parameters which are defined for projectId and connectionId",
        "operationId": "GetParameters",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to get its parameters",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeHidden",
            "in": "query",
            "description": "Include also hidden parameters",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdeaParameter"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Parameter"
        ],
        "summary": "Update parameters for the connection connectionId in the project projectId by values passed in parameters",
        "operationId": "UpdateParameters",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to apply template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New values of parameters",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdeaParameterUpdate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParameterData"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/evaluate-expression": {
      "post": {
        "tags": [
          "Parameter"
        ],
        "summary": "Evaluate the expression and return the result",
        "operationId": "EvaluateExpression",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to use for evaluation expression",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Expression to evaluate",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/presentations": {
      "get": {
        "tags": [
          "Presentation"
        ],
        "summary": "Returns data for scene3D",
        "operationId": "GetDataScene3D",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the open project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to be presented to scene3D",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrawData"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/presentations/text": {
      "get": {
        "tags": [
          "Presentation"
        ],
        "summary": "Return serialized data for scene3D in json format",
        "operationId": "GetDataScene3DText",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/open": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Open ideacon project from ideaConFile",
        "operationId": "OpenProject",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ideaConFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "ideaConFile": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConProject"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/close": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Close the project. Needed for releasing resources in the service.",
        "operationId": "CloseProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the project to be closed",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get the list of projects in the service which were opened by the client which was connected by M:IdeaStatiCa.ConnectionRestApi.Controllers.ClientController.ConnectClient",
        "operationId": "GetActiveProjects",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConProject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/download": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Download the actual ideacon project from the service. It includes alle changes which were made by previous API calls.",
        "operationId": "DownloadProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/1/projects/{projectId}": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get data of the project.",
        "operationId": "GetProjectData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the requested project",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConProject"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Updates ConProjectData of project",
        "operationId": "UpdateProjectData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConProjectData"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConProject"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/import-iom-file": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Create the IDEA Connection project from IOM provided in xml format.\r\nThe parameter 'containerXmlFile' passed in HTTP body represents :\r\n<see href=\"https://github.com/idea-statica/ideastatica-public/blob/main/src/IdeaRS.OpenModel/OpenModelContainer.cs\">IdeaRS.OpenModel.OpenModelContainer</see>\r\nwhich is serialized to XML string by  <see href=\"https://github.com/idea-statica/ideastatica-public/blob/main/src/IdeaRS.OpenModel/Tools.cs\">IdeaRS.OpenModel.Tools.OpenModelContainerToXml</see>",
        "operationId": "ImportIOM",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "containerXmlFile": {
                    "type": "string",
                    "format": "binary"
                  },
                  "ConnectionsToCreate": {
                    "type": "array",
                    "items": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              },
              "encoding": {
                "containerXmlFile": {
                  "style": "form"
                },
                "ConnectionsToCreate": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConProject"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/update-iom-file": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Update the IDEA Connection project by <see href=\"https://github.com/idea-statica/ideastatica-public/blob/main/src/IdeaRS.OpenModel/OpenModelContainer.cs\">IdeaRS.OpenModel.OpenModelContainer</see>  (model and results).\r\nIOM is passed in the body of the request as the xml string.\r\n<see href=\"https://github.com/idea-statica/ideastatica-public/blob/main/src/IdeaRS.OpenModel/Tools.cs\">IdeaRS.OpenModel.Tools.OpenModelContainerToXml</see> should be used to generate the valid xml string",
        "operationId": "UpdateFromIOM",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "containerXmlFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "containerXmlFile": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConProject"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connection-setup": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get setup from project",
        "operationId": "GetSetup",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service to get setup",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionSetup"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update setup of the project",
        "operationId": "UpdateSetup",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service to update project setup",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionSetup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionSetup"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/reports/{connectionId}/pdf": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Generates report for projectId and connectionId",
        "operationId": "GeneratePdf",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/1/projects/{projectId}/reports/{connectionId}/word": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Generates report for projectId and connectionId",
        "operationId": "GenerateWord",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/get-template": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Create a template for the connection connectionId in the project projectId",
        "operationId": "CreateConTemplate",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to be converted to a template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/get-default-mapping": {
      "post": {
        "tags": [
          "Template"
        ],
        "summary": "Get the default mappings for the application of the connection template passed in templateToApply\r\non connectionId in the project projectId",
        "description": "The result IdeaStatiCa.Api.Connection.Model.TemplateConversionsDefault mapping to apply the passed template.\r\nIt can be modified by a user and used for the application of a template M:IdeaStatiCa.ConnectionRestApi.Controllers.TemplateController.ApplyConnectionTemplateAsync(System.Guid,System.Int32,IdeaStatiCa.Api.Connection.Model.ConTemplateApplyParam) method.",
        "operationId": "GetDefaultTemplateMapping",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to get default mapping",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Data of the template to get default mapping",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConTemplateMappingGetParam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateConversions"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/apply-template": {
      "post": {
        "tags": [
          "Template"
        ],
        "summary": "Apply the connection template applyTemplateParam on the connection connectionId in the project projectId",
        "operationId": "ApplyTemplate",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection where to apply the template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Template to apply",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConTemplateApplyParam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConTemplateApplyResult"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AnchorGrid": {
        "type": "object",
        "properties": {
          "concreteBlock": {
            "$ref": "#/components/schemas/ConcreteBlock"
          },
          "anchorType": {
            "$ref": "#/components/schemas/AnchorType"
          },
          "washerSize": {
            "type": "number",
            "description": "Washer Size used if AnchorType is washer",
            "format": "double"
          },
          "boltAssemblyRef": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Unique Id of the bolt grid",
            "format": "int32"
          },
          "isAnchor": {
            "type": "boolean",
            "description": "Is Anchor"
          },
          "anchorLen": {
            "type": "number",
            "description": "Anchor lenght",
            "format": "double"
          },
          "holeDiameter": {
            "type": "number",
            "description": "The diameter of the hole",
            "format": "double"
          },
          "diameter": {
            "type": "number",
            "description": "The diameter of bolt",
            "format": "double"
          },
          "headDiameter": {
            "type": "number",
            "description": "The head diameter of bolt",
            "format": "double"
          },
          "diagonalHeadDiameter": {
            "type": "number",
            "description": "The Diagonal Head Diameter of bolt",
            "format": "double"
          },
          "headHeight": {
            "type": "number",
            "description": "The Head Height of bolt",
            "format": "double"
          },
          "boreHole": {
            "type": "number",
            "description": "The BoreHole of bolt",
            "format": "double"
          },
          "tensileStressArea": {
            "type": "number",
            "description": "The Tensile Stress Area of bolt",
            "format": "double"
          },
          "nutThickness": {
            "type": "number",
            "description": "The Nut Thickness of bolt",
            "format": "double"
          },
          "boltAssemblyName": {
            "type": "string",
            "description": "The description of the bolt assembly",
            "nullable": true
          },
          "standard": {
            "type": "string",
            "description": "The standard of the bolt assembly",
            "nullable": true
          },
          "material": {
            "type": "string",
            "description": "The material of the bolt assembly",
            "nullable": true
          },
          "origin": {
            "$ref": "#/components/schemas/Point3D"
          },
          "axisX": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisY": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisZ": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point3D"
            },
            "description": "Positions of holes in the local coodinate system of the bolt grid",
            "nullable": true
          },
          "connectedPlates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Identifiers of the connected plates",
            "nullable": true
          },
          "connectedPartIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Id of the weld",
            "nullable": true
          },
          "shearInThread": {
            "type": "boolean",
            "description": "Indicates, whether a shear plane is in the thread of a bolt."
          },
          "boltInteraction": {
            "$ref": "#/components/schemas/BoltShearType"
          }
        },
        "additionalProperties": false,
        "description": "Data of the anchor grid"
      },
      "AnchorType": {
        "enum": [
          "straight",
          "washerPlateCircular",
          "washerPlateRectangular"
        ],
        "type": "string",
        "description": "Defines a type of anchor end."
      },
      "BaseTemplateConversion": {
        "type": "object",
        "properties": {
          "originalValue": {
            "type": "string",
            "nullable": true
          },
          "originalTemplateId": {
            "type": "string",
            "nullable": true
          },
          "newValue": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "newTemplateId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BeamData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the beam",
            "nullable": true
          },
          "plates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlateData"
            },
            "description": "Plates of the beam",
            "nullable": true
          },
          "crossSectionType": {
            "type": "string",
            "description": "Type of cross section",
            "nullable": true
          },
          "mprlName": {
            "type": "string",
            "description": "MPRL name of beam",
            "nullable": true
          },
          "originalModelId": {
            "type": "string",
            "description": "Get or set the identification in the original model\r\nIn the case of the imported connection from another application",
            "nullable": true
          },
          "cuts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CutData"
            },
            "description": "Cuts on the beam",
            "nullable": true
          },
          "isAdded": {
            "type": "boolean",
            "description": "Is added beam"
          },
          "addedMemberLength": {
            "type": "number",
            "description": "Added beam lenght",
            "format": "double"
          },
          "isNegativeObject": {
            "type": "boolean",
            "description": "Is negative object"
          },
          "addedMember": {
            "$ref": "#/components/schemas/ReferenceElement"
          },
          "mirrorY": {
            "type": "boolean",
            "description": "Mirror by Y"
          },
          "refLineInCenterOfGravity": {
            "type": "boolean",
            "description": "The reference line of the member is in the center of gravity of the cross-section"
          },
          "isBearingMember": {
            "type": "boolean",
            "description": "Is beam bearing member"
          },
          "autoAddCutByWorkplane": {
            "type": "boolean",
            "description": "Automaticali add cut by workplane if it not defined"
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the connected beam"
      },
      "BendData": {
        "type": "object",
        "properties": {
          "plate1Id": {
            "type": "integer",
            "description": "First plate",
            "format": "int32"
          },
          "plate2Id": {
            "type": "integer",
            "description": "Second plate",
            "format": "int32"
          },
          "radius": {
            "type": "number",
            "description": "Radius of bend",
            "format": "double"
          },
          "point1OfSideBoundary1": {
            "$ref": "#/components/schemas/Point3D"
          },
          "point2OfSideBoundary1": {
            "$ref": "#/components/schemas/Point3D"
          },
          "endFaceNormal1": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "point1OfSideBoundary2": {
            "$ref": "#/components/schemas/Point3D"
          },
          "point2OfSideBoundary2": {
            "$ref": "#/components/schemas/Point3D"
          }
        },
        "additionalProperties": false,
        "description": "Provides data of bend"
      },
      "BoltGrid": {
        "type": "object",
        "properties": {
          "boltAssemblyRef": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Unique Id of the bolt grid",
            "format": "int32"
          },
          "isAnchor": {
            "type": "boolean",
            "description": "Is Anchor"
          },
          "anchorLen": {
            "type": "number",
            "description": "Anchor lenght",
            "format": "double"
          },
          "holeDiameter": {
            "type": "number",
            "description": "The diameter of the hole",
            "format": "double"
          },
          "diameter": {
            "type": "number",
            "description": "The diameter of bolt",
            "format": "double"
          },
          "headDiameter": {
            "type": "number",
            "description": "The head diameter of bolt",
            "format": "double"
          },
          "diagonalHeadDiameter": {
            "type": "number",
            "description": "The Diagonal Head Diameter of bolt",
            "format": "double"
          },
          "headHeight": {
            "type": "number",
            "description": "The Head Height of bolt",
            "format": "double"
          },
          "boreHole": {
            "type": "number",
            "description": "The BoreHole of bolt",
            "format": "double"
          },
          "tensileStressArea": {
            "type": "number",
            "description": "The Tensile Stress Area of bolt",
            "format": "double"
          },
          "nutThickness": {
            "type": "number",
            "description": "The Nut Thickness of bolt",
            "format": "double"
          },
          "boltAssemblyName": {
            "type": "string",
            "description": "The description of the bolt assembly",
            "nullable": true
          },
          "standard": {
            "type": "string",
            "description": "The standard of the bolt assembly",
            "nullable": true
          },
          "material": {
            "type": "string",
            "description": "The material of the bolt assembly",
            "nullable": true
          },
          "origin": {
            "$ref": "#/components/schemas/Point3D"
          },
          "axisX": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisY": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisZ": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point3D"
            },
            "description": "Positions of holes in the local coodinate system of the bolt grid",
            "nullable": true
          },
          "connectedPlates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Identifiers of the connected plates",
            "nullable": true
          },
          "connectedPartIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Id of the weld",
            "nullable": true
          },
          "shearInThread": {
            "type": "boolean",
            "description": "Indicates, whether a shear plane is in the thread of a bolt."
          },
          "boltInteraction": {
            "$ref": "#/components/schemas/BoltShearType"
          }
        },
        "additionalProperties": false,
        "description": "Data of the bolt grid"
      },
      "BoltShearType": {
        "enum": [
          "bearing",
          "interaction",
          "friction"
        ],
        "type": "string",
        "description": "Defines a transfer of shear force in bolts."
      },
      "BucklingRes": {
        "type": "object",
        "properties": {
          "loadCaseId": {
            "type": "integer",
            "format": "int32"
          },
          "shape": {
            "type": "integer",
            "description": "Shape lc calculated by solver",
            "format": "int32"
          },
          "factor": {
            "type": "number",
            "description": "Buckling factor",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Results of the buckling analysis"
      },
      "CheckResAnchor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "unityCheck": {
            "type": "number",
            "description": "Unity Check",
            "format": "double"
          },
          "checkStatus": {
            "type": "boolean",
            "description": "Status of the Check"
          }
        },
        "additionalProperties": false,
        "description": "Check value for Anchor"
      },
      "CheckResBolt": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "unityCheck": {
            "type": "number",
            "description": "Unity Check",
            "format": "double"
          },
          "checkStatus": {
            "type": "boolean",
            "description": "Status of the Check"
          }
        },
        "additionalProperties": false,
        "description": "Check value for Bolts"
      },
      "CheckResConcreteBlock": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Concrete Block",
            "nullable": true
          },
          "unityCheck": {
            "type": "number",
            "description": "Unity Check",
            "format": "double"
          },
          "checkStatus": {
            "type": "boolean",
            "description": "Status of the Check"
          },
          "loadCaseId": {
            "type": "integer",
            "description": "Id of Load Case",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Check value for Concrete Block"
      },
      "CheckResPlate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Plate",
            "nullable": true
          },
          "checkStatus": {
            "type": "boolean",
            "description": "Status of the Check"
          },
          "loadCaseId": {
            "type": "integer",
            "description": "Id of Load Case",
            "format": "int32"
          },
          "maxStrain": {
            "type": "number",
            "description": "Max Strain",
            "format": "double"
          },
          "maxStress": {
            "type": "number",
            "description": "Max Stress",
            "format": "double"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "In case of presentation of groups plates (uncoiled beams)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Check value for Plate"
      },
      "CheckResSummary": {
        "type": "object",
        "properties": {
          "checkValue": {
            "type": "number",
            "description": "Check value",
            "format": "double"
          },
          "checkStatus": {
            "type": "boolean",
            "description": "Status of check"
          },
          "loadCaseId": {
            "type": "integer",
            "description": "Id of Load Case",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "unityCheckMessage": {
            "type": "string",
            "description": "Detail message about overall check",
            "nullable": true
          },
          "skipped": {
            "type": "boolean",
            "description": "Whether the check was calculated or not.\r\nIf true, the check was not calculated and IdeaRS.OpenModel.Connection.CheckResSummary.CheckValue should be ignored, otherwise false."
          }
        },
        "additionalProperties": false,
        "description": "Check summary"
      },
      "CheckResWeld": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Weld",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Unique id of weld",
            "format": "int32"
          },
          "unityCheck": {
            "type": "number",
            "description": "Unity Check Stress",
            "format": "double"
          },
          "checkStatus": {
            "type": "boolean",
            "description": "Status of the Check"
          },
          "loadCaseId": {
            "type": "integer",
            "description": "Id of Load Case",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "In case of presentation of groups plates (uncoiled beams)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Check value for Weld"
      },
      "ConAnalysisTypeEnum": {
        "enum": [
          "stress_Strain",
          "stiffness",
          "capacity_Design",
          "fatigues",
          "total_Design",
          "horizontalTying",
          "capacityLoadLevels",
          "fireRestance",
          "buckling"
        ],
        "type": "string"
      },
      "ConCalculationParameter": {
        "type": "object",
        "properties": {
          "connectionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "analysisType": {
            "$ref": "#/components/schemas/ConAnalysisTypeEnum"
          }
        },
        "additionalProperties": false
      },
      "ConConnection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "identifier": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "analysisType": {
            "$ref": "#/components/schemas/ConAnalysisTypeEnum"
          },
          "bearingMemberId": {
            "type": "integer",
            "format": "int32"
          },
          "isCalculated": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ConLoadEffect": {
        "type": "object",
        "properties": {
          "isPercentage": {
            "type": "boolean"
          },
          "memberLoadings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConLoadEffectMemberLoad"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ConLoadEffectMemberLoad": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "integer",
            "format": "int32"
          },
          "position": {
            "$ref": "#/components/schemas/ConLoadEffectPositionEnum"
          },
          "sectionLoad": {
            "$ref": "#/components/schemas/ConLoadEffectSectionLoad"
          }
        },
        "additionalProperties": false
      },
      "ConLoadEffectPositionEnum": {
        "enum": [
          "End",
          "Begin"
        ],
        "type": "string"
      },
      "ConLoadEffectSectionLoad": {
        "type": "object",
        "properties": {
          "n": {
            "type": "number",
            "format": "double"
          },
          "vy": {
            "type": "number",
            "format": "double"
          },
          "vz": {
            "type": "number",
            "format": "double"
          },
          "mx": {
            "type": "number",
            "format": "double"
          },
          "my": {
            "type": "number",
            "format": "double"
          },
          "mz": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ConLoadSettings": {
        "type": "object",
        "properties": {
          "loadsInEquilibrium": {
            "type": "boolean"
          },
          "loadsInPercentage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ConMember": {
        "type": "object",
        "properties": {
          "isContinuous": {
            "type": "boolean"
          },
          "crossSectionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mirrorY": {
            "type": "boolean",
            "nullable": true
          },
          "mirrorZ": {
            "type": "boolean",
            "nullable": true
          },
          "isBearing": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ConMprlCrossSection": {
        "type": "object",
        "properties": {
          "materialName": {
            "type": "string",
            "nullable": true
          },
          "mprlName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConMprlElement": {
        "type": "object",
        "properties": {
          "mprlName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConOperation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "isImported": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ConProductionCost": {
        "type": "object",
        "properties": {
          "totalEstimatedCost": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ConProject": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "format": "uuid"
          },
          "projectInfo": {
            "$ref": "#/components/schemas/ConProjectData"
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConConnection"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConProjectData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "projectNumber": {
            "type": "string",
            "nullable": true
          },
          "author": {
            "type": "string",
            "nullable": true
          },
          "designCode": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ConResultSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "passed": {
            "type": "boolean"
          },
          "resultSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConTemplateApplyParam": {
        "type": "object",
        "properties": {
          "connectionTemplate": {
            "type": "string",
            "nullable": true
          },
          "mapping": {
            "$ref": "#/components/schemas/TemplateConversions"
          }
        },
        "additionalProperties": false
      },
      "ConTemplateApplyResult": {
        "type": "object",
        "additionalProperties": false
      },
      "ConTemplateMappingGetParam": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConcreteBlock": {
        "type": "object",
        "properties": {
          "lenght": {
            "type": "number",
            "description": "Lenght of ConcreteBlock",
            "format": "double"
          },
          "width": {
            "type": "number",
            "description": "Width of ConcreteBlock",
            "format": "double"
          },
          "height": {
            "type": "number",
            "description": "Height of ConcreteBlock",
            "format": "double"
          },
          "material": {
            "type": "string",
            "description": "Material of ConcreteBlock",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data of concrete block"
      },
      "ConcreteBlockData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Plate unique ID",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the concrete block",
            "nullable": true
          },
          "depth": {
            "type": "number",
            "description": "Depth of the concrete block",
            "format": "double"
          },
          "material": {
            "type": "string",
            "description": "Name of the material",
            "nullable": true
          },
          "center": {
            "$ref": "#/components/schemas/Point3D"
          },
          "outlinePoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point2D"
            },
            "description": "Outline points",
            "nullable": true
          },
          "origin": {
            "$ref": "#/components/schemas/Point3D"
          },
          "axisX": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisY": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisZ": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "region": {
            "type": "string",
            "description": "Geometry of the concrete block in svg format",
            "nullable": true
          },
          "originalModelId": {
            "type": "string",
            "description": "Get or set the identification in the original model\r\nIn the case of the imported connection from another application",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the single concrete block"
      },
      "ConcreteSetup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Concrete setup base class"
      },
      "ConeBreakoutCheckType": {
        "enum": [
          "both",
          "tension",
          "shear",
          "none"
        ],
        "type": "string",
        "description": "Types of cone breakout checks"
      },
      "ConnectionCheckRes": {
        "type": "object",
        "properties": {
          "checkResSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResSummary"
            },
            "description": "List of CheckResSummary",
            "nullable": true
          },
          "checkResPlate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResPlate"
            },
            "description": "List of check results for plates",
            "nullable": true
          },
          "checkResWeld": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResWeld"
            },
            "description": "List of check results for welds",
            "nullable": true
          },
          "checkResBolt": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResBolt"
            },
            "description": "List of check results for bolts",
            "nullable": true
          },
          "checkResAnchor": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResAnchor"
            },
            "description": "List of check results for anchors",
            "nullable": true
          },
          "checkResConcreteBlock": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResConcreteBlock"
            },
            "description": "List of check results for concrete blocks",
            "nullable": true
          },
          "bucklingResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BucklingRes"
            },
            "description": "List of results of buckling analysis",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of connection",
            "nullable": true
          },
          "connectionID": {
            "type": "string",
            "description": "Guid of connection",
            "format": "uuid"
          },
          "id": {
            "type": "integer",
            "description": "Integer Id of connection",
            "format": "int32"
          },
          "messages": {
            "$ref": "#/components/schemas/OpenMessages"
          }
        },
        "additionalProperties": false,
        "description": "Results for connection in project"
      },
      "ConnectionData": {
        "type": "object",
        "properties": {
          "conenctionPointId": {
            "type": "integer",
            "description": "Connection Point Id",
            "format": "int32"
          },
          "beams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BeamData"
            },
            "description": "Connected beams",
            "nullable": true
          },
          "plates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlateData"
            },
            "description": "Plates of the connection",
            "nullable": true
          },
          "foldedPlates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FoldedPlateData"
            },
            "description": "Folded plate of the connection",
            "nullable": true
          },
          "boltGrids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoltGrid"
            },
            "description": "Bolt grids which belongs to the connection",
            "nullable": true
          },
          "anchorGrids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnchorGrid"
            },
            "description": "Anchor grids which belongs to the connection",
            "nullable": true
          },
          "welds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeldData"
            },
            "description": "Welds of the connection",
            "nullable": true
          },
          "concreteBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConcreteBlockData"
            },
            "description": "ConcreteBlocksof the connection",
            "nullable": true
          },
          "cutBeamByBeams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CutBeamByBeamData"
            },
            "description": "cut beam by beams",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the connection"
      },
      "ConnectionSetup": {
        "type": "object",
        "properties": {
          "steelSetup": {
            "$ref": "#/components/schemas/SteelSetup"
          },
          "concreteSetup": {
            "$ref": "#/components/schemas/ConcreteSetup"
          },
          "stopAtLimitStrain": {
            "type": "boolean",
            "description": "Stop analysis when the limit strain is reached."
          },
          "weldEvaluationData": {
            "$ref": "#/components/schemas/WeldEvaluation"
          },
          "checkDetailing": {
            "type": "boolean",
            "description": "Perform check of bolt positions"
          },
          "applyConeBreakoutCheck": {
            "$ref": "#/components/schemas/ConeBreakoutCheckType"
          },
          "pretensionForceFpc": {
            "type": "number",
            "description": "Pretension force fpc = k * fub * As",
            "format": "double"
          },
          "gammaInst": {
            "type": "number",
            "description": "Partial safety factor of instalation safety",
            "format": "double"
          },
          "gammaC": {
            "type": "number",
            "description": "Partial safety factor of concrete",
            "format": "double"
          },
          "gammaM3": {
            "type": "number",
            "description": "Preloaded bolts safety factor",
            "format": "double"
          },
          "anchorLengthForStiffness": {
            "type": "integer",
            "description": "Length of anchor to define the anchor stiffness in analysis model, as a multiple of anchor diameter (E A /n * [d])",
            "format": "int32"
          },
          "jointBetaFactor": {
            "type": "number",
            "description": "Joint coefficient βj - Used for Fjd calculation",
            "format": "double"
          },
          "effectiveAreaStressCoeff": {
            "type": "number",
            "description": "Effective area is taken from intersection of stress area and area of joined items according to EN1993-1-8 art. 6.2.5",
            "format": "double"
          },
          "effectiveAreaStressCoeffAISC": {
            "type": "number",
            "description": "Effective area stress coefficient - Concrete loaded area: Stress cut-off is set for AISC",
            "format": "double"
          },
          "frictionCoefficient": {
            "type": "number",
            "description": "Coefficient of friction between base plate and concrete block",
            "format": "double"
          },
          "limitPlasticStrain": {
            "type": "number",
            "description": "Limit of plastic strain used in 2D plate element check",
            "format": "double"
          },
          "limitDeformation": {
            "type": "number",
            "description": "Limit deformation on closed sections",
            "format": "double"
          },
          "limitDeformationCheck": {
            "type": "boolean",
            "description": "Limit deformation on closed sections check or not"
          },
          "analysisGNL": {
            "type": "boolean",
            "description": "Analysis with GNL"
          },
          "analysisAllGNL": {
            "type": "boolean",
            "description": "Analysis with All GNL"
          },
          "warnPlasticStrain": {
            "type": "number",
            "description": "Warning plastic strain",
            "format": "double"
          },
          "warnCheckLevel": {
            "type": "number",
            "description": "Warning check level",
            "format": "double"
          },
          "optimalCheckLevel": {
            "type": "number",
            "description": "Optimal check level",
            "format": "double"
          },
          "distanceBetweenBolts": {
            "type": "number",
            "description": "Limit distance between bolts as a multiple of bolt diameter",
            "format": "double"
          },
          "distanceDiameterBetweenBP": {
            "type": "number",
            "description": "Anchor pitch",
            "format": "double"
          },
          "distanceBetweenBoltsEdge": {
            "type": "number",
            "description": "Limit distance between bolt and plate edge as a multiple of bolt diameter",
            "format": "double"
          },
          "bearingAngle": {
            "type": "number",
            "description": "Load distribution angle of concrete block in calculation of factor Kj",
            "format": "double"
          },
          "decreasingFtrd": {
            "type": "number",
            "description": "Decreasing Ftrd of anchors. Worse quality influence",
            "format": "double"
          },
          "bracedSystem": {
            "type": "boolean",
            "description": "Consider the frame system as braced for stiffness calculation. Braced system reduces horizontal displacements."
          },
          "bearingCheck": {
            "type": "boolean",
            "description": "Apply bearing check including αb"
          },
          "applyBetapInfluence": {
            "type": "boolean",
            "description": "Apply βp influence in bolt shear resistance. ΕΝ 1993-1-8 chapter 3.6.1 (12)"
          },
          "memberLengthRatio": {
            "type": "number",
            "description": "A multiple of cross-section height to determine the default length of member",
            "format": "double"
          },
          "divisionOfSurfaceOfCHS": {
            "type": "integer",
            "description": "Number of straight lines to substitute circle of circular tube in analysis model",
            "format": "int32"
          },
          "divisionOfArcsOfRHS": {
            "type": "integer",
            "description": "Number of straight lines to substitute corner arc of rectangular tubes in analysis model",
            "format": "int32"
          },
          "numElement": {
            "type": "integer",
            "description": "Ratio of length of decisive plate edge and Elements on edge count determines the average size of mesh element",
            "format": "int32"
          },
          "numberIterations": {
            "type": "integer",
            "description": "More iterations helps to find better solutions in contact elements but increases calculation time",
            "format": "int32"
          },
          "mdiv": {
            "type": "integer",
            "description": "Number of iteration steps to evaluate analysis divergence",
            "format": "int32"
          },
          "minSize": {
            "type": "number",
            "description": "Minimal size of generated finite mesh element",
            "format": "double"
          },
          "maxSize": {
            "type": "number",
            "description": "Maximal size of generated finite mesh element",
            "format": "double"
          },
          "numElementRhs": {
            "type": "integer",
            "description": "Number of mesh elements in RHS height",
            "format": "int32"
          },
          "numElementPlate": {
            "type": "integer",
            "description": "Number of mesh elements on plates",
            "format": "int32"
          },
          "rigidBP": {
            "type": "boolean",
            "description": "True if rigid base plate is considered"
          },
          "alphaCC": {
            "type": "number",
            "description": "Long-term effect on fcd",
            "format": "double"
          },
          "crackedConcrete": {
            "type": "boolean",
            "description": "True if cracked concrete is considered"
          },
          "developedFillers": {
            "type": "boolean",
            "description": "True if developed fillers is considered"
          },
          "deformationBoltHole": {
            "type": "boolean",
            "description": "True if bolt hole deformation is considered"
          },
          "extensionLengthRationOpenSections": {
            "type": "number",
            "description": "ExtensionLengthRationOpenSections",
            "format": "double"
          },
          "extensionLengthRationCloseSections": {
            "type": "number",
            "description": "ExtensionLengthRationCloseSections",
            "format": "double"
          },
          "factorPreloadBolt": {
            "type": "number",
            "description": "FactorPreloadBolt",
            "format": "double"
          },
          "baseMetalCapacity": {
            "type": "boolean",
            "description": "BaseMetalCapacity"
          },
          "applyBearingCheck": {
            "type": "boolean",
            "description": "ApplyBearingCheck"
          },
          "frictionCoefficientPbolt": {
            "type": "number",
            "description": "Friction factor of slip-resistant joint",
            "format": "double"
          },
          "crtCompCheckIS": {
            "$ref": "#/components/schemas/CrtCompCheckIS"
          },
          "boltMaxGripLengthCoeff": {
            "type": "number",
            "description": "Max value of bolt grip",
            "format": "double"
          },
          "fatigueSectionOffset": {
            "type": "number",
            "description": "Fatigue section Offset = FatigueSectionOffset x Legsize",
            "format": "double"
          },
          "condensedElementLengthFactor": {
            "type": "number",
            "description": "Condensed element length factor (CEF). Condensed beam legth = maxCssSize * CEF",
            "format": "double"
          },
          "gammaMu": {
            "type": "number",
            "description": "Partial safety factor for Horizontal tying",
            "format": "double"
          },
          "hssLimitPlasticStrain": {
            "type": "number",
            "description": "Limit plastic strain for high strength steel",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "ConnectionSetup"
      },
      "CrtCompCheckIS": {
        "enum": [
          "iS800_Cl_7_4",
          "iS456_Cl_34_4"
        ],
        "type": "string",
        "description": "CRT IS check"
      },
      "CutBeamByBeamData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the cut",
            "nullable": true
          },
          "modifiedObject": {
            "$ref": "#/components/schemas/ReferenceElement"
          },
          "cuttingObject": {
            "$ref": "#/components/schemas/ReferenceElement"
          },
          "isWeld": {
            "type": "boolean",
            "description": "is cut welded"
          },
          "weldThickness": {
            "type": "number",
            "description": "Thickness of the weld - value 0 = recommended size",
            "format": "double"
          },
          "weldType": {
            "$ref": "#/components/schemas/WeldType"
          },
          "offset": {
            "type": "number",
            "description": "Offset",
            "format": "double"
          },
          "method": {
            "$ref": "#/components/schemas/CutMethod"
          },
          "orientation": {
            "$ref": "#/components/schemas/CutOrientation"
          },
          "planeOnCuttingObject": {
            "$ref": "#/components/schemas/DistanceComparison"
          },
          "cutPart": {
            "$ref": "#/components/schemas/CutPart"
          },
          "extendBeforeCut": {
            "type": "boolean",
            "description": "Extend before cut - for cuts where user can decide if modified beam will be extended or not"
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the cut objec by object"
      },
      "CutData": {
        "type": "object",
        "properties": {
          "planePoint": {
            "$ref": "#/components/schemas/Point3D"
          },
          "normalVector": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "direction": {
            "$ref": "#/components/schemas/CutOrientation"
          },
          "offset": {
            "type": "number",
            "description": "Offset - shift of cut",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the cut beam"
      },
      "CutMethod": {
        "enum": [
          "boundingBox",
          "surface",
          "mitre",
          "surfaceAll"
        ],
        "type": "string",
        "description": "Cut method"
      },
      "CutOrientation": {
        "enum": [
          "default",
          "parallel",
          "perpendicular"
        ],
        "type": "string",
        "description": "Represents the type of the cut"
      },
      "CutPart": {
        "enum": [
          "begin",
          "end"
        ],
        "type": "string"
      },
      "DistanceComparison": {
        "enum": [
          "closer",
          "farther",
          "same"
        ],
        "type": "string",
        "description": "Represents the result of comparison of distances of two object from the same point"
      },
      "DrawData": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGroup"
            },
            "nullable": true
          },
          "vertices": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "normals": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FoldedPlateData": {
        "type": "object",
        "properties": {
          "plates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlateData"
            },
            "description": "List of plates belong to folded plate",
            "nullable": true
          },
          "bends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BendData"
            },
            "description": "List of bends connected plates of foldedplate",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the folded plate"
      },
      "IGroup": {
        "type": "object",
        "properties": {
          "faces": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "selected": {
            "$ref": "#/components/schemas/Selected"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Line"
            },
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Text"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdeaParameter": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "expression": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          },
          "unit": {
            "type": "string",
            "nullable": true
          },
          "parameterType": {
            "type": "string",
            "nullable": true
          },
          "validationExpression": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "validationStatus": {
            "type": "string",
            "nullable": true
          },
          "isVisible": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdeaParameterUpdate": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "expression": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Line": {
        "type": "object",
        "properties": {
          "color": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "pairs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "thickness": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "LoadEffectData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "internalForces": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "purpose": {
            "$ref": "#/components/schemas/ePurpose"
          }
        },
        "additionalProperties": false
      },
      "MessageNumber": {
        "enum": [
          "unspecified",
          "information",
          "warning",
          "warnNoPropertyInData",
          "warnValueOutOfRange",
          "warnCurveCount",
          "warnReinforcementBarsCollision",
          "error",
          "errNoOpenObject",
          "errDataObjectNotCreated",
          "errNoObjectInOpenModel",
          "errNoReferenceObjectInOpenModel",
          "errNoEquivalentObjectInDataModel",
          "errNoCrossSectionParameter",
          "errBoltsTooClose",
          "errBoltsTooCloseEdge",
          "errContactsAngle",
          "errIncorrentMaterialE",
          "errIncorrectMaterialEGP",
          "errPreloadedBoltGrade",
          "errValueOutOfRange",
          "errCurveZeroPoint",
          "errCurveFunction",
          "errCurveDecreaseFunction",
          "errCurveDerivation",
          "errCurveNotSet",
          "errValidPolyline",
          "errWarningLoad",
          "errTimeout",
          "errNoInLibrary",
          "errBadWeldMaterialProperty",
          "errOperation",
          "reserved"
        ],
        "type": "string",
        "description": "Message numbers"
      },
      "OpenElementId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Open element base class\r\nPOS - class can not be abstract -it causes problems with serialization"
      },
      "OpenMessage": {
        "type": "object",
        "properties": {
          "number": {
            "$ref": "#/components/schemas/MessageNumber"
          },
          "description": {
            "type": "string",
            "description": "Description of message",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Open message base class"
      },
      "OpenMessages": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenMessage"
            },
            "description": "List of messages",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Open messages collection"
      },
      "ParameterData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "identifier": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "parameterType": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          },
          "defaultValue": {
            "nullable": true
          },
          "evaluatedValue": {
            "nullable": true
          },
          "evaluatedDefaultValue": {
            "nullable": true
          },
          "validationValue": {
            "type": "string",
            "nullable": true
          },
          "evaluatedValidationValue": {
            "type": "string",
            "nullable": true
          },
          "validationType": {
            "$ref": "#/components/schemas/ValidationType"
          },
          "userUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "isVisibleForSimpleConnection": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PlateData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the plate",
            "nullable": true
          },
          "thickness": {
            "type": "number",
            "description": "Thickness of the plate",
            "format": "double"
          },
          "material": {
            "type": "string",
            "description": "Name of the material",
            "nullable": true
          },
          "outlinePoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point2D"
            },
            "description": "Outline points",
            "nullable": true
          },
          "origin": {
            "$ref": "#/components/schemas/Point3D"
          },
          "axisX": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisY": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisZ": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "region": {
            "type": "string",
            "description": "Geometry of the plate in svg format. In next version will be mark as OBSOLETE! New use property Geometry",
            "nullable": true
          },
          "geometry": {
            "$ref": "#/components/schemas/Region2D"
          },
          "originalModelId": {
            "type": "string",
            "description": "Get or set the identification in the original model\r\nIn the case of the imported connection from another application",
            "nullable": true
          },
          "isNegativeObject": {
            "type": "boolean",
            "description": "Is negative object"
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the single plate"
      },
      "Point2D": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "description": "Gets or sets the X-coordinate value",
            "format": "double"
          },
          "y": {
            "type": "number",
            "description": "Gets or sets the Y-coordinate value",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents an x- and y-coordinate pair in two-dimensional space."
      },
      "Point3D": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "description": "Gets or sets the X-coordinate value",
            "format": "double"
          },
          "y": {
            "type": "number",
            "description": "Gets or sets the Y-coordinate value",
            "format": "double"
          },
          "z": {
            "type": "number",
            "description": "Gets or sets the Z-coordinate value",
            "format": "double"
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents an x- , y- an z-coordinates in three-dimensional space."
      },
      "PolyLine2D": {
        "type": "object",
        "properties": {
          "startPoint": {
            "$ref": "#/components/schemas/Point2D"
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Segment2D"
            },
            "description": "Gets segments of `PolyLine2D`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a polyline in two-dimensional space."
      },
      "ReferenceElement": {
        "type": "object",
        "properties": {
          "typeName": {
            "type": "string",
            "description": "Element type name",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          },
          "element": {
            "$ref": "#/components/schemas/OpenElementId"
          }
        },
        "additionalProperties": false,
        "description": "Reference element class"
      },
      "Region2D": {
        "type": "object",
        "properties": {
          "outline": {
            "$ref": "#/components/schemas/PolyLine2D"
          },
          "openings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolyLine2D"
            },
            "description": "Gets or sets the list of openings in the Region2D.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a region in two-dimensional space included outline (border) and openings."
      },
      "Segment2D": {
        "type": "object",
        "properties": {
          "endPoint": {
            "$ref": "#/components/schemas/Point2D"
          }
        },
        "additionalProperties": false,
        "description": "Represents a segment in two-dimensional space."
      },
      "Selected": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/SelectedType"
          }
        },
        "additionalProperties": false
      },
      "SelectedType": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SteelSetup": {
        "type": "object",
        "additionalProperties": false,
        "description": "ISteelSetup"
      },
      "TemplateConversions": {
        "type": "object",
        "properties": {
          "conversions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTemplateConversion"
            },
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Text": {
        "type": "object",
        "properties": {
          "color": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/TextPosition"
          },
          "fontSize": {
            "type": "number",
            "format": "double"
          },
          "tag": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "TextPosition": {
        "type": "object",
        "properties": {
          "origin": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "angles": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ValidationType": {
        "enum": [
          "warning",
          "restricted"
        ],
        "type": "string"
      },
      "Vector3D": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "description": "Gets or sets the X-dirrection value",
            "format": "double"
          },
          "y": {
            "type": "number",
            "description": "Gets or sets the Y-dirrection value",
            "format": "double"
          },
          "z": {
            "type": "number",
            "description": "Gets or sets the Z-dirrection value",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents a vector in three-dimensional space."
      },
      "WeldData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the weld",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the weld",
            "nullable": true
          },
          "thickness": {
            "type": "number",
            "description": "Thickness of the weld",
            "format": "double"
          },
          "material": {
            "type": "string",
            "description": "Name of the material",
            "nullable": true
          },
          "weldMaterial": {
            "$ref": "#/components/schemas/ReferenceElement"
          },
          "weldType": {
            "$ref": "#/components/schemas/WeldType"
          },
          "connectedPartIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Id of the weld",
            "nullable": true
          },
          "start": {
            "$ref": "#/components/schemas/Point3D"
          },
          "end": {
            "$ref": "#/components/schemas/Point3D"
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the single weld"
      },
      "WeldEvaluation": {
        "enum": [
          "maxForceElement",
          "forceResultant",
          "applyPlasticWelds"
        ],
        "type": "string",
        "description": "WeldEvaluation"
      },
      "WeldType": {
        "enum": [
          "notSpecified",
          "fillet",
          "doubleFillet",
          "bevel",
          "pjp",
          "pjpRear",
          "lengthAtHaunch",
          "filletRear",
          "contact",
          "intermittent"
        ],
        "type": "string",
        "description": "enum of weld types"
      },
      "ePurpose": {
        "enum": [
          "common",
          "maxCapacityCalculation",
          "maxCapacityCalculationNegative",
          "horizontalTyingCalculation"
        ],
        "type": "string"
      }
    }
  }
}