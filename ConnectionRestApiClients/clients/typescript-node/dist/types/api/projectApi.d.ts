/**
 * Connection Rest API 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { ConProject } from '../model/conProject';
import { ConProjectData } from '../model/conProjectData';
import { ConnectionSetup } from '../model/connectionSetup';
import { MemoryStream } from '../model/memoryStream';
import { OpenModelContainer } from '../model/openModelContainer';
import { Authentication, Interceptor } from '../model/models';
import { RequestFile } from './apis';
export declare enum ProjectApiApiKeys {
}
export declare class ProjectApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ProjectApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     *
     * @summary Close the project. Needed for releasing resources in the service.
     * @param projectId The unique identifier of the project to be closed
     */
    closeProject(projectId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     *
     * @summary Connect a client to the ConnectionRestApi service. Method returns a unique identifier of the client.
     */
    connectClient(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: string;
    }>;
    /**
     *
     * @summary Download the actual ideacon project from the service. It includes alle changes which were made by previous API calls.
     * @param projectId The unique identifier of the opened project in the ConnectionRestApi service
     */
    downloadProject(projectId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: MemoryStream;
    }>;
    /**
     *
     * @summary Get the list of projects in the service which were opened by the client which was connected by M:IdeaStatiCa.ConnectionRestApi.Controllers.ProjectController.ConnectClient
     */
    getActiveProjects(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<ConProject>;
    }>;
    /**
     *
     * @summary Get data of the project.
     * @param projectId The unique identifier of the requested project
     */
    getProjectData(projectId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConProjectData;
    }>;
    /**
     *
     * @summary Get setup from project
     * @param projectId The unique identifier of the opened project in the ConnectionRestApi service to get setup
     */
    getSetup(projectId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConnectionSetup;
    }>;
    /**
     *
     * @summary Creates an IDEA Connection project. IOM is passed in the body of the request.
     * @param connectionsToCreate
     */
    importIOM(connectionsToCreate?: Array<number>, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConProject;
    }>;
    /**
     *
     * @summary Creates an IDEA Connection project from model (model and results)
     * @param connectionsToCreate
     * @param openModelContainer
     */
    importIOMContainer(connectionsToCreate?: Array<number>, openModelContainer?: OpenModelContainer, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConProject;
    }>;
    /**
     *
     * @summary Open ideacon project which is passed in the body of the request  TODO - should be the parameter of the method
     */
    openProject(options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConProject;
    }>;
    /**
     *
     * @summary Update an IDEA Connection project based on OpenModelContainer (model and results). IOM is passed in the body of the request.
     * @param projectId The unique identifier of the opened project in the ConnectionRestApi service to be updated
     */
    updateFromIOM(projectId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: boolean;
    }>;
    /**
     *
     * @summary Update an IDEA Connection project by model (model and results)
     * @param projectId The unique identifier of the opened project in the ConnectionRestApi service to be updated
     * @param openModelContainer
     */
    updateFromIOMContainer(projectId: string, openModelContainer?: OpenModelContainer, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: boolean;
    }>;
    /**
     *
     * @summary Update setup of the project
     * @param projectId The unique identifier of the opened project in the ConnectionRestApi service to update project setup
     * @param connectionSetup
     */
    updateSetup(projectId: string, connectionSetup?: ConnectionSetup, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConnectionSetup;
    }>;
    /**
     *
     * @summary Open ideacon project from ideaConFile
     * @param ideaConFile
     */
    uploadIdeaCon(ideaConFile?: RequestFile, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConProject;
    }>;
}
