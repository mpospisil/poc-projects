/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// Provides data of the cut beam
    /// </summary>
    [DataContract(Name = "Connection_CutData-IdeaRS_OpenModel")]
    public partial class ConnectionCutDataIdeaRSOpenModel : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public ConnectionCutOrientationIdeaRSOpenModel? Direction { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionCutDataIdeaRSOpenModel" /> class.
        /// </summary>
        /// <param name="planePoint">planePoint.</param>
        /// <param name="normalVector">normalVector.</param>
        /// <param name="direction">direction.</param>
        /// <param name="offset">Offset - shift of cut.</param>
        public ConnectionCutDataIdeaRSOpenModel(Geometry3DPoint3DIdeaRSOpenModel planePoint = default(Geometry3DPoint3DIdeaRSOpenModel), Geometry3DVector3DIdeaRSOpenModel normalVector = default(Geometry3DVector3DIdeaRSOpenModel), ConnectionCutOrientationIdeaRSOpenModel? direction = default(ConnectionCutOrientationIdeaRSOpenModel?), double offset = default(double))
        {
            this.PlanePoint = planePoint;
            this.NormalVector = normalVector;
            this.Direction = direction;
            this.Offset = offset;
        }

        /// <summary>
        /// Gets or Sets PlanePoint
        /// </summary>
        [DataMember(Name = "planePoint", EmitDefaultValue = false)]
        public Geometry3DPoint3DIdeaRSOpenModel PlanePoint { get; set; }

        /// <summary>
        /// Gets or Sets NormalVector
        /// </summary>
        [DataMember(Name = "normalVector", EmitDefaultValue = false)]
        public Geometry3DVector3DIdeaRSOpenModel NormalVector { get; set; }

        /// <summary>
        /// Offset - shift of cut
        /// </summary>
        /// <value>Offset - shift of cut</value>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public double Offset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectionCutDataIdeaRSOpenModel {\n");
            sb.Append("  PlanePoint: ").Append(PlanePoint).Append("\n");
            sb.Append("  NormalVector: ").Append(NormalVector).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
