/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// CIGeometry2DIPolyLine2DCIBasicTypes
    /// </summary>
    [DataContract(Name = "CI_Geometry2D_IPolyLine2D-CI_BasicTypes")]
    public partial class CIGeometry2DIPolyLine2DCIBasicTypes : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CIGeometry2DIPolyLine2DCIBasicTypes" /> class.
        /// </summary>
        /// <param name="startPoint">startPoint.</param>
        /// <param name="id">id.</param>
        public CIGeometry2DIPolyLine2DCIBasicTypes(CIGeometry2DIdaComPoint2DCIBasicTypes startPoint = default(CIGeometry2DIdaComPoint2DCIBasicTypes), int id = default(int))
        {
            this.StartPoint = startPoint;
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets StartPoint
        /// </summary>
        [DataMember(Name = "startPoint", EmitDefaultValue = false)]
        public CIGeometry2DIdaComPoint2DCIBasicTypes StartPoint { get; set; }

        /// <summary>
        /// Gets or Sets IsClosed
        /// </summary>
        [DataMember(Name = "isClosed", EmitDefaultValue = true)]
        public bool IsClosed { get; private set; }

        /// <summary>
        /// Returns false as IsClosed should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsClosed()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Segments
        /// </summary>
        [DataMember(Name = "segments", EmitDefaultValue = true)]
        public List<CIGeometry2DISegment2DCIBasicTypes> Segments { get; private set; }

        /// <summary>
        /// Returns false as Segments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSegments()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public double Length { get; private set; }

        /// <summary>
        /// Returns false as Length should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLength()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Bounds
        /// </summary>
        [DataMember(Name = "bounds", EmitDefaultValue = false)]
        public string Bounds { get; private set; }

        /// <summary>
        /// Returns false as Bounds should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBounds()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CIGeometry2DIPolyLine2DCIBasicTypes {\n");
            sb.Append("  StartPoint: ").Append(StartPoint).Append("\n");
            sb.Append("  IsClosed: ").Append(IsClosed).Append("\n");
            sb.Append("  Segments: ").Append(Segments).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Bounds: ").Append(Bounds).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
