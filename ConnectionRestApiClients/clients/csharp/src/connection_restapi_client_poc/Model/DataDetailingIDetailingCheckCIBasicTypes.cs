/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// DataDetailingIDetailingCheckCIBasicTypes
    /// </summary>
    [DataContract(Name = "Data_Detailing_IDetailingCheck-CI_BasicTypes")]
    public partial class DataDetailingIDetailingCheckCIBasicTypes : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets DetailingCheckCategory
        /// </summary>
        [DataMember(Name = "detailingCheckCategory", EmitDefaultValue = false)]
        public DataDetailingCheckCategoryCIBasicTypes? DetailingCheckCategory { get; set; }

        /// <summary>
        /// Gets or Sets DetailingCheckType
        /// </summary>
        [DataMember(Name = "detailingCheckType", EmitDefaultValue = false)]
        public DataDetailingCheckTypeCIBasicTypes? DetailingCheckType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DataDetailingIDetailingCheckCIBasicTypes" /> class.
        /// </summary>
        /// <param name="constraintValue">constraintValue.</param>
        /// <param name="detailingCheckCategory">detailingCheckCategory.</param>
        /// <param name="detailingCheckType">detailingCheckType.</param>
        /// <param name="messageParams">messageParams.</param>
        /// <param name="targetElementId">targetElementId.</param>
        /// <param name="targetElementName">targetElementName.</param>
        public DataDetailingIDetailingCheckCIBasicTypes(double constraintValue = default(double), DataDetailingCheckCategoryCIBasicTypes? detailingCheckCategory = default(DataDetailingCheckCategoryCIBasicTypes?), DataDetailingCheckTypeCIBasicTypes? detailingCheckType = default(DataDetailingCheckTypeCIBasicTypes?), List<double> messageParams = default(List<double>), int targetElementId = default(int), string targetElementName = default(string))
        {
            this.ConstraintValue = constraintValue;
            this.DetailingCheckCategory = detailingCheckCategory;
            this.DetailingCheckType = detailingCheckType;
            this.MessageParams = messageParams;
            this.TargetElementId = targetElementId;
            this.TargetElementName = targetElementName;
        }

        /// <summary>
        /// Gets or Sets ConstraintValue
        /// </summary>
        [DataMember(Name = "constraintValue", EmitDefaultValue = false)]
        public double ConstraintValue { get; set; }

        /// <summary>
        /// Gets or Sets MessageParams
        /// </summary>
        [DataMember(Name = "messageParams", EmitDefaultValue = true)]
        public List<double> MessageParams { get; set; }

        /// <summary>
        /// Gets or Sets TargetElementId
        /// </summary>
        [DataMember(Name = "targetElementId", EmitDefaultValue = false)]
        public int TargetElementId { get; set; }

        /// <summary>
        /// Gets or Sets TargetElementName
        /// </summary>
        [DataMember(Name = "targetElementName", EmitDefaultValue = true)]
        public string TargetElementName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DataDetailingIDetailingCheckCIBasicTypes {\n");
            sb.Append("  ConstraintValue: ").Append(ConstraintValue).Append("\n");
            sb.Append("  DetailingCheckCategory: ").Append(DetailingCheckCategory).Append("\n");
            sb.Append("  DetailingCheckType: ").Append(DetailingCheckType).Append("\n");
            sb.Append("  MessageParams: ").Append(MessageParams).Append("\n");
            sb.Append("  TargetElementId: ").Append(TargetElementId).Append("\n");
            sb.Append("  TargetElementName: ").Append(TargetElementName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
