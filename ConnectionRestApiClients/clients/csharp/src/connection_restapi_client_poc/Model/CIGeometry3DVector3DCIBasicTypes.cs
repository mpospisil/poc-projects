/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// CIGeometry3DVector3DCIBasicTypes
    /// </summary>
    [DataContract(Name = "CI_Geometry3D_Vector3D-CI_BasicTypes")]
    public partial class CIGeometry3DVector3DCIBasicTypes : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CIGeometry3DVector3DCIBasicTypes" /> class.
        /// </summary>
        /// <param name="directionX">directionX.</param>
        /// <param name="directionY">directionY.</param>
        /// <param name="directionZ">directionZ.</param>
        /// <param name="normalize">normalize.</param>
        public CIGeometry3DVector3DCIBasicTypes(double directionX = default(double), double directionY = default(double), double directionZ = default(double), CIGeometry3DVector3DCIBasicTypes normalize = default(CIGeometry3DVector3DCIBasicTypes))
        {
            this.DirectionX = directionX;
            this.DirectionY = directionY;
            this.DirectionZ = directionZ;
            this.Normalize = normalize;
        }

        /// <summary>
        /// Gets or Sets DirectionX
        /// </summary>
        [DataMember(Name = "directionX", EmitDefaultValue = false)]
        public double DirectionX { get; set; }

        /// <summary>
        /// Gets or Sets DirectionY
        /// </summary>
        [DataMember(Name = "directionY", EmitDefaultValue = false)]
        public double DirectionY { get; set; }

        /// <summary>
        /// Gets or Sets DirectionZ
        /// </summary>
        [DataMember(Name = "directionZ", EmitDefaultValue = false)]
        public double DirectionZ { get; set; }

        /// <summary>
        /// Gets or Sets Normalize
        /// </summary>
        [DataMember(Name = "normalize", EmitDefaultValue = false)]
        public CIGeometry3DVector3DCIBasicTypes Normalize { get; set; }

        /// <summary>
        /// Gets or Sets Magnitude
        /// </summary>
        [DataMember(Name = "magnitude", EmitDefaultValue = false)]
        public double Magnitude { get; private set; }

        /// <summary>
        /// Returns false as Magnitude should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMagnitude()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets MagnitudeSquared
        /// </summary>
        [DataMember(Name = "magnitudeSquared", EmitDefaultValue = false)]
        public double MagnitudeSquared { get; private set; }

        /// <summary>
        /// Returns false as MagnitudeSquared should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMagnitudeSquared()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CIGeometry3DVector3DCIBasicTypes {\n");
            sb.Append("  DirectionX: ").Append(DirectionX).Append("\n");
            sb.Append("  DirectionY: ").Append(DirectionY).Append("\n");
            sb.Append("  DirectionZ: ").Append(DirectionZ).Append("\n");
            sb.Append("  Normalize: ").Append(Normalize).Append("\n");
            sb.Append("  Magnitude: ").Append(Magnitude).Append("\n");
            sb.Append("  MagnitudeSquared: ").Append(MagnitudeSquared).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
