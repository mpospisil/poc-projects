/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using connection_restapi_client_poc.Client;
using connection_restapi_client_poc.Model;

namespace connection_restapi_client_poc.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Close the project. Needed for releasing resources in the service.
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the project to be closed</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string CloseProject(string projectId, int operationIndex = 0);

        /// <summary>
        /// Close the project. Needed for releasing resources in the service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the project to be closed</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CloseProjectWithHttpInfo(string projectId, int operationIndex = 0);
        /// <summary>
        /// Download the actual ideacon project from the service. It includes alle changes which were made by previous API calls.
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemoryStream</returns>
        MemoryStream DownloadProject(Guid projectId, int operationIndex = 0);

        /// <summary>
        /// Download the actual ideacon project from the service. It includes alle changes which were made by previous API calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemoryStream</returns>
        ApiResponse<MemoryStream> DownloadProjectWithHttpInfo(Guid projectId, int operationIndex = 0);
        /// <summary>
        /// Get the list of projects in the service which were opened by the client which was connected by M:IdeaStatiCa.ConnectionRestApi.Controllers.ClientController.ConnectClient
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConProject&gt;</returns>
        List<ConProject> GetActiveProjects(int operationIndex = 0);

        /// <summary>
        /// Get the list of projects in the service which were opened by the client which was connected by M:IdeaStatiCa.ConnectionRestApi.Controllers.ClientController.ConnectClient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConProject&gt;</returns>
        ApiResponse<List<ConProject>> GetActiveProjectsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get data of the project.
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the requested project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConProject</returns>
        ConProject GetProjectData(Guid projectId, int operationIndex = 0);

        /// <summary>
        /// Get data of the project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the requested project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConProject</returns>
        ApiResponse<ConProject> GetProjectDataWithHttpInfo(Guid projectId, int operationIndex = 0);
        /// <summary>
        /// Get setup from project
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to get setup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectionSetup</returns>
        ConnectionSetup GetSetup(Guid projectId, int operationIndex = 0);

        /// <summary>
        /// Get setup from project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to get setup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectionSetup</returns>
        ApiResponse<ConnectionSetup> GetSetupWithHttpInfo(Guid projectId, int operationIndex = 0);
        /// <summary>
        /// Creates an IDEA Connection project. IOM is passed in the body of the request.
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConProject</returns>
        ConProject ImportIOM(List<int>? connectionsToCreate = default(List<int>?), int operationIndex = 0);

        /// <summary>
        /// Creates an IDEA Connection project. IOM is passed in the body of the request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConProject</returns>
        ApiResponse<ConProject> ImportIOMWithHttpInfo(List<int>? connectionsToCreate = default(List<int>?), int operationIndex = 0);
        /// <summary>
        /// Creates an IDEA Connection project from model (model and results)
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConProject</returns>
        ConProject ImportIOMContainer(List<int>? connectionsToCreate = default(List<int>?), OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0);

        /// <summary>
        /// Creates an IDEA Connection project from model (model and results)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConProject</returns>
        ApiResponse<ConProject> ImportIOMContainerWithHttpInfo(List<int>? connectionsToCreate = default(List<int>?), OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0);
        /// <summary>
        /// Open ideacon project from ideaConFile
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaConFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConProject</returns>
        ConProject OpenProject(System.IO.Stream? ideaConFile = default(System.IO.Stream?), int operationIndex = 0);

        /// <summary>
        /// Open ideacon project from ideaConFile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaConFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConProject</returns>
        ApiResponse<ConProject> OpenProjectWithHttpInfo(System.IO.Stream? ideaConFile = default(System.IO.Stream?), int operationIndex = 0);
        /// <summary>
        /// Update an IDEA Connection project based on OpenModelContainer (model and results). IOM is passed in the body of the request.
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool UpdateFromIOM(Guid projectId, int operationIndex = 0);

        /// <summary>
        /// Update an IDEA Connection project based on OpenModelContainer (model and results). IOM is passed in the body of the request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> UpdateFromIOMWithHttpInfo(Guid projectId, int operationIndex = 0);
        /// <summary>
        /// Update an IDEA Connection project by model (model and results)
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        bool UpdateFromIOMContainer(Guid projectId, OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0);

        /// <summary>
        /// Update an IDEA Connection project by model (model and results)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> UpdateFromIOMContainerWithHttpInfo(Guid projectId, OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0);
        /// <summary>
        /// Updates ConProjectData of project
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="conProjectData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConProject</returns>
        ConProject UpdateProjectData(Guid projectId, ConProjectData? conProjectData = default(ConProjectData?), int operationIndex = 0);

        /// <summary>
        /// Updates ConProjectData of project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="conProjectData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConProject</returns>
        ApiResponse<ConProject> UpdateProjectDataWithHttpInfo(Guid projectId, ConProjectData? conProjectData = default(ConProjectData?), int operationIndex = 0);
        /// <summary>
        /// Update setup of the project
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to update project setup</param>
        /// <param name="connectionSetup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectionSetup</returns>
        ConnectionSetup UpdateSetup(Guid projectId, ConnectionSetup? connectionSetup = default(ConnectionSetup?), int operationIndex = 0);

        /// <summary>
        /// Update setup of the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to update project setup</param>
        /// <param name="connectionSetup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectionSetup</returns>
        ApiResponse<ConnectionSetup> UpdateSetupWithHttpInfo(Guid projectId, ConnectionSetup? connectionSetup = default(ConnectionSetup?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Close the project. Needed for releasing resources in the service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the project to be closed</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CloseProjectAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Close the project. Needed for releasing resources in the service.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the project to be closed</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CloseProjectWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Download the actual ideacon project from the service. It includes alle changes which were made by previous API calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemoryStream</returns>
        System.Threading.Tasks.Task<MemoryStream> DownloadProjectAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Download the actual ideacon project from the service. It includes alle changes which were made by previous API calls.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemoryStream)</returns>
        System.Threading.Tasks.Task<ApiResponse<MemoryStream>> DownloadProjectWithHttpInfoAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get the list of projects in the service which were opened by the client which was connected by M:IdeaStatiCa.ConnectionRestApi.Controllers.ClientController.ConnectClient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConProject&gt;</returns>
        System.Threading.Tasks.Task<List<ConProject>> GetActiveProjectsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get the list of projects in the service which were opened by the client which was connected by M:IdeaStatiCa.ConnectionRestApi.Controllers.ClientController.ConnectClient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConProject&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ConProject>>> GetActiveProjectsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get data of the project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the requested project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConProject</returns>
        System.Threading.Tasks.Task<ConProject> GetProjectDataAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get data of the project.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the requested project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConProject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConProject>> GetProjectDataWithHttpInfoAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Get setup from project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to get setup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionSetup</returns>
        System.Threading.Tasks.Task<ConnectionSetup> GetSetupAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Get setup from project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to get setup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionSetup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionSetup>> GetSetupWithHttpInfoAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates an IDEA Connection project. IOM is passed in the body of the request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConProject</returns>
        System.Threading.Tasks.Task<ConProject> ImportIOMAsync(List<int>? connectionsToCreate = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates an IDEA Connection project. IOM is passed in the body of the request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConProject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConProject>> ImportIOMWithHttpInfoAsync(List<int>? connectionsToCreate = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Creates an IDEA Connection project from model (model and results)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConProject</returns>
        System.Threading.Tasks.Task<ConProject> ImportIOMContainerAsync(List<int>? connectionsToCreate = default(List<int>?), OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Creates an IDEA Connection project from model (model and results)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConProject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConProject>> ImportIOMContainerWithHttpInfoAsync(List<int>? connectionsToCreate = default(List<int>?), OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Open ideacon project from ideaConFile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaConFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConProject</returns>
        System.Threading.Tasks.Task<ConProject> OpenProjectAsync(System.IO.Stream? ideaConFile = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Open ideacon project from ideaConFile
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaConFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConProject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConProject>> OpenProjectWithHttpInfoAsync(System.IO.Stream? ideaConFile = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an IDEA Connection project based on OpenModelContainer (model and results). IOM is passed in the body of the request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> UpdateFromIOMAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an IDEA Connection project based on OpenModelContainer (model and results). IOM is passed in the body of the request.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> UpdateFromIOMWithHttpInfoAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update an IDEA Connection project by model (model and results)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> UpdateFromIOMContainerAsync(Guid projectId, OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update an IDEA Connection project by model (model and results)
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> UpdateFromIOMContainerWithHttpInfoAsync(Guid projectId, OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Updates ConProjectData of project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="conProjectData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConProject</returns>
        System.Threading.Tasks.Task<ConProject> UpdateProjectDataAsync(Guid projectId, ConProjectData? conProjectData = default(ConProjectData?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Updates ConProjectData of project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="conProjectData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConProject)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConProject>> UpdateProjectDataWithHttpInfoAsync(Guid projectId, ConProjectData? conProjectData = default(ConProjectData?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// Update setup of the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to update project setup</param>
        /// <param name="connectionSetup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionSetup</returns>
        System.Threading.Tasks.Task<ConnectionSetup> UpdateSetupAsync(Guid projectId, ConnectionSetup? connectionSetup = default(ConnectionSetup?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Update setup of the project
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to update project setup</param>
        /// <param name="connectionSetup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionSetup)</returns>
        System.Threading.Tasks.Task<ApiResponse<ConnectionSetup>> UpdateSetupWithHttpInfoAsync(Guid projectId, ConnectionSetup? connectionSetup = default(ConnectionSetup?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectApi : IProjectApiSync, IProjectApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectApi : IProjectApi
    {
        private connection_restapi_client_poc.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectApi(string basePath)
        {
            this.Configuration = connection_restapi_client_poc.Client.Configuration.MergeConfigurations(
                connection_restapi_client_poc.Client.GlobalConfiguration.Instance,
                new connection_restapi_client_poc.Client.Configuration { BasePath = basePath }
            );
            this.Client = new connection_restapi_client_poc.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new connection_restapi_client_poc.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = connection_restapi_client_poc.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectApi(connection_restapi_client_poc.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = connection_restapi_client_poc.Client.Configuration.MergeConfigurations(
                connection_restapi_client_poc.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new connection_restapi_client_poc.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new connection_restapi_client_poc.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = connection_restapi_client_poc.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ProjectApi(connection_restapi_client_poc.Client.ISynchronousClient client, connection_restapi_client_poc.Client.IAsynchronousClient asyncClient, connection_restapi_client_poc.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = connection_restapi_client_poc.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public connection_restapi_client_poc.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public connection_restapi_client_poc.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public connection_restapi_client_poc.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public connection_restapi_client_poc.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Close the project. Needed for releasing resources in the service. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the project to be closed</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string CloseProject(string projectId, int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.ApiResponse<string> localVarResponse = CloseProjectWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Close the project. Needed for releasing resources in the service. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the project to be closed</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public connection_restapi_client_poc.Client.ApiResponse<string> CloseProjectWithHttpInfo(string projectId, int operationIndex = 0)
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new connection_restapi_client_poc.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->CloseProject");
            }

            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ProjectApi.CloseProject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/api/1/projects/{projectId}/close", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloseProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Close the project. Needed for releasing resources in the service. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the project to be closed</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CloseProjectAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            connection_restapi_client_poc.Client.ApiResponse<string> localVarResponse = await CloseProjectWithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Close the project. Needed for releasing resources in the service. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the project to be closed</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<connection_restapi_client_poc.Client.ApiResponse<string>> CloseProjectWithHttpInfoAsync(string projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'projectId' is set
            if (projectId == null)
            {
                throw new connection_restapi_client_poc.Client.ApiException(400, "Missing required parameter 'projectId' when calling ProjectApi->CloseProject");
            }


            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ProjectApi.CloseProject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/api/1/projects/{projectId}/close", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CloseProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download the actual ideacon project from the service. It includes alle changes which were made by previous API calls. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MemoryStream</returns>
        public MemoryStream DownloadProject(Guid projectId, int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.ApiResponse<MemoryStream> localVarResponse = DownloadProjectWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download the actual ideacon project from the service. It includes alle changes which were made by previous API calls. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MemoryStream</returns>
        public connection_restapi_client_poc.Client.ApiResponse<MemoryStream> DownloadProjectWithHttpInfo(Guid projectId, int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ProjectApi.DownloadProject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<MemoryStream>("/api/1/projects/{projectId}/download", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download the actual ideacon project from the service. It includes alle changes which were made by previous API calls. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MemoryStream</returns>
        public async System.Threading.Tasks.Task<MemoryStream> DownloadProjectAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            connection_restapi_client_poc.Client.ApiResponse<MemoryStream> localVarResponse = await DownloadProjectWithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download the actual ideacon project from the service. It includes alle changes which were made by previous API calls. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MemoryStream)</returns>
        public async System.Threading.Tasks.Task<connection_restapi_client_poc.Client.ApiResponse<MemoryStream>> DownloadProjectWithHttpInfoAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream",
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ProjectApi.DownloadProject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MemoryStream>("/api/1/projects/{projectId}/download", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DownloadProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of projects in the service which were opened by the client which was connected by M:IdeaStatiCa.ConnectionRestApi.Controllers.ClientController.ConnectClient 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ConProject&gt;</returns>
        public List<ConProject> GetActiveProjects(int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.ApiResponse<List<ConProject>> localVarResponse = GetActiveProjectsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of projects in the service which were opened by the client which was connected by M:IdeaStatiCa.ConnectionRestApi.Controllers.ClientController.ConnectClient 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ConProject&gt;</returns>
        public connection_restapi_client_poc.Client.ApiResponse<List<ConProject>> GetActiveProjectsWithHttpInfo(int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProjectApi.GetActiveProjects";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ConProject>>("/api/1/projects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActiveProjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get the list of projects in the service which were opened by the client which was connected by M:IdeaStatiCa.ConnectionRestApi.Controllers.ClientController.ConnectClient 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ConProject&gt;</returns>
        public async System.Threading.Tasks.Task<List<ConProject>> GetActiveProjectsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            connection_restapi_client_poc.Client.ApiResponse<List<ConProject>> localVarResponse = await GetActiveProjectsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the list of projects in the service which were opened by the client which was connected by M:IdeaStatiCa.ConnectionRestApi.Controllers.ClientController.ConnectClient 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ConProject&gt;)</returns>
        public async System.Threading.Tasks.Task<connection_restapi_client_poc.Client.ApiResponse<List<ConProject>>> GetActiveProjectsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "ProjectApi.GetActiveProjects";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ConProject>>("/api/1/projects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActiveProjects", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get data of the project. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the requested project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConProject</returns>
        public ConProject GetProjectData(Guid projectId, int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.ApiResponse<ConProject> localVarResponse = GetProjectDataWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get data of the project. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the requested project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConProject</returns>
        public connection_restapi_client_poc.Client.ApiResponse<ConProject> GetProjectDataWithHttpInfo(Guid projectId, int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ProjectApi.GetProjectData";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ConProject>("/api/1/projects/{projectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get data of the project. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the requested project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConProject</returns>
        public async System.Threading.Tasks.Task<ConProject> GetProjectDataAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            connection_restapi_client_poc.Client.ApiResponse<ConProject> localVarResponse = await GetProjectDataWithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get data of the project. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the requested project</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConProject)</returns>
        public async System.Threading.Tasks.Task<connection_restapi_client_poc.Client.ApiResponse<ConProject>> GetProjectDataWithHttpInfoAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ProjectApi.GetProjectData";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConProject>("/api/1/projects/{projectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProjectData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get setup from project 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to get setup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectionSetup</returns>
        public ConnectionSetup GetSetup(Guid projectId, int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.ApiResponse<ConnectionSetup> localVarResponse = GetSetupWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get setup from project 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to get setup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectionSetup</returns>
        public connection_restapi_client_poc.Client.ApiResponse<ConnectionSetup> GetSetupWithHttpInfo(Guid projectId, int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ProjectApi.GetSetup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<ConnectionSetup>("/api/1/projects/{projectId}/connection-setup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSetup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get setup from project 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to get setup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionSetup</returns>
        public async System.Threading.Tasks.Task<ConnectionSetup> GetSetupAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            connection_restapi_client_poc.Client.ApiResponse<ConnectionSetup> localVarResponse = await GetSetupWithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get setup from project 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to get setup</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionSetup)</returns>
        public async System.Threading.Tasks.Task<connection_restapi_client_poc.Client.ApiResponse<ConnectionSetup>> GetSetupWithHttpInfoAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ProjectApi.GetSetup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ConnectionSetup>("/api/1/projects/{projectId}/connection-setup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSetup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an IDEA Connection project. IOM is passed in the body of the request. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConProject</returns>
        public ConProject ImportIOM(List<int>? connectionsToCreate = default(List<int>?), int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.ApiResponse<ConProject> localVarResponse = ImportIOMWithHttpInfo(connectionsToCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an IDEA Connection project. IOM is passed in the body of the request. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConProject</returns>
        public connection_restapi_client_poc.Client.ApiResponse<ConProject> ImportIOMWithHttpInfo(List<int>? connectionsToCreate = default(List<int>?), int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (connectionsToCreate != null)
            {
                localVarRequestOptions.QueryParameters.Add(connection_restapi_client_poc.Client.ClientUtils.ParameterToMultiMap("multi", "ConnectionsToCreate", connectionsToCreate));
            }

            localVarRequestOptions.Operation = "ProjectApi.ImportIOM";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ConProject>("/api/1/projects/import-iom-file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportIOM", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an IDEA Connection project. IOM is passed in the body of the request. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConProject</returns>
        public async System.Threading.Tasks.Task<ConProject> ImportIOMAsync(List<int>? connectionsToCreate = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            connection_restapi_client_poc.Client.ApiResponse<ConProject> localVarResponse = await ImportIOMWithHttpInfoAsync(connectionsToCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an IDEA Connection project. IOM is passed in the body of the request. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConProject)</returns>
        public async System.Threading.Tasks.Task<connection_restapi_client_poc.Client.ApiResponse<ConProject>> ImportIOMWithHttpInfoAsync(List<int>? connectionsToCreate = default(List<int>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (connectionsToCreate != null)
            {
                localVarRequestOptions.QueryParameters.Add(connection_restapi_client_poc.Client.ClientUtils.ParameterToMultiMap("multi", "ConnectionsToCreate", connectionsToCreate));
            }

            localVarRequestOptions.Operation = "ProjectApi.ImportIOM";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConProject>("/api/1/projects/import-iom-file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportIOM", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an IDEA Connection project from model (model and results) 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConProject</returns>
        public ConProject ImportIOMContainer(List<int>? connectionsToCreate = default(List<int>?), OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.ApiResponse<ConProject> localVarResponse = ImportIOMContainerWithHttpInfo(connectionsToCreate, openModelContainer);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an IDEA Connection project from model (model and results) 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConProject</returns>
        public connection_restapi_client_poc.Client.ApiResponse<ConProject> ImportIOMContainerWithHttpInfo(List<int>? connectionsToCreate = default(List<int>?), OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (connectionsToCreate != null)
            {
                localVarRequestOptions.QueryParameters.Add(connection_restapi_client_poc.Client.ClientUtils.ParameterToMultiMap("multi", "ConnectionsToCreate", connectionsToCreate));
            }
            localVarRequestOptions.Data = openModelContainer;

            localVarRequestOptions.Operation = "ProjectApi.ImportIOMContainer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ConProject>("/api/1/projects/import-iom", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportIOMContainer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates an IDEA Connection project from model (model and results) 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConProject</returns>
        public async System.Threading.Tasks.Task<ConProject> ImportIOMContainerAsync(List<int>? connectionsToCreate = default(List<int>?), OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            connection_restapi_client_poc.Client.ApiResponse<ConProject> localVarResponse = await ImportIOMContainerWithHttpInfoAsync(connectionsToCreate, openModelContainer, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates an IDEA Connection project from model (model and results) 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="connectionsToCreate"> (optional)</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConProject)</returns>
        public async System.Threading.Tasks.Task<connection_restapi_client_poc.Client.ApiResponse<ConProject>> ImportIOMContainerWithHttpInfoAsync(List<int>? connectionsToCreate = default(List<int>?), OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (connectionsToCreate != null)
            {
                localVarRequestOptions.QueryParameters.Add(connection_restapi_client_poc.Client.ClientUtils.ParameterToMultiMap("multi", "ConnectionsToCreate", connectionsToCreate));
            }
            localVarRequestOptions.Data = openModelContainer;

            localVarRequestOptions.Operation = "ProjectApi.ImportIOMContainer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConProject>("/api/1/projects/import-iom", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ImportIOMContainer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Open ideacon project from ideaConFile 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaConFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConProject</returns>
        public ConProject OpenProject(System.IO.Stream? ideaConFile = default(System.IO.Stream?), int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.ApiResponse<ConProject> localVarResponse = OpenProjectWithHttpInfo(ideaConFile);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Open ideacon project from ideaConFile 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaConFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConProject</returns>
        public connection_restapi_client_poc.Client.ApiResponse<ConProject> OpenProjectWithHttpInfo(System.IO.Stream? ideaConFile = default(System.IO.Stream?), int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ideaConFile != null)
            {
                localVarRequestOptions.FileParameters.Add("ideaConFile", ideaConFile);
            }

            localVarRequestOptions.Operation = "ProjectApi.OpenProject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ConProject>("/api/1/projects/open", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OpenProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Open ideacon project from ideaConFile 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaConFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConProject</returns>
        public async System.Threading.Tasks.Task<ConProject> OpenProjectAsync(System.IO.Stream? ideaConFile = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            connection_restapi_client_poc.Client.ApiResponse<ConProject> localVarResponse = await OpenProjectWithHttpInfoAsync(ideaConFile, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Open ideacon project from ideaConFile 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ideaConFile"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConProject)</returns>
        public async System.Threading.Tasks.Task<connection_restapi_client_poc.Client.ApiResponse<ConProject>> OpenProjectWithHttpInfoAsync(System.IO.Stream? ideaConFile = default(System.IO.Stream?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (ideaConFile != null)
            {
                localVarRequestOptions.FileParameters.Add("ideaConFile", ideaConFile);
            }

            localVarRequestOptions.Operation = "ProjectApi.OpenProject";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ConProject>("/api/1/projects/open", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OpenProject", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an IDEA Connection project based on OpenModelContainer (model and results). IOM is passed in the body of the request. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool UpdateFromIOM(Guid projectId, int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.ApiResponse<bool> localVarResponse = UpdateFromIOMWithHttpInfo(projectId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an IDEA Connection project based on OpenModelContainer (model and results). IOM is passed in the body of the request. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public connection_restapi_client_poc.Client.ApiResponse<bool> UpdateFromIOMWithHttpInfo(Guid projectId, int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ProjectApi.UpdateFromIOM";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/api/1/projects/{projectId}/update-iom-file", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFromIOM", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an IDEA Connection project based on OpenModelContainer (model and results). IOM is passed in the body of the request. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> UpdateFromIOMAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            connection_restapi_client_poc.Client.ApiResponse<bool> localVarResponse = await UpdateFromIOMWithHttpInfoAsync(projectId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an IDEA Connection project based on OpenModelContainer (model and results). IOM is passed in the body of the request. 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<connection_restapi_client_poc.Client.ApiResponse<bool>> UpdateFromIOMWithHttpInfoAsync(Guid projectId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter

            localVarRequestOptions.Operation = "ProjectApi.UpdateFromIOM";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<bool>("/api/1/projects/{projectId}/update-iom-file", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFromIOM", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an IDEA Connection project by model (model and results) 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>bool</returns>
        public bool UpdateFromIOMContainer(Guid projectId, OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.ApiResponse<bool> localVarResponse = UpdateFromIOMContainerWithHttpInfo(projectId, openModelContainer);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an IDEA Connection project by model (model and results) 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of bool</returns>
        public connection_restapi_client_poc.Client.ApiResponse<bool> UpdateFromIOMContainerWithHttpInfo(Guid projectId, OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml",
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = openModelContainer;

            localVarRequestOptions.Operation = "ProjectApi.UpdateFromIOMContainer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<bool>("/api/1/projects/{projectId}/update-iom", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFromIOMContainer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an IDEA Connection project by model (model and results) 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> UpdateFromIOMContainerAsync(Guid projectId, OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            connection_restapi_client_poc.Client.ApiResponse<bool> localVarResponse = await UpdateFromIOMContainerWithHttpInfoAsync(projectId, openModelContainer, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an IDEA Connection project by model (model and results) 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to be updated</param>
        /// <param name="openModelContainer"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<connection_restapi_client_poc.Client.ApiResponse<bool>> UpdateFromIOMContainerWithHttpInfoAsync(Guid projectId, OpenModelContainer? openModelContainer = default(OpenModelContainer?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/xml", 
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = openModelContainer;

            localVarRequestOptions.Operation = "ProjectApi.UpdateFromIOMContainer";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<bool>("/api/1/projects/{projectId}/update-iom", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateFromIOMContainer", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates ConProjectData of project 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="conProjectData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConProject</returns>
        public ConProject UpdateProjectData(Guid projectId, ConProjectData? conProjectData = default(ConProjectData?), int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.ApiResponse<ConProject> localVarResponse = UpdateProjectDataWithHttpInfo(projectId, conProjectData);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates ConProjectData of project 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="conProjectData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConProject</returns>
        public connection_restapi_client_poc.Client.ApiResponse<ConProject> UpdateProjectDataWithHttpInfo(Guid projectId, ConProjectData? conProjectData = default(ConProjectData?), int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = conProjectData;

            localVarRequestOptions.Operation = "ProjectApi.UpdateProjectData";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ConProject>("/api/1/projects/{projectId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates ConProjectData of project 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="conProjectData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConProject</returns>
        public async System.Threading.Tasks.Task<ConProject> UpdateProjectDataAsync(Guid projectId, ConProjectData? conProjectData = default(ConProjectData?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            connection_restapi_client_poc.Client.ApiResponse<ConProject> localVarResponse = await UpdateProjectDataWithHttpInfoAsync(projectId, conProjectData, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Updates ConProjectData of project 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId"></param>
        /// <param name="conProjectData"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConProject)</returns>
        public async System.Threading.Tasks.Task<connection_restapi_client_poc.Client.ApiResponse<ConProject>> UpdateProjectDataWithHttpInfoAsync(Guid projectId, ConProjectData? conProjectData = default(ConProjectData?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = conProjectData;

            localVarRequestOptions.Operation = "ProjectApi.UpdateProjectData";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ConProject>("/api/1/projects/{projectId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateProjectData", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update setup of the project 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to update project setup</param>
        /// <param name="connectionSetup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ConnectionSetup</returns>
        public ConnectionSetup UpdateSetup(Guid projectId, ConnectionSetup? connectionSetup = default(ConnectionSetup?), int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.ApiResponse<ConnectionSetup> localVarResponse = UpdateSetupWithHttpInfo(projectId, connectionSetup);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update setup of the project 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to update project setup</param>
        /// <param name="connectionSetup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ConnectionSetup</returns>
        public connection_restapi_client_poc.Client.ApiResponse<ConnectionSetup> UpdateSetupWithHttpInfo(Guid projectId, ConnectionSetup? connectionSetup = default(ConnectionSetup?), int operationIndex = 0)
        {
            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = connectionSetup;

            localVarRequestOptions.Operation = "ProjectApi.UpdateSetup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<ConnectionSetup>("/api/1/projects/{projectId}/connection-setup", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSetup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update setup of the project 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to update project setup</param>
        /// <param name="connectionSetup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ConnectionSetup</returns>
        public async System.Threading.Tasks.Task<ConnectionSetup> UpdateSetupAsync(Guid projectId, ConnectionSetup? connectionSetup = default(ConnectionSetup?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            connection_restapi_client_poc.Client.ApiResponse<ConnectionSetup> localVarResponse = await UpdateSetupWithHttpInfoAsync(projectId, connectionSetup, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update setup of the project 
        /// </summary>
        /// <exception cref="connection_restapi_client_poc.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectId">The unique identifier of the opened project in the ConnectionRestApi service to update project setup</param>
        /// <param name="connectionSetup"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ConnectionSetup)</returns>
        public async System.Threading.Tasks.Task<connection_restapi_client_poc.Client.ApiResponse<ConnectionSetup>> UpdateSetupWithHttpInfoAsync(Guid projectId, ConnectionSetup? connectionSetup = default(ConnectionSetup?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            connection_restapi_client_poc.Client.RequestOptions localVarRequestOptions = new connection_restapi_client_poc.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = connection_restapi_client_poc.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("projectId", connection_restapi_client_poc.Client.ClientUtils.ParameterToString(projectId)); // path parameter
            localVarRequestOptions.Data = connectionSetup;

            localVarRequestOptions.Operation = "ProjectApi.UpdateSetup";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<ConnectionSetup>("/api/1/projects/{projectId}/connection-setup", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSetup", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
