/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// CrossSectionStirrupIdeaRSOpenModel
    /// </summary>
    [DataContract(Name = "CrossSection_Stirrup-IdeaRS_OpenModel")]
    public partial class CrossSectionStirrupIdeaRSOpenModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CrossSectionStirrupIdeaRSOpenModel" /> class.
        /// </summary>
        /// <param name="geometry">geometry.</param>
        /// <param name="diameter">diameter.</param>
        /// <param name="material">material.</param>
        /// <param name="anchorageLenght">anchorageLenght.</param>
        /// <param name="diameterOfMandrel">diameterOfMandrel.</param>
        /// <param name="isClosed">isClosed.</param>
        /// <param name="distance">distance.</param>
        /// <param name="shearCheck">shearCheck.</param>
        /// <param name="torsionCheck">torsionCheck.</param>
        public CrossSectionStirrupIdeaRSOpenModel(Geometry2DPolyLine2DIdeaRSOpenModel geometry = default(Geometry2DPolyLine2DIdeaRSOpenModel), double diameter = default(double), ReferenceElementIdeaRSOpenModel material = default(ReferenceElementIdeaRSOpenModel), double anchorageLenght = default(double), double diameterOfMandrel = default(double), bool isClosed = default(bool), double distance = default(double), bool shearCheck = default(bool), bool torsionCheck = default(bool))
        {
            this.Geometry = geometry;
            this.Diameter = diameter;
            this.Material = material;
            this.AnchorageLenght = anchorageLenght;
            this.DiameterOfMandrel = diameterOfMandrel;
            this.IsClosed = isClosed;
            this.Distance = distance;
            this.ShearCheck = shearCheck;
            this.TorsionCheck = torsionCheck;
        }

        /// <summary>
        /// Gets or Sets Geometry
        /// </summary>
        [DataMember(Name = "geometry", EmitDefaultValue = false)]
        public Geometry2DPolyLine2DIdeaRSOpenModel Geometry { get; set; }

        /// <summary>
        /// Gets or Sets Diameter
        /// </summary>
        [DataMember(Name = "diameter", EmitDefaultValue = false)]
        public double Diameter { get; set; }

        /// <summary>
        /// Gets or Sets Material
        /// </summary>
        [DataMember(Name = "material", EmitDefaultValue = false)]
        public ReferenceElementIdeaRSOpenModel Material { get; set; }

        /// <summary>
        /// Gets or Sets AnchorageLenght
        /// </summary>
        [DataMember(Name = "anchorageLenght", EmitDefaultValue = false)]
        public double AnchorageLenght { get; set; }

        /// <summary>
        /// Gets or Sets DiameterOfMandrel
        /// </summary>
        [DataMember(Name = "diameterOfMandrel", EmitDefaultValue = false)]
        public double DiameterOfMandrel { get; set; }

        /// <summary>
        /// Gets or Sets IsClosed
        /// </summary>
        [DataMember(Name = "isClosed", EmitDefaultValue = true)]
        public bool IsClosed { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name = "distance", EmitDefaultValue = false)]
        public double Distance { get; set; }

        /// <summary>
        /// Gets or Sets ShearCheck
        /// </summary>
        [DataMember(Name = "shearCheck", EmitDefaultValue = true)]
        public bool ShearCheck { get; set; }

        /// <summary>
        /// Gets or Sets TorsionCheck
        /// </summary>
        [DataMember(Name = "torsionCheck", EmitDefaultValue = true)]
        public bool TorsionCheck { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CrossSectionStirrupIdeaRSOpenModel {\n");
            sb.Append("  Geometry: ").Append(Geometry).Append("\n");
            sb.Append("  Diameter: ").Append(Diameter).Append("\n");
            sb.Append("  Material: ").Append(Material).Append("\n");
            sb.Append("  AnchorageLenght: ").Append(AnchorageLenght).Append("\n");
            sb.Append("  DiameterOfMandrel: ").Append(DiameterOfMandrel).Append("\n");
            sb.Append("  IsClosed: ").Append(IsClosed).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  ShearCheck: ").Append(ShearCheck).Append("\n");
            sb.Append("  TorsionCheck: ").Append(TorsionCheck).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
