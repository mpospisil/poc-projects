/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// IdeaStatiCaApiConnectionModelProjCrossSectionIdeaStatiCaApi
    /// </summary>
    [DataContract(Name = "IdeaStatiCa_Api_Connection_Model_ProjCrossSection-IdeaStatiCa_Api")]
    public partial class IdeaStatiCaApiConnectionModelProjCrossSectionIdeaStatiCaApi : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdeaStatiCaApiConnectionModelProjCrossSectionIdeaStatiCaApi" /> class.
        /// </summary>
        /// <param name="crossSectionType">crossSectionType.</param>
        /// <param name="isFromDatabase">isFromDatabase.</param>
        /// <param name="databaseName">databaseName.</param>
        /// <param name="material">material.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        public IdeaStatiCaApiConnectionModelProjCrossSectionIdeaStatiCaApi(string crossSectionType = default(string), bool isFromDatabase = default(bool), string databaseName = default(string), string material = default(string), int id = default(int), string name = default(string))
        {
            this.CrossSectionType = crossSectionType;
            this.IsFromDatabase = isFromDatabase;
            this.DatabaseName = databaseName;
            this.Material = material;
            this.Id = id;
            this.Name = name;
        }

        /// <summary>
        /// Gets or Sets CrossSectionType
        /// </summary>
        [DataMember(Name = "crossSectionType", EmitDefaultValue = true)]
        public string CrossSectionType { get; set; }

        /// <summary>
        /// Gets or Sets IsFromDatabase
        /// </summary>
        [DataMember(Name = "isFromDatabase", EmitDefaultValue = true)]
        public bool IsFromDatabase { get; set; }

        /// <summary>
        /// Gets or Sets DatabaseName
        /// </summary>
        [DataMember(Name = "databaseName", EmitDefaultValue = true)]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or Sets Material
        /// </summary>
        [DataMember(Name = "material", EmitDefaultValue = true)]
        public string Material { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdeaStatiCaApiConnectionModelProjCrossSectionIdeaStatiCaApi {\n");
            sb.Append("  CrossSectionType: ").Append(CrossSectionType).Append("\n");
            sb.Append("  IsFromDatabase: ").Append(IsFromDatabase).Append("\n");
            sb.Append("  DatabaseName: ").Append(DatabaseName).Append("\n");
            sb.Append("  Material: ").Append(Material).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
