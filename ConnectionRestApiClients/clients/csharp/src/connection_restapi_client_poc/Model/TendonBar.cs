/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// Tendon bar
    /// </summary>
    [DataContract(Name = "TendonBar")]
    public partial class TendonBar : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets TendonType
        /// </summary>
        [DataMember(Name = "tendonType", EmitDefaultValue = false)]
        public TendonBarType? TendonType { get; set; }

        /// <summary>
        /// Gets or Sets PrestressReinforcementType
        /// </summary>
        [DataMember(Name = "prestressReinforcementType", EmitDefaultValue = false)]
        public FatigueTypeOfPrestressingSteel? PrestressReinforcementType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TendonBar" /> class.
        /// </summary>
        /// <param name="id">Tendon Id.</param>
        /// <param name="tendonType">tendonType.</param>
        /// <param name="point">point.</param>
        /// <param name="material">material.</param>
        /// <param name="prestressingOrder">order of tendon prestessing.</param>
        /// <param name="numStrandsInTendon">number of ropes in tendon.</param>
        /// <param name="prestressReinforcementType">prestressReinforcementType.</param>
        /// <param name="phase">Phase.</param>
        /// <param name="tendonDuct">tendonDuct.</param>
        public TendonBar(int id = default(int), TendonBarType? tendonType = default(TendonBarType?), Point2D point = default(Point2D), ReferenceElement material = default(ReferenceElement), int prestressingOrder = default(int), int numStrandsInTendon = default(int), FatigueTypeOfPrestressingSteel? prestressReinforcementType = default(FatigueTypeOfPrestressingSteel?), int phase = default(int), TendonDuct tendonDuct = default(TendonDuct))
        {
            this.Id = id;
            this.TendonType = tendonType;
            this.Point = point;
            this.Material = material;
            this.PrestressingOrder = prestressingOrder;
            this.NumStrandsInTendon = numStrandsInTendon;
            this.PrestressReinforcementType = prestressReinforcementType;
            this.Phase = phase;
            this.TendonDuct = tendonDuct;
        }

        /// <summary>
        /// Tendon Id
        /// </summary>
        /// <value>Tendon Id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Point
        /// </summary>
        [DataMember(Name = "point", EmitDefaultValue = false)]
        public Point2D Point { get; set; }

        /// <summary>
        /// Gets or Sets Material
        /// </summary>
        [DataMember(Name = "material", EmitDefaultValue = false)]
        public ReferenceElement Material { get; set; }

        /// <summary>
        /// order of tendon prestessing
        /// </summary>
        /// <value>order of tendon prestessing</value>
        [DataMember(Name = "prestressingOrder", EmitDefaultValue = false)]
        public int PrestressingOrder { get; set; }

        /// <summary>
        /// number of ropes in tendon
        /// </summary>
        /// <value>number of ropes in tendon</value>
        [DataMember(Name = "numStrandsInTendon", EmitDefaultValue = false)]
        public int NumStrandsInTendon { get; set; }

        /// <summary>
        /// Phase
        /// </summary>
        /// <value>Phase</value>
        [DataMember(Name = "phase", EmitDefaultValue = false)]
        public int Phase { get; set; }

        /// <summary>
        /// Gets or Sets TendonDuct
        /// </summary>
        [DataMember(Name = "tendonDuct", EmitDefaultValue = false)]
        public TendonDuct TendonDuct { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TendonBar {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TendonType: ").Append(TendonType).Append("\n");
            sb.Append("  Point: ").Append(Point).Append("\n");
            sb.Append("  Material: ").Append(Material).Append("\n");
            sb.Append("  PrestressingOrder: ").Append(PrestressingOrder).Append("\n");
            sb.Append("  NumStrandsInTendon: ").Append(NumStrandsInTendon).Append("\n");
            sb.Append("  PrestressReinforcementType: ").Append(PrestressReinforcementType).Append("\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  TendonDuct: ").Append(TendonDuct).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
