/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = IdeaStatiCa.ConnectionApi.Client.OpenAPIDateConverter;

namespace IdeaStatiCa.ConnectionApi.Model
{
    /// <summary>
    /// Tendon duct
    /// </summary>
    [DataContract(Name = "TendonDuct")]
    public partial class TendonDuct : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets MaterialDuct
        /// </summary>
        [DataMember(Name = "materialDuct", EmitDefaultValue = false)]
        public MaterialDuct? MaterialDuct { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TendonDuct" /> class.
        /// </summary>
        /// <param name="id">Tendon duct Id.</param>
        /// <param name="point">point.</param>
        /// <param name="materialDuct">materialDuct.</param>
        /// <param name="isDebondingTube">rue for debonding tubes, false for tendon ducts.</param>
        /// <param name="diameter">Diameter.</param>
        public TendonDuct(int id = default(int), Point2D point = default(Point2D), MaterialDuct? materialDuct = default(MaterialDuct?), bool isDebondingTube = default(bool), double diameter = default(double))
        {
            this.Id = id;
            this.Point = point;
            this.MaterialDuct = materialDuct;
            this.IsDebondingTube = isDebondingTube;
            this.Diameter = diameter;
        }

        /// <summary>
        /// Tendon duct Id
        /// </summary>
        /// <value>Tendon duct Id</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Point
        /// </summary>
        [DataMember(Name = "point", EmitDefaultValue = false)]
        public Point2D Point { get; set; }

        /// <summary>
        /// rue for debonding tubes, false for tendon ducts
        /// </summary>
        /// <value>rue for debonding tubes, false for tendon ducts</value>
        [DataMember(Name = "isDebondingTube", EmitDefaultValue = true)]
        public bool IsDebondingTube { get; set; }

        /// <summary>
        /// Diameter
        /// </summary>
        /// <value>Diameter</value>
        [DataMember(Name = "diameter", EmitDefaultValue = false)]
        public double Diameter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TendonDuct {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Point: ").Append(Point).Append("\n");
            sb.Append("  MaterialDuct: ").Append(MaterialDuct).Append("\n");
            sb.Append("  IsDebondingTube: ").Append(IsDebondingTube).Append("\n");
            sb.Append("  Diameter: ").Append(Diameter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
