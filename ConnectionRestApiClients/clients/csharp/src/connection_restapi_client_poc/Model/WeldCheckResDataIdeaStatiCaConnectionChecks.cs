/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// WeldCheckResDataIdeaStatiCaConnectionChecks
    /// </summary>
    [DataContract(Name = "WeldCheckResData-IdeaStatiCa_ConnectionChecks")]
    public partial class WeldCheckResDataIdeaStatiCaConnectionChecks : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets WeldType2
        /// </summary>
        [DataMember(Name = "weldType2", EmitDefaultValue = false)]
        public DataWeldTypeCodeCIBasicTypes? WeldType2 { get; set; }

        /// <summary>
        /// Gets or Sets WeldCheckMethodHK
        /// </summary>
        [DataMember(Name = "weldCheckMethodHK", EmitDefaultValue = false)]
        public DataWeldCheckMethodHKCIBasicTypes? WeldCheckMethodHK { get; set; }

        /// <summary>
        /// Gets or Sets WeldPositionSNIP
        /// </summary>
        [DataMember(Name = "weldPositionSNIP", EmitDefaultValue = false)]
        public DataWeldPositionSNIPCIBasicTypes? WeldPositionSNIP { get; set; }

        /// <summary>
        /// Gets or Sets WeldingTypeSNIP
        /// </summary>
        [DataMember(Name = "weldingTypeSNIP", EmitDefaultValue = false)]
        public DataWeldingTypeSNIPCIBasicTypes? WeldingTypeSNIP { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WeldCheckResDataIdeaStatiCaConnectionChecks" /> class.
        /// </summary>
        /// <param name="joinedItemName">joinedItemName.</param>
        /// <param name="designedThickness">designedThickness.</param>
        /// <param name="thickness">thickness.</param>
        /// <param name="legSize">legSize.</param>
        /// <param name="maxEquivalentStress">maxEquivalentStress.</param>
        /// <param name="equivalentStressResistance">equivalentStressResistance.</param>
        /// <param name="sigmaPerpendicular">sigmaPerpendicular.</param>
        /// <param name="sigmaPerpendicularMax">sigmaPerpendicularMax.</param>
        /// <param name="sigmaPerpendicularResistance">sigmaPerpendicularResistance.</param>
        /// <param name="unityCheckStress">unityCheckStress.</param>
        /// <param name="unityCheckWeld">unityCheckWeld.</param>
        /// <param name="unityCheckBaseMetal">unityCheckBaseMetal.</param>
        /// <param name="materialName">materialName.</param>
        /// <param name="weldType2">weldType2.</param>
        /// <param name="weldWithContact">weldWithContact.</param>
        /// <param name="items">items.</param>
        /// <param name="structItems">structItems.</param>
        /// <param name="tauy">tauy.</param>
        /// <param name="taux">taux.</param>
        /// <param name="tauxwf">tauxwf.</param>
        /// <param name="sigmawf">sigmawf.</param>
        /// <param name="weldArea">weldArea.</param>
        /// <param name="length">length.</param>
        /// <param name="lengthElem">lengthElem.</param>
        /// <param name="forcesAllItems">forcesAllItems.</param>
        /// <param name="weldStressDiagram">weldStressDiagram.</param>
        /// <param name="gammaM0">gammaM0.</param>
        /// <param name="gammaM2">gammaM2.</param>
        /// <param name="gammaMfi">gammaMfi.</param>
        /// <param name="kwTheta">kwTheta.</param>
        /// <param name="materialFu">materialFu.</param>
        /// <param name="betaW">betaW.</param>
        /// <param name="rnd">rnd.</param>
        /// <param name="fn">fn.</param>
        /// <param name="plasticStrain">plasticStrain.</param>
        /// <param name="weldEval">weldEval.</param>
        /// <param name="plasticCapacity">plasticCapacity.</param>
        /// <param name="plasticCapacityArea">plasticCapacityArea.</param>
        /// <param name="plasticCapacityAreaVal">plasticCapacityAreaVal.</param>
        /// <param name="isDetailingStatusOK">isDetailingStatusOK.</param>
        /// <param name="isDetailingStatusForReportOK">isDetailingStatusForReportOK.</param>
        /// <param name="theta">theta.</param>
        /// <param name="isClosedWeld">isClosedWeld.</param>
        /// <param name="weldCheckMethodHK">weldCheckMethodHK.</param>
        /// <param name="phiW">phiW.</param>
        /// <param name="omegaW">omegaW.</param>
        /// <param name="fuw">fuw.</param>
        /// <param name="checksNonconformities">checksNonconformities.</param>
        /// <param name="detailingChecksWeld">detailingChecksWeld.</param>
        /// <param name="weldResistance">weldResistance.</param>
        /// <param name="weldElemArea">weldElemArea.</param>
        /// <param name="xu">xu.</param>
        /// <param name="thetaWeld">thetaWeld.</param>
        /// <param name="aiscDirectionalStrengthIncrease">aiscDirectionalStrengthIncrease.</param>
        /// <param name="mw">mw.</param>
        /// <param name="fusionAreaElem">fusionAreaElem.</param>
        /// <param name="fuBaseMetal">fuBaseMetal.</param>
        /// <param name="baseMetalResistance">baseMetalResistance.</param>
        /// <param name="theta1Weld">theta1Weld.</param>
        /// <param name="theta2Weld">theta2Weld.</param>
        /// <param name="fnWeld">fnWeld.</param>
        /// <param name="lengthElemReduced">lengthElemReduced.</param>
        /// <param name="lengthReduced">lengthReduced.</param>
        /// <param name="betaFSNIP">betaFSNIP.</param>
        /// <param name="betaZSNIP">betaZSNIP.</param>
        /// <param name="rwfSNIP">rwfSNIP.</param>
        /// <param name="rwzSNIP">rwzSNIP.</param>
        /// <param name="gammaC">gammaC.</param>
        /// <param name="gammaWmSNIP">gammaWmSNIP.</param>
        /// <param name="fexx">fexx.</param>
        /// <param name="fnbm">fnbm.</param>
        /// <param name="awe">awe.</param>
        /// <param name="abm">abm.</param>
        /// <param name="baseMetalCapacity">baseMetalCapacity.</param>
        /// <param name="betaFCHN">betaFCHN.</param>
        /// <param name="isButtWeld">isButtWeld.</param>
        /// <param name="gammaMwIS">gammaMwIS.</param>
        /// <param name="weldLongitudinalForce">weldLongitudinalForce.</param>
        /// <param name="weldTransversalForce">weldTransversalForce.</param>
        /// <param name="weldLongitudinalResistance">weldLongitudinalResistance.</param>
        /// <param name="weldTransversalResistance">weldTransversalResistance.</param>
        /// <param name="weldThetaHK">weldThetaHK.</param>
        /// <param name="weldCoeffKHK">weldCoeffKHK.</param>
        /// <param name="isWeldDesignStrengthTableValue">isWeldDesignStrengthTableValue.</param>
        /// <param name="isEcenWeldMaterialAndElectrode">isEcenWeldMaterialAndElectrode.</param>
        /// <param name="ue">ue.</param>
        /// <param name="us">us.</param>
        /// <param name="weldPositionSNIP">weldPositionSNIP.</param>
        /// <param name="weldingTypeSNIP">weldingTypeSNIP.</param>
        /// <param name="fireTemperature">fireTemperature.</param>
        /// <param name="fireDesign">fireDesign.</param>
        /// <param name="isHorizontalTying">isHorizontalTying.</param>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="checkStatus">checkStatus.</param>
        /// <param name="limitCheckStatus">limitCheckStatus.</param>
        /// <param name="loadCaseId">loadCaseId.</param>
        /// <param name="loadCase">loadCase.</param>
        /// <param name="maxUnityCheck">maxUnityCheck.</param>
        /// <param name="form">form.</param>
        public WeldCheckResDataIdeaStatiCaConnectionChecks(string joinedItemName = default(string), double designedThickness = default(double), double thickness = default(double), double legSize = default(double), double maxEquivalentStress = default(double), double equivalentStressResistance = default(double), double sigmaPerpendicular = default(double), double sigmaPerpendicularMax = default(double), double sigmaPerpendicularResistance = default(double), double unityCheckStress = default(double), double unityCheckWeld = default(double), double unityCheckBaseMetal = default(double), string materialName = default(string), DataWeldTypeCodeCIBasicTypes? weldType2 = default(DataWeldTypeCodeCIBasicTypes?), bool weldWithContact = default(bool), List<int> items = default(List<int>), List<int> structItems = default(List<int>), double tauy = default(double), double taux = default(double), double tauxwf = default(double), double sigmawf = default(double), double weldArea = default(double), double length = default(double), double lengthElem = default(double), Dictionary<string, Dictionary<string, List<float>>> forcesAllItems = default(Dictionary<string, Dictionary<string, List<float>>>), List<List<double>> weldStressDiagram = default(List<List<double>>), double gammaM0 = default(double), double gammaM2 = default(double), double gammaMfi = default(double), double kwTheta = default(double), double materialFu = default(double), double betaW = default(double), double rnd = default(double), double fn = default(double), double plasticStrain = default(double), int weldEval = default(int), double plasticCapacity = default(double), double plasticCapacityArea = default(double), double plasticCapacityAreaVal = default(double), bool isDetailingStatusOK = default(bool), bool isDetailingStatusForReportOK = default(bool), double theta = default(double), bool isClosedWeld = default(bool), DataWeldCheckMethodHKCIBasicTypes? weldCheckMethodHK = default(DataWeldCheckMethodHKCIBasicTypes?), double phiW = default(double), double omegaW = default(double), double fuw = default(double), DataDetailingDetailingChecksWeldCIBasicTypes checksNonconformities = default(DataDetailingDetailingChecksWeldCIBasicTypes), DataDetailingDetailingChecksWeldCIBasicTypes detailingChecksWeld = default(DataDetailingDetailingChecksWeldCIBasicTypes), double weldResistance = default(double), double weldElemArea = default(double), double xu = default(double), double thetaWeld = default(double), bool aiscDirectionalStrengthIncrease = default(bool), double mw = default(double), double fusionAreaElem = default(double), double fuBaseMetal = default(double), double baseMetalResistance = default(double), double theta1Weld = default(double), double theta2Weld = default(double), double fnWeld = default(double), double lengthElemReduced = default(double), double lengthReduced = default(double), double betaFSNIP = default(double), double betaZSNIP = default(double), double rwfSNIP = default(double), double rwzSNIP = default(double), double gammaC = default(double), double gammaWmSNIP = default(double), double fexx = default(double), double fnbm = default(double), double awe = default(double), double abm = default(double), bool baseMetalCapacity = default(bool), double betaFCHN = default(double), bool isButtWeld = default(bool), double gammaMwIS = default(double), double weldLongitudinalForce = default(double), double weldTransversalForce = default(double), double weldLongitudinalResistance = default(double), double weldTransversalResistance = default(double), double weldThetaHK = default(double), double weldCoeffKHK = default(double), bool isWeldDesignStrengthTableValue = default(bool), bool isEcenWeldMaterialAndElectrode = default(bool), double ue = default(double), double us = default(double), DataWeldPositionSNIPCIBasicTypes? weldPositionSNIP = default(DataWeldPositionSNIPCIBasicTypes?), DataWeldingTypeSNIPCIBasicTypes? weldingTypeSNIP = default(DataWeldingTypeSNIPCIBasicTypes?), double fireTemperature = default(double), bool fireDesign = default(bool), bool isHorizontalTying = default(bool), int id = default(int), string name = default(string), bool checkStatus = default(bool), bool limitCheckStatus = default(bool), int loadCaseId = default(int), string loadCase = default(string), double maxUnityCheck = default(double), string form = default(string))
        {
            this.JoinedItemName = joinedItemName;
            this.DesignedThickness = designedThickness;
            this.Thickness = thickness;
            this.LegSize = legSize;
            this.MaxEquivalentStress = maxEquivalentStress;
            this.EquivalentStressResistance = equivalentStressResistance;
            this.SigmaPerpendicular = sigmaPerpendicular;
            this.SigmaPerpendicularMax = sigmaPerpendicularMax;
            this.SigmaPerpendicularResistance = sigmaPerpendicularResistance;
            this.UnityCheckStress = unityCheckStress;
            this.UnityCheckWeld = unityCheckWeld;
            this.UnityCheckBaseMetal = unityCheckBaseMetal;
            this.MaterialName = materialName;
            this.WeldType2 = weldType2;
            this.WeldWithContact = weldWithContact;
            this.Items = items;
            this.StructItems = structItems;
            this.Tauy = tauy;
            this.Taux = taux;
            this.Tauxwf = tauxwf;
            this.Sigmawf = sigmawf;
            this.WeldArea = weldArea;
            this.Length = length;
            this.LengthElem = lengthElem;
            this.ForcesAllItems = forcesAllItems;
            this.WeldStressDiagram = weldStressDiagram;
            this.GammaM0 = gammaM0;
            this.GammaM2 = gammaM2;
            this.GammaMfi = gammaMfi;
            this.KwTheta = kwTheta;
            this.MaterialFu = materialFu;
            this.BetaW = betaW;
            this.Rnd = rnd;
            this.Fn = fn;
            this.PlasticStrain = plasticStrain;
            this.WeldEval = weldEval;
            this.PlasticCapacity = plasticCapacity;
            this.PlasticCapacityArea = plasticCapacityArea;
            this.PlasticCapacityAreaVal = plasticCapacityAreaVal;
            this.IsDetailingStatusOK = isDetailingStatusOK;
            this.IsDetailingStatusForReportOK = isDetailingStatusForReportOK;
            this.Theta = theta;
            this.IsClosedWeld = isClosedWeld;
            this.WeldCheckMethodHK = weldCheckMethodHK;
            this.PhiW = phiW;
            this.OmegaW = omegaW;
            this.Fuw = fuw;
            this.ChecksNonconformities = checksNonconformities;
            this.DetailingChecksWeld = detailingChecksWeld;
            this.WeldResistance = weldResistance;
            this.WeldElemArea = weldElemArea;
            this.Xu = xu;
            this.ThetaWeld = thetaWeld;
            this.AiscDirectionalStrengthIncrease = aiscDirectionalStrengthIncrease;
            this.Mw = mw;
            this.FusionAreaElem = fusionAreaElem;
            this.FuBaseMetal = fuBaseMetal;
            this.BaseMetalResistance = baseMetalResistance;
            this.Theta1Weld = theta1Weld;
            this.Theta2Weld = theta2Weld;
            this.FnWeld = fnWeld;
            this.LengthElemReduced = lengthElemReduced;
            this.LengthReduced = lengthReduced;
            this.BetaFSNIP = betaFSNIP;
            this.BetaZSNIP = betaZSNIP;
            this.RwfSNIP = rwfSNIP;
            this.RwzSNIP = rwzSNIP;
            this.GammaC = gammaC;
            this.GammaWmSNIP = gammaWmSNIP;
            this.Fexx = fexx;
            this.Fnbm = fnbm;
            this.Awe = awe;
            this.Abm = abm;
            this.BaseMetalCapacity = baseMetalCapacity;
            this.BetaFCHN = betaFCHN;
            this.IsButtWeld = isButtWeld;
            this.GammaMwIS = gammaMwIS;
            this.WeldLongitudinalForce = weldLongitudinalForce;
            this.WeldTransversalForce = weldTransversalForce;
            this.WeldLongitudinalResistance = weldLongitudinalResistance;
            this.WeldTransversalResistance = weldTransversalResistance;
            this.WeldThetaHK = weldThetaHK;
            this.WeldCoeffKHK = weldCoeffKHK;
            this.IsWeldDesignStrengthTableValue = isWeldDesignStrengthTableValue;
            this.IsEcenWeldMaterialAndElectrode = isEcenWeldMaterialAndElectrode;
            this.Ue = ue;
            this.Us = us;
            this.WeldPositionSNIP = weldPositionSNIP;
            this.WeldingTypeSNIP = weldingTypeSNIP;
            this.FireTemperature = fireTemperature;
            this.FireDesign = fireDesign;
            this.IsHorizontalTying = isHorizontalTying;
            this.Id = id;
            this.Name = name;
            this.CheckStatus = checkStatus;
            this.LimitCheckStatus = limitCheckStatus;
            this.LoadCaseId = loadCaseId;
            this.LoadCase = loadCase;
            this.MaxUnityCheck = maxUnityCheck;
            this.Form = form;
        }

        /// <summary>
        /// Gets or Sets JoinedItemName
        /// </summary>
        [DataMember(Name = "joinedItemName", EmitDefaultValue = true)]
        public string JoinedItemName { get; set; }

        /// <summary>
        /// Gets or Sets DesignedThickness
        /// </summary>
        [DataMember(Name = "designedThickness", EmitDefaultValue = false)]
        public double DesignedThickness { get; set; }

        /// <summary>
        /// Gets or Sets Thickness
        /// </summary>
        [DataMember(Name = "thickness", EmitDefaultValue = false)]
        public double Thickness { get; set; }

        /// <summary>
        /// Gets or Sets LegSize
        /// </summary>
        [DataMember(Name = "legSize", EmitDefaultValue = false)]
        public double LegSize { get; set; }

        /// <summary>
        /// Gets or Sets MaxEquivalentStress
        /// </summary>
        [DataMember(Name = "maxEquivalentStress", EmitDefaultValue = false)]
        public double MaxEquivalentStress { get; set; }

        /// <summary>
        /// Gets or Sets EquivalentStressResistance
        /// </summary>
        [DataMember(Name = "equivalentStressResistance", EmitDefaultValue = false)]
        public double EquivalentStressResistance { get; set; }

        /// <summary>
        /// Gets or Sets SigmaPerpendicular
        /// </summary>
        [DataMember(Name = "sigmaPerpendicular", EmitDefaultValue = false)]
        public double SigmaPerpendicular { get; set; }

        /// <summary>
        /// Gets or Sets SigmaPerpendicularMax
        /// </summary>
        [DataMember(Name = "sigmaPerpendicularMax", EmitDefaultValue = false)]
        public double SigmaPerpendicularMax { get; set; }

        /// <summary>
        /// Gets or Sets SigmaPerpendicularResistance
        /// </summary>
        [DataMember(Name = "sigmaPerpendicularResistance", EmitDefaultValue = false)]
        public double SigmaPerpendicularResistance { get; set; }

        /// <summary>
        /// Gets or Sets UnityCheckStress
        /// </summary>
        [DataMember(Name = "unityCheckStress", EmitDefaultValue = false)]
        public double UnityCheckStress { get; set; }

        /// <summary>
        /// Gets or Sets UnityCheckWeld
        /// </summary>
        [DataMember(Name = "unityCheckWeld", EmitDefaultValue = false)]
        public double UnityCheckWeld { get; set; }

        /// <summary>
        /// Gets or Sets UnityCheckBaseMetal
        /// </summary>
        [DataMember(Name = "unityCheckBaseMetal", EmitDefaultValue = false)]
        public double UnityCheckBaseMetal { get; set; }

        /// <summary>
        /// Gets or Sets MaterialName
        /// </summary>
        [DataMember(Name = "materialName", EmitDefaultValue = true)]
        public string MaterialName { get; set; }

        /// <summary>
        /// Gets or Sets WeldWithContact
        /// </summary>
        [DataMember(Name = "weldWithContact", EmitDefaultValue = true)]
        public bool WeldWithContact { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name = "items", EmitDefaultValue = true)]
        public List<int> Items { get; set; }

        /// <summary>
        /// Gets or Sets StructItems
        /// </summary>
        [DataMember(Name = "structItems", EmitDefaultValue = true)]
        public List<int> StructItems { get; set; }

        /// <summary>
        /// Gets or Sets Tauy
        /// </summary>
        [DataMember(Name = "tauy", EmitDefaultValue = false)]
        public double Tauy { get; set; }

        /// <summary>
        /// Gets or Sets Taux
        /// </summary>
        [DataMember(Name = "taux", EmitDefaultValue = false)]
        public double Taux { get; set; }

        /// <summary>
        /// Gets or Sets Tauxwf
        /// </summary>
        [DataMember(Name = "tauxwf", EmitDefaultValue = false)]
        public double Tauxwf { get; set; }

        /// <summary>
        /// Gets or Sets Sigmawf
        /// </summary>
        [DataMember(Name = "sigmawf", EmitDefaultValue = false)]
        public double Sigmawf { get; set; }

        /// <summary>
        /// Gets or Sets WeldArea
        /// </summary>
        [DataMember(Name = "weldArea", EmitDefaultValue = false)]
        public double WeldArea { get; set; }

        /// <summary>
        /// Gets or Sets Length
        /// </summary>
        [DataMember(Name = "length", EmitDefaultValue = false)]
        public double Length { get; set; }

        /// <summary>
        /// Gets or Sets LengthElem
        /// </summary>
        [DataMember(Name = "lengthElem", EmitDefaultValue = false)]
        public double LengthElem { get; set; }

        /// <summary>
        /// Gets or Sets ForcesAllItems
        /// </summary>
        [DataMember(Name = "forcesAllItems", EmitDefaultValue = true)]
        public Dictionary<string, Dictionary<string, List<float>>> ForcesAllItems { get; set; }

        /// <summary>
        /// Gets or Sets WeldStressDiagram
        /// </summary>
        [DataMember(Name = "weldStressDiagram", EmitDefaultValue = true)]
        public List<List<double>> WeldStressDiagram { get; set; }

        /// <summary>
        /// Gets or Sets GammaM0
        /// </summary>
        [DataMember(Name = "gammaM0", EmitDefaultValue = false)]
        public double GammaM0 { get; set; }

        /// <summary>
        /// Gets or Sets GammaM2
        /// </summary>
        [DataMember(Name = "gammaM2", EmitDefaultValue = false)]
        public double GammaM2 { get; set; }

        /// <summary>
        /// Gets or Sets GammaMfi
        /// </summary>
        [DataMember(Name = "gammaMfi", EmitDefaultValue = false)]
        public double GammaMfi { get; set; }

        /// <summary>
        /// Gets or Sets KwTheta
        /// </summary>
        [DataMember(Name = "kwTheta", EmitDefaultValue = false)]
        public double KwTheta { get; set; }

        /// <summary>
        /// Gets or Sets MaterialFu
        /// </summary>
        [DataMember(Name = "materialFu", EmitDefaultValue = false)]
        public double MaterialFu { get; set; }

        /// <summary>
        /// Gets or Sets BetaW
        /// </summary>
        [DataMember(Name = "betaW", EmitDefaultValue = false)]
        public double BetaW { get; set; }

        /// <summary>
        /// Gets or Sets Rnd
        /// </summary>
        [DataMember(Name = "rnd", EmitDefaultValue = false)]
        public double Rnd { get; set; }

        /// <summary>
        /// Gets or Sets Fn
        /// </summary>
        [DataMember(Name = "fn", EmitDefaultValue = false)]
        public double Fn { get; set; }

        /// <summary>
        /// Gets or Sets PlasticStrain
        /// </summary>
        [DataMember(Name = "plasticStrain", EmitDefaultValue = false)]
        public double PlasticStrain { get; set; }

        /// <summary>
        /// Gets or Sets WeldEval
        /// </summary>
        [DataMember(Name = "weldEval", EmitDefaultValue = false)]
        public int WeldEval { get; set; }

        /// <summary>
        /// Gets or Sets PlasticCapacity
        /// </summary>
        [DataMember(Name = "plasticCapacity", EmitDefaultValue = false)]
        public double PlasticCapacity { get; set; }

        /// <summary>
        /// Gets or Sets PlasticCapacityArea
        /// </summary>
        [DataMember(Name = "plasticCapacityArea", EmitDefaultValue = false)]
        public double PlasticCapacityArea { get; set; }

        /// <summary>
        /// Gets or Sets PlasticCapacityAreaVal
        /// </summary>
        [DataMember(Name = "plasticCapacityAreaVal", EmitDefaultValue = false)]
        public double PlasticCapacityAreaVal { get; set; }

        /// <summary>
        /// Gets or Sets IsDetailingStatusOK
        /// </summary>
        [DataMember(Name = "isDetailingStatusOK", EmitDefaultValue = true)]
        public bool IsDetailingStatusOK { get; set; }

        /// <summary>
        /// Gets or Sets IsDetailingStatusForReportOK
        /// </summary>
        [DataMember(Name = "isDetailingStatusForReportOK", EmitDefaultValue = true)]
        public bool IsDetailingStatusForReportOK { get; set; }

        /// <summary>
        /// Gets or Sets Theta
        /// </summary>
        [DataMember(Name = "theta", EmitDefaultValue = false)]
        public double Theta { get; set; }

        /// <summary>
        /// Gets or Sets IsClosedWeld
        /// </summary>
        [DataMember(Name = "isClosedWeld", EmitDefaultValue = true)]
        public bool IsClosedWeld { get; set; }

        /// <summary>
        /// Gets or Sets PhiW
        /// </summary>
        [DataMember(Name = "phiW", EmitDefaultValue = false)]
        public double PhiW { get; set; }

        /// <summary>
        /// Gets or Sets OmegaW
        /// </summary>
        [DataMember(Name = "omegaW", EmitDefaultValue = false)]
        public double OmegaW { get; set; }

        /// <summary>
        /// Gets or Sets Fuw
        /// </summary>
        [DataMember(Name = "fuw", EmitDefaultValue = false)]
        public double Fuw { get; set; }

        /// <summary>
        /// Gets or Sets ChecksNonconformities
        /// </summary>
        [DataMember(Name = "checksNonconformities", EmitDefaultValue = false)]
        public DataDetailingDetailingChecksWeldCIBasicTypes ChecksNonconformities { get; set; }

        /// <summary>
        /// Gets or Sets DetailingChecksWeld
        /// </summary>
        [DataMember(Name = "detailingChecksWeld", EmitDefaultValue = false)]
        public DataDetailingDetailingChecksWeldCIBasicTypes DetailingChecksWeld { get; set; }

        /// <summary>
        /// Gets or Sets WeldResistance
        /// </summary>
        [DataMember(Name = "weldResistance", EmitDefaultValue = false)]
        public double WeldResistance { get; set; }

        /// <summary>
        /// Gets or Sets WeldElemArea
        /// </summary>
        [DataMember(Name = "weldElemArea", EmitDefaultValue = false)]
        public double WeldElemArea { get; set; }

        /// <summary>
        /// Gets or Sets Xu
        /// </summary>
        [DataMember(Name = "xu", EmitDefaultValue = false)]
        public double Xu { get; set; }

        /// <summary>
        /// Gets or Sets ThetaWeld
        /// </summary>
        [DataMember(Name = "thetaWeld", EmitDefaultValue = false)]
        public double ThetaWeld { get; set; }

        /// <summary>
        /// Gets or Sets AiscDirectionalStrengthIncrease
        /// </summary>
        [DataMember(Name = "aiscDirectionalStrengthIncrease", EmitDefaultValue = true)]
        public bool AiscDirectionalStrengthIncrease { get; set; }

        /// <summary>
        /// Gets or Sets Mw
        /// </summary>
        [DataMember(Name = "mw", EmitDefaultValue = false)]
        public double Mw { get; set; }

        /// <summary>
        /// Gets or Sets FusionAreaElem
        /// </summary>
        [DataMember(Name = "fusionAreaElem", EmitDefaultValue = false)]
        public double FusionAreaElem { get; set; }

        /// <summary>
        /// Gets or Sets FuBaseMetal
        /// </summary>
        [DataMember(Name = "fuBaseMetal", EmitDefaultValue = false)]
        public double FuBaseMetal { get; set; }

        /// <summary>
        /// Gets or Sets BaseMetalResistance
        /// </summary>
        [DataMember(Name = "baseMetalResistance", EmitDefaultValue = false)]
        public double BaseMetalResistance { get; set; }

        /// <summary>
        /// Gets or Sets Theta1Weld
        /// </summary>
        [DataMember(Name = "theta1Weld", EmitDefaultValue = false)]
        public double Theta1Weld { get; set; }

        /// <summary>
        /// Gets or Sets Theta2Weld
        /// </summary>
        [DataMember(Name = "theta2Weld", EmitDefaultValue = false)]
        public double Theta2Weld { get; set; }

        /// <summary>
        /// Gets or Sets FnWeld
        /// </summary>
        [DataMember(Name = "fnWeld", EmitDefaultValue = false)]
        public double FnWeld { get; set; }

        /// <summary>
        /// Gets or Sets LengthElemReduced
        /// </summary>
        [DataMember(Name = "lengthElemReduced", EmitDefaultValue = false)]
        public double LengthElemReduced { get; set; }

        /// <summary>
        /// Gets or Sets LengthReduced
        /// </summary>
        [DataMember(Name = "lengthReduced", EmitDefaultValue = false)]
        public double LengthReduced { get; set; }

        /// <summary>
        /// Gets or Sets BetaFSNIP
        /// </summary>
        [DataMember(Name = "betaF_SNIP", EmitDefaultValue = false)]
        public double BetaFSNIP { get; set; }

        /// <summary>
        /// Gets or Sets BetaZSNIP
        /// </summary>
        [DataMember(Name = "betaZ_SNIP", EmitDefaultValue = false)]
        public double BetaZSNIP { get; set; }

        /// <summary>
        /// Gets or Sets RwfSNIP
        /// </summary>
        [DataMember(Name = "rwf_SNIP", EmitDefaultValue = false)]
        public double RwfSNIP { get; set; }

        /// <summary>
        /// Gets or Sets RwzSNIP
        /// </summary>
        [DataMember(Name = "rwz_SNIP", EmitDefaultValue = false)]
        public double RwzSNIP { get; set; }

        /// <summary>
        /// Gets or Sets GammaC
        /// </summary>
        [DataMember(Name = "gammaC", EmitDefaultValue = false)]
        public double GammaC { get; set; }

        /// <summary>
        /// Gets or Sets GammaWmSNIP
        /// </summary>
        [DataMember(Name = "gammaWm_SNIP", EmitDefaultValue = false)]
        public double GammaWmSNIP { get; set; }

        /// <summary>
        /// Gets or Sets Fexx
        /// </summary>
        [DataMember(Name = "fexx", EmitDefaultValue = false)]
        public double Fexx { get; set; }

        /// <summary>
        /// Gets or Sets Fnbm
        /// </summary>
        [DataMember(Name = "fnbm", EmitDefaultValue = false)]
        public double Fnbm { get; set; }

        /// <summary>
        /// Gets or Sets Awe
        /// </summary>
        [DataMember(Name = "awe", EmitDefaultValue = false)]
        public double Awe { get; set; }

        /// <summary>
        /// Gets or Sets Abm
        /// </summary>
        [DataMember(Name = "abm", EmitDefaultValue = false)]
        public double Abm { get; set; }

        /// <summary>
        /// Gets or Sets BaseMetalCapacity
        /// </summary>
        [DataMember(Name = "baseMetalCapacity", EmitDefaultValue = true)]
        public bool BaseMetalCapacity { get; set; }

        /// <summary>
        /// Gets or Sets BetaFCHN
        /// </summary>
        [DataMember(Name = "betaF_CHN", EmitDefaultValue = false)]
        public double BetaFCHN { get; set; }

        /// <summary>
        /// Gets or Sets IsButtWeld
        /// </summary>
        [DataMember(Name = "isButtWeld", EmitDefaultValue = true)]
        public bool IsButtWeld { get; set; }

        /// <summary>
        /// Gets or Sets GammaMwIS
        /// </summary>
        [DataMember(Name = "gammaMw_IS", EmitDefaultValue = false)]
        public double GammaMwIS { get; set; }

        /// <summary>
        /// Gets or Sets WeldLongitudinalForce
        /// </summary>
        [DataMember(Name = "weldLongitudinalForce", EmitDefaultValue = false)]
        public double WeldLongitudinalForce { get; set; }

        /// <summary>
        /// Gets or Sets WeldTransversalForce
        /// </summary>
        [DataMember(Name = "weldTransversalForce", EmitDefaultValue = false)]
        public double WeldTransversalForce { get; set; }

        /// <summary>
        /// Gets or Sets WeldLongitudinalResistance
        /// </summary>
        [DataMember(Name = "weldLongitudinalResistance", EmitDefaultValue = false)]
        public double WeldLongitudinalResistance { get; set; }

        /// <summary>
        /// Gets or Sets WeldTransversalResistance
        /// </summary>
        [DataMember(Name = "weldTransversalResistance", EmitDefaultValue = false)]
        public double WeldTransversalResistance { get; set; }

        /// <summary>
        /// Gets or Sets WeldThetaHK
        /// </summary>
        [DataMember(Name = "weldTheta_HK", EmitDefaultValue = false)]
        public double WeldThetaHK { get; set; }

        /// <summary>
        /// Gets or Sets WeldCoeffKHK
        /// </summary>
        [DataMember(Name = "weldCoeffK_HK", EmitDefaultValue = false)]
        public double WeldCoeffKHK { get; set; }

        /// <summary>
        /// Gets or Sets IsWeldDesignStrengthTableValue
        /// </summary>
        [DataMember(Name = "isWeldDesignStrengthTableValue", EmitDefaultValue = true)]
        public bool IsWeldDesignStrengthTableValue { get; set; }

        /// <summary>
        /// Gets or Sets IsEcenWeldMaterialAndElectrode
        /// </summary>
        [DataMember(Name = "isEcenWeldMaterialAndElectrode", EmitDefaultValue = true)]
        public bool IsEcenWeldMaterialAndElectrode { get; set; }

        /// <summary>
        /// Gets or Sets Ue
        /// </summary>
        [DataMember(Name = "ue", EmitDefaultValue = false)]
        public double Ue { get; set; }

        /// <summary>
        /// Gets or Sets Us
        /// </summary>
        [DataMember(Name = "us", EmitDefaultValue = false)]
        public double Us { get; set; }

        /// <summary>
        /// Gets or Sets FireTemperature
        /// </summary>
        [DataMember(Name = "fireTemperature", EmitDefaultValue = false)]
        public double FireTemperature { get; set; }

        /// <summary>
        /// Gets or Sets FireDesign
        /// </summary>
        [DataMember(Name = "fireDesign", EmitDefaultValue = true)]
        public bool FireDesign { get; set; }

        /// <summary>
        /// Gets or Sets IsHorizontalTying
        /// </summary>
        [DataMember(Name = "isHorizontalTying", EmitDefaultValue = true)]
        public bool IsHorizontalTying { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CheckStatus
        /// </summary>
        [DataMember(Name = "checkStatus", EmitDefaultValue = true)]
        public bool CheckStatus { get; set; }

        /// <summary>
        /// Gets or Sets LimitCheckStatus
        /// </summary>
        [DataMember(Name = "limitCheckStatus", EmitDefaultValue = true)]
        public bool LimitCheckStatus { get; set; }

        /// <summary>
        /// Gets or Sets LoadCaseId
        /// </summary>
        [DataMember(Name = "loadCaseId", EmitDefaultValue = false)]
        public int LoadCaseId { get; set; }

        /// <summary>
        /// Gets or Sets LoadCase
        /// </summary>
        [DataMember(Name = "loadCase", EmitDefaultValue = true)]
        public string LoadCase { get; set; }

        /// <summary>
        /// Gets or Sets MaxUnityCheck
        /// </summary>
        [DataMember(Name = "maxUnityCheck", EmitDefaultValue = false)]
        public double MaxUnityCheck { get; set; }

        /// <summary>
        /// Gets or Sets Form
        /// </summary>
        [DataMember(Name = "form", EmitDefaultValue = true)]
        public string Form { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WeldCheckResDataIdeaStatiCaConnectionChecks {\n");
            sb.Append("  JoinedItemName: ").Append(JoinedItemName).Append("\n");
            sb.Append("  DesignedThickness: ").Append(DesignedThickness).Append("\n");
            sb.Append("  Thickness: ").Append(Thickness).Append("\n");
            sb.Append("  LegSize: ").Append(LegSize).Append("\n");
            sb.Append("  MaxEquivalentStress: ").Append(MaxEquivalentStress).Append("\n");
            sb.Append("  EquivalentStressResistance: ").Append(EquivalentStressResistance).Append("\n");
            sb.Append("  SigmaPerpendicular: ").Append(SigmaPerpendicular).Append("\n");
            sb.Append("  SigmaPerpendicularMax: ").Append(SigmaPerpendicularMax).Append("\n");
            sb.Append("  SigmaPerpendicularResistance: ").Append(SigmaPerpendicularResistance).Append("\n");
            sb.Append("  UnityCheckStress: ").Append(UnityCheckStress).Append("\n");
            sb.Append("  UnityCheckWeld: ").Append(UnityCheckWeld).Append("\n");
            sb.Append("  UnityCheckBaseMetal: ").Append(UnityCheckBaseMetal).Append("\n");
            sb.Append("  MaterialName: ").Append(MaterialName).Append("\n");
            sb.Append("  WeldType2: ").Append(WeldType2).Append("\n");
            sb.Append("  WeldWithContact: ").Append(WeldWithContact).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  StructItems: ").Append(StructItems).Append("\n");
            sb.Append("  Tauy: ").Append(Tauy).Append("\n");
            sb.Append("  Taux: ").Append(Taux).Append("\n");
            sb.Append("  Tauxwf: ").Append(Tauxwf).Append("\n");
            sb.Append("  Sigmawf: ").Append(Sigmawf).Append("\n");
            sb.Append("  WeldArea: ").Append(WeldArea).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  LengthElem: ").Append(LengthElem).Append("\n");
            sb.Append("  ForcesAllItems: ").Append(ForcesAllItems).Append("\n");
            sb.Append("  WeldStressDiagram: ").Append(WeldStressDiagram).Append("\n");
            sb.Append("  GammaM0: ").Append(GammaM0).Append("\n");
            sb.Append("  GammaM2: ").Append(GammaM2).Append("\n");
            sb.Append("  GammaMfi: ").Append(GammaMfi).Append("\n");
            sb.Append("  KwTheta: ").Append(KwTheta).Append("\n");
            sb.Append("  MaterialFu: ").Append(MaterialFu).Append("\n");
            sb.Append("  BetaW: ").Append(BetaW).Append("\n");
            sb.Append("  Rnd: ").Append(Rnd).Append("\n");
            sb.Append("  Fn: ").Append(Fn).Append("\n");
            sb.Append("  PlasticStrain: ").Append(PlasticStrain).Append("\n");
            sb.Append("  WeldEval: ").Append(WeldEval).Append("\n");
            sb.Append("  PlasticCapacity: ").Append(PlasticCapacity).Append("\n");
            sb.Append("  PlasticCapacityArea: ").Append(PlasticCapacityArea).Append("\n");
            sb.Append("  PlasticCapacityAreaVal: ").Append(PlasticCapacityAreaVal).Append("\n");
            sb.Append("  IsDetailingStatusOK: ").Append(IsDetailingStatusOK).Append("\n");
            sb.Append("  IsDetailingStatusForReportOK: ").Append(IsDetailingStatusForReportOK).Append("\n");
            sb.Append("  Theta: ").Append(Theta).Append("\n");
            sb.Append("  IsClosedWeld: ").Append(IsClosedWeld).Append("\n");
            sb.Append("  WeldCheckMethodHK: ").Append(WeldCheckMethodHK).Append("\n");
            sb.Append("  PhiW: ").Append(PhiW).Append("\n");
            sb.Append("  OmegaW: ").Append(OmegaW).Append("\n");
            sb.Append("  Fuw: ").Append(Fuw).Append("\n");
            sb.Append("  ChecksNonconformities: ").Append(ChecksNonconformities).Append("\n");
            sb.Append("  DetailingChecksWeld: ").Append(DetailingChecksWeld).Append("\n");
            sb.Append("  WeldResistance: ").Append(WeldResistance).Append("\n");
            sb.Append("  WeldElemArea: ").Append(WeldElemArea).Append("\n");
            sb.Append("  Xu: ").Append(Xu).Append("\n");
            sb.Append("  ThetaWeld: ").Append(ThetaWeld).Append("\n");
            sb.Append("  AiscDirectionalStrengthIncrease: ").Append(AiscDirectionalStrengthIncrease).Append("\n");
            sb.Append("  Mw: ").Append(Mw).Append("\n");
            sb.Append("  FusionAreaElem: ").Append(FusionAreaElem).Append("\n");
            sb.Append("  FuBaseMetal: ").Append(FuBaseMetal).Append("\n");
            sb.Append("  BaseMetalResistance: ").Append(BaseMetalResistance).Append("\n");
            sb.Append("  Theta1Weld: ").Append(Theta1Weld).Append("\n");
            sb.Append("  Theta2Weld: ").Append(Theta2Weld).Append("\n");
            sb.Append("  FnWeld: ").Append(FnWeld).Append("\n");
            sb.Append("  LengthElemReduced: ").Append(LengthElemReduced).Append("\n");
            sb.Append("  LengthReduced: ").Append(LengthReduced).Append("\n");
            sb.Append("  BetaFSNIP: ").Append(BetaFSNIP).Append("\n");
            sb.Append("  BetaZSNIP: ").Append(BetaZSNIP).Append("\n");
            sb.Append("  RwfSNIP: ").Append(RwfSNIP).Append("\n");
            sb.Append("  RwzSNIP: ").Append(RwzSNIP).Append("\n");
            sb.Append("  GammaC: ").Append(GammaC).Append("\n");
            sb.Append("  GammaWmSNIP: ").Append(GammaWmSNIP).Append("\n");
            sb.Append("  Fexx: ").Append(Fexx).Append("\n");
            sb.Append("  Fnbm: ").Append(Fnbm).Append("\n");
            sb.Append("  Awe: ").Append(Awe).Append("\n");
            sb.Append("  Abm: ").Append(Abm).Append("\n");
            sb.Append("  BaseMetalCapacity: ").Append(BaseMetalCapacity).Append("\n");
            sb.Append("  BetaFCHN: ").Append(BetaFCHN).Append("\n");
            sb.Append("  IsButtWeld: ").Append(IsButtWeld).Append("\n");
            sb.Append("  GammaMwIS: ").Append(GammaMwIS).Append("\n");
            sb.Append("  WeldLongitudinalForce: ").Append(WeldLongitudinalForce).Append("\n");
            sb.Append("  WeldTransversalForce: ").Append(WeldTransversalForce).Append("\n");
            sb.Append("  WeldLongitudinalResistance: ").Append(WeldLongitudinalResistance).Append("\n");
            sb.Append("  WeldTransversalResistance: ").Append(WeldTransversalResistance).Append("\n");
            sb.Append("  WeldThetaHK: ").Append(WeldThetaHK).Append("\n");
            sb.Append("  WeldCoeffKHK: ").Append(WeldCoeffKHK).Append("\n");
            sb.Append("  IsWeldDesignStrengthTableValue: ").Append(IsWeldDesignStrengthTableValue).Append("\n");
            sb.Append("  IsEcenWeldMaterialAndElectrode: ").Append(IsEcenWeldMaterialAndElectrode).Append("\n");
            sb.Append("  Ue: ").Append(Ue).Append("\n");
            sb.Append("  Us: ").Append(Us).Append("\n");
            sb.Append("  WeldPositionSNIP: ").Append(WeldPositionSNIP).Append("\n");
            sb.Append("  WeldingTypeSNIP: ").Append(WeldingTypeSNIP).Append("\n");
            sb.Append("  FireTemperature: ").Append(FireTemperature).Append("\n");
            sb.Append("  FireDesign: ").Append(FireDesign).Append("\n");
            sb.Append("  IsHorizontalTying: ").Append(IsHorizontalTying).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CheckStatus: ").Append(CheckStatus).Append("\n");
            sb.Append("  LimitCheckStatus: ").Append(LimitCheckStatus).Append("\n");
            sb.Append("  LoadCaseId: ").Append(LoadCaseId).Append("\n");
            sb.Append("  LoadCase: ").Append(LoadCase).Append("\n");
            sb.Append("  MaxUnityCheck: ").Append(MaxUnityCheck).Append("\n");
            sb.Append("  Form: ").Append(Form).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
