/**
 * Connection Rest API 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { ConConnection } from '../model/conConnection';
import { ConMissingWeld } from '../model/conMissingWeld';
import { ConOperation } from '../model/conOperation';
import { ConProductionCost } from '../model/conProductionCost';
import { OkObjectResult } from '../model/okObjectResult';
import { Authentication, Interceptor } from '../model/models';
export declare enum ConnectionApiApiKeys {
}
export declare class ConnectionApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: ConnectionApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     *
     * @summary Delete all operations for the connection
     * @param projectId The unique identifier of the opened project in the ConnectionRestApi service
     * @param connectionId Id of the connection to be modified
     */
    deleteOperations(projectId: string, connectionId: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: OkObjectResult;
    }>;
    /**
     *
     * @summary Get data about all connections in the project
     * @param projectId The unique identifier of the opened project in the ConnectionRestApi service
     */
    getAllConnectionsData(projectId: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<ConConnection>;
    }>;
    /**
     *
     * @summary Get data about a specific connection in the project
     * @param projectId The unique identifier of the opened project in the ConnectionRestApi service
     * @param connectionId The id of the requested connection
     */
    getConnectionData(projectId: string, connectionId: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConConnection;
    }>;
    /**
     *
     * @summary Get missing welds in the connection
     * @param projectId The unique identifier of the opened project in the ConnectionRestApi service
     * @param connectionId Id of the requested connection in the project
     */
    getMissingWelds(projectId: string, connectionId: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<ConMissingWeld>;
    }>;
    /**
     *
     * @summary Get the list of operations for the connection
     * @param projectId The unique identifier of the opened project in the ConnectionRestApi service
     * @param connectionId Id of the requested connection
     */
    getOperations(projectId: string, connectionId: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<ConOperation>;
    }>;
    /**
     *
     * @summary Get production cost of the connection
     * @param projectId The unique identifier of the opened project in the ConnectionRestApi service
     * @param connectionId Id of the requested connection
     */
    getProductionCost(projectId: string, connectionId: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConProductionCost;
    }>;
    /**
     *
     * @summary Update data of a specific connection in the project
     * @param projectId The unique identifier of the opened project in the ConnectionRestApi service
     * @param connectionId Id of the connection to be update
     * @param conConnection New connection data to be set
     */
    updateConnectionData(projectId: string, connectionId: number, conConnection?: ConConnection, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConConnection;
    }>;
}
