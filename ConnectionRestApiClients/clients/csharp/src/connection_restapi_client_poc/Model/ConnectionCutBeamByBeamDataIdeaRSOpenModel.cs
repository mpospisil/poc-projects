/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// ConnectionCutBeamByBeamDataIdeaRSOpenModel
    /// </summary>
    [DataContract(Name = "Connection_CutBeamByBeamData-IdeaRS_OpenModel")]
    public partial class ConnectionCutBeamByBeamDataIdeaRSOpenModel : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets WeldType
        /// </summary>
        [DataMember(Name = "weldType", EmitDefaultValue = false)]
        public ConnectionWeldTypeIdeaRSOpenModel? WeldType { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public ConnectionCutMethodIdeaRSOpenModel? Method { get; set; }

        /// <summary>
        /// Gets or Sets Orientation
        /// </summary>
        [DataMember(Name = "orientation", EmitDefaultValue = false)]
        public ConnectionCutOrientationIdeaRSOpenModel? Orientation { get; set; }

        /// <summary>
        /// Gets or Sets PlaneOnCuttingObject
        /// </summary>
        [DataMember(Name = "planeOnCuttingObject", EmitDefaultValue = false)]
        public ConnectionDistanceComparisonIdeaRSOpenModel? PlaneOnCuttingObject { get; set; }

        /// <summary>
        /// Gets or Sets CutPart
        /// </summary>
        [DataMember(Name = "cutPart", EmitDefaultValue = false)]
        public ConnectionCutPartIdeaRSOpenModel? CutPart { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionCutBeamByBeamDataIdeaRSOpenModel" /> class.
        /// </summary>
        /// <param name="modifiedObject">modifiedObject.</param>
        /// <param name="cuttingObject">cuttingObject.</param>
        /// <param name="isWeld">isWeld.</param>
        /// <param name="weldThickness">weldThickness.</param>
        /// <param name="weldType">weldType.</param>
        /// <param name="offset">offset.</param>
        /// <param name="method">method.</param>
        /// <param name="orientation">orientation.</param>
        /// <param name="planeOnCuttingObject">planeOnCuttingObject.</param>
        /// <param name="cutPart">cutPart.</param>
        public ConnectionCutBeamByBeamDataIdeaRSOpenModel(ReferenceElementIdeaRSOpenModel modifiedObject = default(ReferenceElementIdeaRSOpenModel), ReferenceElementIdeaRSOpenModel cuttingObject = default(ReferenceElementIdeaRSOpenModel), bool isWeld = default(bool), double weldThickness = default(double), ConnectionWeldTypeIdeaRSOpenModel? weldType = default(ConnectionWeldTypeIdeaRSOpenModel?), double offset = default(double), ConnectionCutMethodIdeaRSOpenModel? method = default(ConnectionCutMethodIdeaRSOpenModel?), ConnectionCutOrientationIdeaRSOpenModel? orientation = default(ConnectionCutOrientationIdeaRSOpenModel?), ConnectionDistanceComparisonIdeaRSOpenModel? planeOnCuttingObject = default(ConnectionDistanceComparisonIdeaRSOpenModel?), ConnectionCutPartIdeaRSOpenModel? cutPart = default(ConnectionCutPartIdeaRSOpenModel?))
        {
            this.ModifiedObject = modifiedObject;
            this.CuttingObject = cuttingObject;
            this.IsWeld = isWeld;
            this.WeldThickness = weldThickness;
            this.WeldType = weldType;
            this.Offset = offset;
            this.Method = method;
            this.Orientation = orientation;
            this.PlaneOnCuttingObject = planeOnCuttingObject;
            this.CutPart = cutPart;
        }

        /// <summary>
        /// Gets or Sets ModifiedObject
        /// </summary>
        [DataMember(Name = "modifiedObject", EmitDefaultValue = false)]
        public ReferenceElementIdeaRSOpenModel ModifiedObject { get; set; }

        /// <summary>
        /// Gets or Sets CuttingObject
        /// </summary>
        [DataMember(Name = "cuttingObject", EmitDefaultValue = false)]
        public ReferenceElementIdeaRSOpenModel CuttingObject { get; set; }

        /// <summary>
        /// Gets or Sets IsWeld
        /// </summary>
        [DataMember(Name = "isWeld", EmitDefaultValue = true)]
        public bool IsWeld { get; set; }

        /// <summary>
        /// Gets or Sets WeldThickness
        /// </summary>
        [DataMember(Name = "weldThickness", EmitDefaultValue = false)]
        public double WeldThickness { get; set; }

        /// <summary>
        /// Gets or Sets Offset
        /// </summary>
        [DataMember(Name = "offset", EmitDefaultValue = false)]
        public double Offset { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectionCutBeamByBeamDataIdeaRSOpenModel {\n");
            sb.Append("  ModifiedObject: ").Append(ModifiedObject).Append("\n");
            sb.Append("  CuttingObject: ").Append(CuttingObject).Append("\n");
            sb.Append("  IsWeld: ").Append(IsWeld).Append("\n");
            sb.Append("  WeldThickness: ").Append(WeldThickness).Append("\n");
            sb.Append("  WeldType: ").Append(WeldType).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Orientation: ").Append(Orientation).Append("\n");
            sb.Append("  PlaneOnCuttingObject: ").Append(PlaneOnCuttingObject).Append("\n");
            sb.Append("  CutPart: ").Append(CutPart).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
