{
  "openapi": "3.0.1",
  "info": {
    "title": "Connection Rest API 1.0",
    "version": "1.0"
  },
  "paths": {
    "/api/1/projects/{projectId}/calculate": {
      "post": {
        "tags": [
          "Calculation"
        ],
        "summary": "Run CBFEM caluclation and return the summary of the results",
        "operationId": "Calculate",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of connections to calculate and a type of CBFEM analysis",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConCalculationParameter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConResultSummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/results": {
      "post": {
        "tags": [
          "Calculation"
        ],
        "summary": "Get detailed results of the CBFEM analysis",
        "operationId": "GetResults",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "List of connections to calculate and a type of CBFEM analysis",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConCalculationParameter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConnectionCheckRes"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/rawresults-text": {
      "post": {
        "tags": [
          "Calculation"
        ],
        "summary": "Get json string which represents raw CBFEM results (an instance of CheckResultsData)",
        "operationId": "GetRawJsonResults",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened connection in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Type of requested analysis and connection to calculate",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConCalculationParameter"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Get data about all connections in the project",
        "operationId": "GetAllConnectionsData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConConnection"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Get data about a specific connection in the project",
        "operationId": "GetConnectionData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "The id of the requested connection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConConnection"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Connection"
        ],
        "summary": "Update data of a specific connection in the project",
        "operationId": "UpdateConnectionData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to be update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New connection data to be set",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConConnection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConConnection"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/operations": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Get the list of operations for the connection",
        "operationId": "GetOperations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the requested connection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConOperation"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Connection"
        ],
        "summary": "Delete all operations for the connection",
        "operationId": "DeleteOperations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to be modified",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OkObjectResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/missing-welds": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Get missing welds in the connection",
        "operationId": "GetMissingWelds",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the requested connection in the project",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConMissingWeld"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/production-cost": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Get production cost of the connection",
        "operationId": "GetProductionCost",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the requested connection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConProductionCost"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/export-iom": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export connection to XML which includes https://github.com/idea-statica/ideastatica-public/blob/main/src/IdeaRS.OpenModel/OpenModelContainer.cs",
        "operationId": "ExportIomXml",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/export-iom-connection-data": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Get https://github.com/idea-statica/ideastatica-public/blob/main/src/IdeaRS.OpenModel/Connection/ConnectionData.cs for required connection",
        "operationId": "ExportConnectionData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionData"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionData"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/export-ifc": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Export connection to IFC format",
        "operationId": "ExportConnectionIFC",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStream"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/load-effects": {
      "get": {
        "tags": [
          "LoadEffect"
        ],
        "summary": "Get all load effects which are defined in connectionId",
        "operationId": "GetLoadEffects",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isPercentage",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConLoadEffect"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "LoadEffect"
        ],
        "summary": "Add new load effect to the connection",
        "operationId": "AddLoadEffect",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConLoadEffect"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoadEffectData"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/load-effects/{loadEffectId}": {
      "get": {
        "tags": [
          "LoadEffect"
        ],
        "summary": "Get load impulses from loadEffectId",
        "operationId": "GetLoadEffect",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadEffectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isPercentage",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConLoadEffect"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "LoadEffect"
        ],
        "summary": "Update load impulses in loadEffectId",
        "operationId": "UpdateLoadEffect",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadEffectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConLoadEffect"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConLoadEffect"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LoadEffect"
        ],
        "summary": "Delete load effect loadEffectId",
        "operationId": "DeleteLoadEffect",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadEffectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/load-effects/set-equilibrium": {
      "post": {
        "tags": [
          "LoadEffect"
        ],
        "summary": "Update the option 'LoadsInEquilibrium' for connectionId",
        "operationId": "SetLoadsInEquilibrium",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "loadsInEquilibrium",
            "in": "query",
            "description": "Value to be set",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials which are used in the project projectId",
        "operationId": "GetAllMaterials",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials/steel": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials which are used in the project projectId",
        "operationId": "GetSteelMaterials",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Add material to the project",
        "operationId": "AddMaterialSteel",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of a new material to be added to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMprlElement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMprlElement"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials/concrete": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials which are used in the project projectId",
        "operationId": "GetConcreteMaterials",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Add material to the project",
        "operationId": "AddMaterialConcrete",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of a new material to be added to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMprlElement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMprlElement"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials/bolt-grade": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials which are used in the project projectId",
        "operationId": "GetBlotGradeMaterials",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Add material to the project",
        "operationId": "AddMaterialBoltGrade",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of a new material to be added to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMprlElement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMprlElement"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials/welding": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials which are used in the project projectId",
        "operationId": "GetWeldingMaterials",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Add material to the project",
        "operationId": "AddMaterialWeld",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of a new material to be added to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMprlElement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMprlElement"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials/cross-sections": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get cross sections which are used in the project projectId",
        "operationId": "GetCrossSections",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Add cross section to the project",
        "operationId": "AddCrossSection",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of a new cross-section to be added to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMprlCrossSection"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMprlCrossSection"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/materials/bolt-assemblies": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get bolt assemblies which are used in the project projectId",
        "operationId": "GetBoltAssemblies",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Material"
        ],
        "summary": "Add bolt assembly to the project",
        "operationId": "AddBoltAssembly",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Definition of a new bolt assemby to be added to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMprlElement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMprlElement"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/members": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get information about all members in the connection",
        "operationId": "GetAllMemberData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to get its members",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConMember"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/members/{memberId}": {
      "get": {
        "tags": [
          "Member"
        ],
        "summary": "Get information about the requires member in the connection",
        "operationId": "GetMemberData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to get its member",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "Id of the requested member in the connection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMember"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Member"
        ],
        "summary": "Update the member in the connection by newMemberData",
        "operationId": "UpdateMember",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to to update is member memberId",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "memberId",
            "in": "path",
            "description": "Id of the member to be updated in the connection",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New member data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConMember"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConMember"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/parameters": {
      "get": {
        "tags": [
          "Parameter"
        ],
        "summary": "Get all parameters which are defined for projectId and connectionId",
        "operationId": "GetParameters",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to get its parameters",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeHidden",
            "in": "query",
            "description": "Include also hidden parameters",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdeaParameter"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Parameter"
        ],
        "summary": "Update parameters for the connection connectionId in the project projectId by values passed in parameters",
        "operationId": "UpdateParameters",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to apply template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "New values of parameters",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IdeaParameterUpdate"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParameterData"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/evaluate-expression": {
      "post": {
        "tags": [
          "Parameter"
        ],
        "summary": "Evaluate the expression and return the result",
        "operationId": "EvaluateExpression",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to use for evaluation expression",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Expression to evaluate",
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/presentation": {
      "get": {
        "tags": [
          "Presentation"
        ],
        "summary": "Returns data for scene3D",
        "operationId": "GetDataScene3D",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the open project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to be presented to scene3D",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DrawData"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/presentation/text": {
      "get": {
        "tags": [
          "Presentation"
        ],
        "summary": "Return serialized data for scene3D in json format",
        "operationId": "GetDataScene3DText",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/connect-client": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Connect a client to the ConnectionRestApi service. Method returns a unique identifier of the client.",
        "operationId": "ConnectClient",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/open": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Open ideacon project which is passed in the body of the request\r\nTODO - should be the parameter of the method",
        "operationId": "OpenProject",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConProject"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/upload-ideacon": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Open ideacon project from ideaConFile",
        "operationId": "UploadIdeaCon",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ideaConFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "ideaConFile": {
                  "style": "form"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "ideaConFile": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "ideaConFile": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConProject"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/close": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Close the project. Needed for releasing resources in the service.",
        "operationId": "CloseProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the project to be closed",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get the list of projects in the service which were opened by the client which was connected by M:IdeaStatiCa.ConnectionRestApi.Controllers.ProjectController.ConnectClient",
        "operationId": "GetActiveProjects",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConProject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/download": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Download the actual ideacon project from the service. It includes alle changes which were made by previous API calls.",
        "operationId": "DownloadProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStream"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStream"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/project-data": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get data of the project.",
        "operationId": "GetProjectData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the requested project",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConProjectData"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/import-iom-file": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Creates an IDEA Connection project. IOM is passed in the body of the request.",
        "operationId": "ImportIOM",
        "parameters": [
          {
            "name": "ConnectionsToCreate",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConProject"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/import-iom": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Creates an IDEA Connection project from model (model and results)",
        "operationId": "ImportIOMContainer",
        "parameters": [
          {
            "name": "ConnectionsToCreate",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OpenModelContainer"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenModelContainer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConProject"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/update-iom-file": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Update an IDEA Connection project based on OpenModelContainer (model and results). IOM is passed in the body of the request.",
        "operationId": "UpdateFromIOM",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/update-iom": {
      "post": {
        "tags": [
          "Project"
        ],
        "summary": "Update an IDEA Connection project by model (model and results)",
        "operationId": "UpdateFromIOMContainer",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/OpenModelContainer"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OpenModelContainer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connection-setup": {
      "get": {
        "tags": [
          "Project"
        ],
        "summary": "Get setup from project",
        "operationId": "GetSetup",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service to get setup",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionSetup"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project"
        ],
        "summary": "Update setup of the project",
        "operationId": "UpdateSetup",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service to update project setup",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConnectionSetup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionSetup"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/reports/{connectionId}/pdf": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Generates report for projectId and connectionId",
        "operationId": "GeneratePdf",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStream"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStream"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/reports/{connectionId}/word": {
      "get": {
        "tags": [
          "Report"
        ],
        "summary": "Generates report for projectId and connectionId",
        "operationId": "GenerateWord",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStream"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemoryStream"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/get-template": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Create a template for the connection connectionId in the project projectId",
        "operationId": "CreateConTemplate",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to be converted to a template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/get-default-mapping": {
      "post": {
        "tags": [
          "Template"
        ],
        "summary": "Get the default mappings for the application of the connection template passed in templateToApply\r\non connectionId in the project projectId",
        "description": "The result IdeaStatiCa.Api.Connection.Model.TemplateConversionsDefault mapping to apply the passed template.\r\nIt can be modified by a user and used for the application of a template M:IdeaStatiCa.ConnectionRestApi.Controllers.TemplateController.ApplyConnectionTemplateAsync(System.Guid,System.Int32,IdeaStatiCa.Api.Connection.Model.ConTemplateApplyParam) method.",
        "operationId": "GetDefaultTemplateMapping",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection to get default mapping",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Data of the template to get default mapping",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConTemplateMappingGetParam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateConversions"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/projects/{projectId}/connections/{connectionId}/apply-template": {
      "post": {
        "tags": [
          "Template"
        ],
        "summary": "Apply the connection template applyTemplateParam on the connection connectionId in the project projectId",
        "operationId": "ApplyTemplate",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The unique identifier of the opened project in the ConnectionRestApi service",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "connectionId",
            "in": "path",
            "description": "Id of the connection where to apply the template",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Template to apply",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConTemplateApplyParam"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConTemplateApplyResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/1/version": {
      "get": {
        "tags": [
          "Version"
        ],
        "operationId": "GetVersion",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Anchor3D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of Anchor 3D in IDEA StatiCa Detail"
      },
      "AnchorGrid": {
        "type": "object",
        "properties": {
          "concreteBlock": {
            "$ref": "#/components/schemas/ConcreteBlock"
          },
          "anchorType": {
            "$ref": "#/components/schemas/AnchorType"
          },
          "washerSize": {
            "type": "number",
            "description": "Washer Size used if AnchorType is washer",
            "format": "double"
          },
          "boltAssemblyRef": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Unique Id of the bolt grid",
            "format": "int32"
          },
          "isAnchor": {
            "type": "boolean",
            "description": "Is Anchor"
          },
          "anchorLen": {
            "type": "number",
            "description": "Anchor lenght",
            "format": "double"
          },
          "holeDiameter": {
            "type": "number",
            "description": "The diameter of the hole",
            "format": "double"
          },
          "diameter": {
            "type": "number",
            "description": "The diameter of bolt",
            "format": "double"
          },
          "headDiameter": {
            "type": "number",
            "description": "The head diameter of bolt",
            "format": "double"
          },
          "diagonalHeadDiameter": {
            "type": "number",
            "description": "The Diagonal Head Diameter of bolt",
            "format": "double"
          },
          "headHeight": {
            "type": "number",
            "description": "The Head Height of bolt",
            "format": "double"
          },
          "boreHole": {
            "type": "number",
            "description": "The BoreHole of bolt",
            "format": "double"
          },
          "tensileStressArea": {
            "type": "number",
            "description": "The Tensile Stress Area of bolt",
            "format": "double"
          },
          "nutThickness": {
            "type": "number",
            "description": "The Nut Thickness of bolt",
            "format": "double"
          },
          "boltAssemblyName": {
            "type": "string",
            "description": "The description of the bolt assembly",
            "nullable": true
          },
          "standard": {
            "type": "string",
            "description": "The standard of the bolt assembly",
            "nullable": true
          },
          "material": {
            "type": "string",
            "description": "The material of the bolt assembly",
            "nullable": true
          },
          "origin": {
            "$ref": "#/components/schemas/Point3D"
          },
          "axisX": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisY": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisZ": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point3D"
            },
            "description": "Positions of holes in the local coodinate system of the bolt grid",
            "nullable": true
          },
          "connectedPlates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Identifiers of the connected plates",
            "nullable": true
          },
          "connectedPartIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Id of the weld",
            "nullable": true
          },
          "shearInThread": {
            "type": "boolean",
            "description": "Indicates, whether a shear plane is in the thread of a bolt."
          },
          "boltInteraction": {
            "$ref": "#/components/schemas/BoltShearType"
          }
        },
        "additionalProperties": false,
        "description": "Data of the anchor grid"
      },
      "AnchorType": {
        "enum": [
          "straight",
          "washerPlateCircular",
          "washerPlateRectangular"
        ],
        "type": "string",
        "description": "Defines a type of anchor end."
      },
      "ArcSegment3D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents an arc segment in three-dimensional space."
      },
      "BasePlate3D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of Base Plate 3D in IDEA StatiCa Detail"
      },
      "BaseTemplateConversion": {
        "type": "object",
        "properties": {
          "originalValue": {
            "type": "string",
            "nullable": true
          },
          "originalTemplateId": {
            "type": "string",
            "nullable": true
          },
          "newValue": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "newTemplateId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Beam": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of 1D member in IDEA StatiCa Detail"
      },
      "BeamData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the beam",
            "nullable": true
          },
          "plates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlateData"
            },
            "description": "Plates of the beam",
            "nullable": true
          },
          "crossSectionType": {
            "type": "string",
            "description": "Type of cross section",
            "nullable": true
          },
          "mprlName": {
            "type": "string",
            "description": "MPRL name of beam",
            "nullable": true
          },
          "originalModelId": {
            "type": "string",
            "description": "Get or set the identification in the original model\r\nIn the case of the imported connection from another application",
            "nullable": true
          },
          "cuts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CutData"
            },
            "description": "Cuts on the beam",
            "nullable": true
          },
          "isAdded": {
            "type": "boolean",
            "description": "Is added beam"
          },
          "addedMemberLength": {
            "type": "number",
            "description": "Added beam lenght",
            "format": "double"
          },
          "isNegativeObject": {
            "type": "boolean",
            "description": "Is negative object"
          },
          "addedMember": {
            "$ref": "#/components/schemas/ReferenceElement"
          },
          "mirrorY": {
            "type": "boolean",
            "description": "Mirror by Y"
          },
          "refLineInCenterOfGravity": {
            "type": "boolean",
            "description": "The reference line of the member is in the center of gravity of the cross-section"
          },
          "isBearingMember": {
            "type": "boolean",
            "description": "Is beam bearing member"
          },
          "autoAddCutByWorkplane": {
            "type": "boolean",
            "description": "Automaticali add cut by workplane if it not defined"
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the connected beam"
      },
      "BendData": {
        "type": "object",
        "properties": {
          "plate1Id": {
            "type": "integer",
            "description": "First plate",
            "format": "int32"
          },
          "plate2Id": {
            "type": "integer",
            "description": "Second plate",
            "format": "int32"
          },
          "radius": {
            "type": "number",
            "description": "Radius of bend",
            "format": "double"
          },
          "point1OfSideBoundary1": {
            "$ref": "#/components/schemas/Point3D"
          },
          "point2OfSideBoundary1": {
            "$ref": "#/components/schemas/Point3D"
          },
          "endFaceNormal1": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "point1OfSideBoundary2": {
            "$ref": "#/components/schemas/Point3D"
          },
          "point2OfSideBoundary2": {
            "$ref": "#/components/schemas/Point3D"
          }
        },
        "additionalProperties": false,
        "description": "Provides data of bend"
      },
      "BoltGrid": {
        "type": "object",
        "properties": {
          "boltAssemblyRef": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Unique Id of the bolt grid",
            "format": "int32"
          },
          "isAnchor": {
            "type": "boolean",
            "description": "Is Anchor"
          },
          "anchorLen": {
            "type": "number",
            "description": "Anchor lenght",
            "format": "double"
          },
          "holeDiameter": {
            "type": "number",
            "description": "The diameter of the hole",
            "format": "double"
          },
          "diameter": {
            "type": "number",
            "description": "The diameter of bolt",
            "format": "double"
          },
          "headDiameter": {
            "type": "number",
            "description": "The head diameter of bolt",
            "format": "double"
          },
          "diagonalHeadDiameter": {
            "type": "number",
            "description": "The Diagonal Head Diameter of bolt",
            "format": "double"
          },
          "headHeight": {
            "type": "number",
            "description": "The Head Height of bolt",
            "format": "double"
          },
          "boreHole": {
            "type": "number",
            "description": "The BoreHole of bolt",
            "format": "double"
          },
          "tensileStressArea": {
            "type": "number",
            "description": "The Tensile Stress Area of bolt",
            "format": "double"
          },
          "nutThickness": {
            "type": "number",
            "description": "The Nut Thickness of bolt",
            "format": "double"
          },
          "boltAssemblyName": {
            "type": "string",
            "description": "The description of the bolt assembly",
            "nullable": true
          },
          "standard": {
            "type": "string",
            "description": "The standard of the bolt assembly",
            "nullable": true
          },
          "material": {
            "type": "string",
            "description": "The material of the bolt assembly",
            "nullable": true
          },
          "origin": {
            "$ref": "#/components/schemas/Point3D"
          },
          "axisX": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisY": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisZ": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point3D"
            },
            "description": "Positions of holes in the local coodinate system of the bolt grid",
            "nullable": true
          },
          "connectedPlates": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Identifiers of the connected plates",
            "nullable": true
          },
          "connectedPartIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Id of the weld",
            "nullable": true
          },
          "shearInThread": {
            "type": "boolean",
            "description": "Indicates, whether a shear plane is in the thread of a bolt."
          },
          "boltInteraction": {
            "$ref": "#/components/schemas/BoltShearType"
          }
        },
        "additionalProperties": false,
        "description": "Data of the bolt grid"
      },
      "BoltShearType": {
        "enum": [
          "bearing",
          "interaction",
          "friction"
        ],
        "type": "string",
        "description": "Defines a transfer of shear force in bolts."
      },
      "BucklingRes": {
        "type": "object",
        "properties": {
          "loadCaseId": {
            "type": "integer",
            "format": "int32"
          },
          "shape": {
            "type": "integer",
            "description": "Shape lc calculated by solver",
            "format": "int32"
          },
          "factor": {
            "type": "number",
            "description": "Buckling factor",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Results of the buckling analysis"
      },
      "CheckMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Check member base class"
      },
      "CheckResAnchor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "unityCheck": {
            "type": "number",
            "description": "Unity Check",
            "format": "double"
          },
          "checkStatus": {
            "type": "boolean",
            "description": "Status of the Check"
          }
        },
        "additionalProperties": false,
        "description": "Check value for Anchor"
      },
      "CheckResBolt": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "unityCheck": {
            "type": "number",
            "description": "Unity Check",
            "format": "double"
          },
          "checkStatus": {
            "type": "boolean",
            "description": "Status of the Check"
          }
        },
        "additionalProperties": false,
        "description": "Check value for Bolts"
      },
      "CheckResConcreteBlock": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Concrete Block",
            "nullable": true
          },
          "unityCheck": {
            "type": "number",
            "description": "Unity Check",
            "format": "double"
          },
          "checkStatus": {
            "type": "boolean",
            "description": "Status of the Check"
          },
          "loadCaseId": {
            "type": "integer",
            "description": "Id of Load Case",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Check value for Concrete Block"
      },
      "CheckResPlate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Plate",
            "nullable": true
          },
          "checkStatus": {
            "type": "boolean",
            "description": "Status of the Check"
          },
          "loadCaseId": {
            "type": "integer",
            "description": "Id of Load Case",
            "format": "int32"
          },
          "maxStrain": {
            "type": "number",
            "description": "Max Strain",
            "format": "double"
          },
          "maxStress": {
            "type": "number",
            "description": "Max Stress",
            "format": "double"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "In case of presentation of groups plates (uncoiled beams)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Check value for Plate"
      },
      "CheckResSummary": {
        "type": "object",
        "properties": {
          "checkValue": {
            "type": "number",
            "description": "Check value",
            "format": "double"
          },
          "checkStatus": {
            "type": "boolean",
            "description": "Status of check"
          },
          "loadCaseId": {
            "type": "integer",
            "description": "Id of Load Case",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name",
            "nullable": true
          },
          "unityCheckMessage": {
            "type": "string",
            "description": "Detail message about overall check",
            "nullable": true
          },
          "skipped": {
            "type": "boolean",
            "description": "Whether the check was calculated or not.\r\nIf true, the check was not calculated and IdeaRS.OpenModel.Connection.CheckResSummary.CheckValue should be ignored, otherwise false."
          }
        },
        "additionalProperties": false,
        "description": "Check summary"
      },
      "CheckResWeld": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of Weld",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Unique id of weld",
            "format": "int32"
          },
          "unityCheck": {
            "type": "number",
            "description": "Unity Check Stress",
            "format": "double"
          },
          "checkStatus": {
            "type": "boolean",
            "description": "Status of the Check"
          },
          "loadCaseId": {
            "type": "integer",
            "description": "Id of Load Case",
            "format": "int32"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "In case of presentation of groups plates (uncoiled beams)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Check value for Weld"
      },
      "CheckSection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Check section base class"
      },
      "CombiInput": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Basic class combination"
      },
      "ConAnalysisTypeEnum": {
        "enum": [
          "stress_Strain",
          "stiffness",
          "capacity_Design",
          "fatigues",
          "total_Design",
          "horizontalTying",
          "capacityLoadLevels",
          "fireRestance",
          "buckling"
        ],
        "type": "string"
      },
      "ConCalculationParameter": {
        "type": "object",
        "properties": {
          "connectionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "analysisType": {
            "$ref": "#/components/schemas/ConAnalysisTypeEnum"
          }
        },
        "additionalProperties": false
      },
      "ConConnection": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "identifier": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "analysisType": {
            "$ref": "#/components/schemas/ConAnalysisTypeEnum"
          },
          "loadOptions": {
            "$ref": "#/components/schemas/ConLoadingOptions"
          },
          "bearingMemberId": {
            "type": "integer",
            "format": "int32"
          },
          "isCalculated": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ConLoadEffect": {
        "type": "object",
        "properties": {
          "isPercentage": {
            "type": "boolean"
          },
          "memberLoadings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConLoadEffectMemberLoad"
            },
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ConLoadEffectMemberLoad": {
        "type": "object",
        "properties": {
          "memberId": {
            "type": "integer",
            "format": "int32"
          },
          "position": {
            "$ref": "#/components/schemas/ConLoadEffectPositionEnum"
          },
          "sectionLoad": {
            "$ref": "#/components/schemas/ConLoadEffectSectionLoad"
          }
        },
        "additionalProperties": false
      },
      "ConLoadEffectPositionEnum": {
        "enum": [
          "End",
          "Begin"
        ],
        "type": "string"
      },
      "ConLoadEffectSectionLoad": {
        "type": "object",
        "properties": {
          "n": {
            "type": "number",
            "format": "double"
          },
          "vy": {
            "type": "number",
            "format": "double"
          },
          "vz": {
            "type": "number",
            "format": "double"
          },
          "mx": {
            "type": "number",
            "format": "double"
          },
          "my": {
            "type": "number",
            "format": "double"
          },
          "mz": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ConLoadingOptions": {
        "type": "object",
        "properties": {
          "loadsInEquilibrium": {
            "type": "boolean"
          },
          "loadsInPercentage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ConMember": {
        "type": "object",
        "properties": {
          "isContinuous": {
            "type": "boolean"
          },
          "crossSectionId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "mirrorY": {
            "type": "boolean",
            "nullable": true
          },
          "mirrorZ": {
            "type": "boolean",
            "nullable": true
          },
          "isBearing": {
            "type": "boolean"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ConMissingWeld": {
        "type": "object",
        "properties": {
          "edgePlate": {
            "type": "string",
            "nullable": true
          },
          "surfacePlate": {
            "type": "string",
            "nullable": true
          },
          "edgeIndex": {
            "type": "integer",
            "format": "int32"
          },
          "surfaceIndex": {
            "type": "integer",
            "format": "int32"
          },
          "weldSize": {
            "type": "number",
            "format": "double"
          },
          "weldTypeCode": {
            "type": "string",
            "nullable": true
          },
          "weldMaterialName": {
            "type": "string",
            "nullable": true
          },
          "isHollow_OrUncoiledSection": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ConMprlCrossSection": {
        "type": "object",
        "properties": {
          "materialName": {
            "type": "string",
            "nullable": true
          },
          "mprlName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConMprlElement": {
        "type": "object",
        "properties": {
          "mprlName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConOperation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "isImported": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ConProductionCost": {
        "type": "object",
        "properties": {
          "totalEstimatedCost": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "ConProject": {
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "format": "uuid"
          },
          "projectInfo": {
            "$ref": "#/components/schemas/ConProjectData"
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConConnection"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConProjectData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "projectNumber": {
            "type": "string",
            "nullable": true
          },
          "author": {
            "type": "string",
            "nullable": true
          },
          "designCode": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ConResultSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "passed": {
            "type": "boolean"
          },
          "resultSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConTemplateApplyParam": {
        "type": "object",
        "properties": {
          "connectionTemplate": {
            "type": "string",
            "nullable": true
          },
          "mapping": {
            "$ref": "#/components/schemas/TemplateConversions"
          }
        },
        "additionalProperties": false
      },
      "ConTemplateApplyResult": {
        "type": "object",
        "additionalProperties": false
      },
      "ConTemplateMappingGetParam": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConcreteBlock": {
        "type": "object",
        "properties": {
          "lenght": {
            "type": "number",
            "description": "Lenght of ConcreteBlock",
            "format": "double"
          },
          "width": {
            "type": "number",
            "description": "Width of ConcreteBlock",
            "format": "double"
          },
          "height": {
            "type": "number",
            "description": "Height of ConcreteBlock",
            "format": "double"
          },
          "material": {
            "type": "string",
            "description": "Material of ConcreteBlock",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Data of concrete block"
      },
      "ConcreteBlockData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Plate unique ID",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the concrete block",
            "nullable": true
          },
          "depth": {
            "type": "number",
            "description": "Depth of the concrete block",
            "format": "double"
          },
          "material": {
            "type": "string",
            "description": "Name of the material",
            "nullable": true
          },
          "center": {
            "$ref": "#/components/schemas/Point3D"
          },
          "outlinePoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point2D"
            },
            "description": "Outline points",
            "nullable": true
          },
          "origin": {
            "$ref": "#/components/schemas/Point3D"
          },
          "axisX": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisY": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisZ": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "region": {
            "type": "string",
            "description": "Geometry of the concrete block in svg format",
            "nullable": true
          },
          "originalModelId": {
            "type": "string",
            "description": "Get or set the identification in the original model\r\nIn the case of the imported connection from another application",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the single concrete block"
      },
      "ConcreteSetup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Concrete setup base class"
      },
      "ConeBreakoutCheckType": {
        "enum": [
          "both",
          "tension",
          "shear",
          "none"
        ],
        "type": "string",
        "description": "Types of cone breakout checks"
      },
      "ConnectionCheckRes": {
        "type": "object",
        "properties": {
          "checkResSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResSummary"
            },
            "description": "List of CheckResSummary",
            "nullable": true
          },
          "checkResPlate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResPlate"
            },
            "description": "List of check results for plates",
            "nullable": true
          },
          "checkResWeld": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResWeld"
            },
            "description": "List of check results for welds",
            "nullable": true
          },
          "checkResBolt": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResBolt"
            },
            "description": "List of check results for bolts",
            "nullable": true
          },
          "checkResAnchor": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResAnchor"
            },
            "description": "List of check results for anchors",
            "nullable": true
          },
          "checkResConcreteBlock": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckResConcreteBlock"
            },
            "description": "List of check results for concrete blocks",
            "nullable": true
          },
          "bucklingResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BucklingRes"
            },
            "description": "List of results of buckling analysis",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of connection",
            "nullable": true
          },
          "connectionID": {
            "type": "string",
            "description": "Guid of connection",
            "format": "uuid"
          },
          "id": {
            "type": "integer",
            "description": "Integer Id of connection",
            "format": "int32"
          },
          "messages": {
            "$ref": "#/components/schemas/OpenMessages"
          }
        },
        "additionalProperties": false,
        "description": "Results for connection in project"
      },
      "ConnectionData": {
        "type": "object",
        "properties": {
          "conenctionPointId": {
            "type": "integer",
            "description": "Connection Point Id",
            "format": "int32"
          },
          "beams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BeamData"
            },
            "description": "Connected beams",
            "nullable": true
          },
          "plates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlateData"
            },
            "description": "Plates of the connection",
            "nullable": true
          },
          "foldedPlates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FoldedPlateData"
            },
            "description": "Folded plate of the connection",
            "nullable": true
          },
          "boltGrids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BoltGrid"
            },
            "description": "Bolt grids which belongs to the connection",
            "nullable": true
          },
          "anchorGrids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnchorGrid"
            },
            "description": "Anchor grids which belongs to the connection",
            "nullable": true
          },
          "welds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WeldData"
            },
            "description": "Welds of the connection",
            "nullable": true
          },
          "concreteBlocks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConcreteBlockData"
            },
            "description": "ConcreteBlocksof the connection",
            "nullable": true
          },
          "cutBeamByBeams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CutBeamByBeamData"
            },
            "description": "cut beam by beams",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the connection"
      },
      "ConnectionPoint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "ConnectedDesignMemeber"
      },
      "ConnectionSetup": {
        "type": "object",
        "properties": {
          "steelSetup": {
            "$ref": "#/components/schemas/SteelSetup"
          },
          "concreteSetup": {
            "$ref": "#/components/schemas/ConcreteSetup"
          },
          "stopAtLimitStrain": {
            "type": "boolean",
            "description": "Stop analysis when the limit strain is reached."
          },
          "weldEvaluationData": {
            "$ref": "#/components/schemas/WeldEvaluation"
          },
          "checkDetailing": {
            "type": "boolean",
            "description": "Perform check of bolt positions"
          },
          "applyConeBreakoutCheck": {
            "$ref": "#/components/schemas/ConeBreakoutCheckType"
          },
          "pretensionForceFpc": {
            "type": "number",
            "description": "Pretension force fpc = k * fub * As",
            "format": "double"
          },
          "gammaInst": {
            "type": "number",
            "description": "Partial safety factor of instalation safety",
            "format": "double"
          },
          "gammaC": {
            "type": "number",
            "description": "Partial safety factor of concrete",
            "format": "double"
          },
          "gammaM3": {
            "type": "number",
            "description": "Preloaded bolts safety factor",
            "format": "double"
          },
          "anchorLengthForStiffness": {
            "type": "integer",
            "description": "Length of anchor to define the anchor stiffness in analysis model, as a multiple of anchor diameter (E A /n * [d])",
            "format": "int32"
          },
          "jointBetaFactor": {
            "type": "number",
            "description": "Joint coefficient βj - Used for Fjd calculation",
            "format": "double"
          },
          "effectiveAreaStressCoeff": {
            "type": "number",
            "description": "Effective area is taken from intersection of stress area and area of joined items according to EN1993-1-8 art. 6.2.5",
            "format": "double"
          },
          "effectiveAreaStressCoeffAISC": {
            "type": "number",
            "description": "Effective area stress coefficient - Concrete loaded area: Stress cut-off is set for AISC",
            "format": "double"
          },
          "frictionCoefficient": {
            "type": "number",
            "description": "Coefficient of friction between base plate and concrete block",
            "format": "double"
          },
          "limitPlasticStrain": {
            "type": "number",
            "description": "Limit of plastic strain used in 2D plate element check",
            "format": "double"
          },
          "limitDeformation": {
            "type": "number",
            "description": "Limit deformation on closed sections",
            "format": "double"
          },
          "limitDeformationCheck": {
            "type": "boolean",
            "description": "Limit deformation on closed sections check or not"
          },
          "analysisGNL": {
            "type": "boolean",
            "description": "Analysis with GNL"
          },
          "analysisAllGNL": {
            "type": "boolean",
            "description": "Analysis with All GNL"
          },
          "warnPlasticStrain": {
            "type": "number",
            "description": "Warning plastic strain",
            "format": "double"
          },
          "warnCheckLevel": {
            "type": "number",
            "description": "Warning check level",
            "format": "double"
          },
          "optimalCheckLevel": {
            "type": "number",
            "description": "Optimal check level",
            "format": "double"
          },
          "distanceBetweenBolts": {
            "type": "number",
            "description": "Limit distance between bolts as a multiple of bolt diameter",
            "format": "double"
          },
          "distanceDiameterBetweenBP": {
            "type": "number",
            "description": "Anchor pitch",
            "format": "double"
          },
          "distanceBetweenBoltsEdge": {
            "type": "number",
            "description": "Limit distance between bolt and plate edge as a multiple of bolt diameter",
            "format": "double"
          },
          "bearingAngle": {
            "type": "number",
            "description": "Load distribution angle of concrete block in calculation of factor Kj",
            "format": "double"
          },
          "decreasingFtrd": {
            "type": "number",
            "description": "Decreasing Ftrd of anchors. Worse quality influence",
            "format": "double"
          },
          "bracedSystem": {
            "type": "boolean",
            "description": "Consider the frame system as braced for stiffness calculation. Braced system reduces horizontal displacements."
          },
          "bearingCheck": {
            "type": "boolean",
            "description": "Apply bearing check including αb"
          },
          "applyBetapInfluence": {
            "type": "boolean",
            "description": "Apply βp influence in bolt shear resistance. ΕΝ 1993-1-8 chapter 3.6.1 (12)"
          },
          "memberLengthRatio": {
            "type": "number",
            "description": "A multiple of cross-section height to determine the default length of member",
            "format": "double"
          },
          "divisionOfSurfaceOfCHS": {
            "type": "integer",
            "description": "Number of straight lines to substitute circle of circular tube in analysis model",
            "format": "int32"
          },
          "divisionOfArcsOfRHS": {
            "type": "integer",
            "description": "Number of straight lines to substitute corner arc of rectangular tubes in analysis model",
            "format": "int32"
          },
          "numElement": {
            "type": "integer",
            "description": "Ratio of length of decisive plate edge and Elements on edge count determines the average size of mesh element",
            "format": "int32"
          },
          "numberIterations": {
            "type": "integer",
            "description": "More iterations helps to find better solutions in contact elements but increases calculation time",
            "format": "int32"
          },
          "mdiv": {
            "type": "integer",
            "description": "Number of iteration steps to evaluate analysis divergence",
            "format": "int32"
          },
          "minSize": {
            "type": "number",
            "description": "Minimal size of generated finite mesh element",
            "format": "double"
          },
          "maxSize": {
            "type": "number",
            "description": "Maximal size of generated finite mesh element",
            "format": "double"
          },
          "numElementRhs": {
            "type": "integer",
            "description": "Number of mesh elements in RHS height",
            "format": "int32"
          },
          "numElementPlate": {
            "type": "integer",
            "description": "Number of mesh elements on plates",
            "format": "int32"
          },
          "rigidBP": {
            "type": "boolean",
            "description": "True if rigid base plate is considered"
          },
          "alphaCC": {
            "type": "number",
            "description": "Long-term effect on fcd",
            "format": "double"
          },
          "crackedConcrete": {
            "type": "boolean",
            "description": "True if cracked concrete is considered"
          },
          "developedFillers": {
            "type": "boolean",
            "description": "True if developed fillers is considered"
          },
          "deformationBoltHole": {
            "type": "boolean",
            "description": "True if bolt hole deformation is considered"
          },
          "extensionLengthRationOpenSections": {
            "type": "number",
            "description": "ExtensionLengthRationOpenSections",
            "format": "double"
          },
          "extensionLengthRationCloseSections": {
            "type": "number",
            "description": "ExtensionLengthRationCloseSections",
            "format": "double"
          },
          "factorPreloadBolt": {
            "type": "number",
            "description": "FactorPreloadBolt",
            "format": "double"
          },
          "baseMetalCapacity": {
            "type": "boolean",
            "description": "BaseMetalCapacity"
          },
          "applyBearingCheck": {
            "type": "boolean",
            "description": "ApplyBearingCheck"
          },
          "frictionCoefficientPbolt": {
            "type": "number",
            "description": "Friction factor of slip-resistant joint",
            "format": "double"
          },
          "crtCompCheckIS": {
            "$ref": "#/components/schemas/CrtCompCheckIS"
          },
          "boltMaxGripLengthCoeff": {
            "type": "number",
            "description": "Max value of bolt grip",
            "format": "double"
          },
          "fatigueSectionOffset": {
            "type": "number",
            "description": "Fatigue section Offset = FatigueSectionOffset x Legsize",
            "format": "double"
          },
          "condensedElementLengthFactor": {
            "type": "number",
            "description": "Condensed element length factor (CEF). Condensed beam legth = maxCssSize * CEF",
            "format": "double"
          },
          "gammaMu": {
            "type": "number",
            "description": "Partial safety factor for Horizontal tying",
            "format": "double"
          },
          "hssLimitPlasticStrain": {
            "type": "number",
            "description": "Limit plastic strain for high strength steel",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "ConnectionSetup"
      },
      "CrossSection": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of cross-section",
            "nullable": true
          },
          "crossSectionRotation": {
            "type": "number",
            "description": "Rotation of Cross - Section",
            "format": "double"
          },
          "isInPrincipal": {
            "type": "boolean",
            "description": "Specifies that the cross-section is in its principal axis."
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Cross-section"
      },
      "CrtCompCheckIS": {
        "enum": [
          "iS800_Cl_7_4",
          "iS456_Cl_34_4"
        ],
        "type": "string",
        "description": "CRT IS check"
      },
      "CutBeamByBeamData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the cut",
            "nullable": true
          },
          "modifiedObject": {
            "$ref": "#/components/schemas/ReferenceElement"
          },
          "cuttingObject": {
            "$ref": "#/components/schemas/ReferenceElement"
          },
          "isWeld": {
            "type": "boolean",
            "description": "is cut welded"
          },
          "weldThickness": {
            "type": "number",
            "description": "Thickness of the weld - value 0 = recommended size",
            "format": "double"
          },
          "weldType": {
            "$ref": "#/components/schemas/WeldType"
          },
          "offset": {
            "type": "number",
            "description": "Offset",
            "format": "double"
          },
          "method": {
            "$ref": "#/components/schemas/CutMethod"
          },
          "orientation": {
            "$ref": "#/components/schemas/CutOrientation"
          },
          "planeOnCuttingObject": {
            "$ref": "#/components/schemas/DistanceComparison"
          },
          "cutPart": {
            "$ref": "#/components/schemas/CutPart"
          },
          "extendBeforeCut": {
            "type": "boolean",
            "description": "Extend before cut - for cuts where user can decide if modified beam will be extended or not"
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the cut objec by object"
      },
      "CutData": {
        "type": "object",
        "properties": {
          "planePoint": {
            "$ref": "#/components/schemas/Point3D"
          },
          "normalVector": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "direction": {
            "$ref": "#/components/schemas/CutOrientation"
          },
          "offset": {
            "type": "number",
            "description": "Offset - shift of cut",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the cut beam"
      },
      "CutMethod": {
        "enum": [
          "boundingBox",
          "surface",
          "mitre",
          "surfaceAll"
        ],
        "type": "string",
        "description": "Cut method"
      },
      "CutOrientation": {
        "enum": [
          "default",
          "parallel",
          "perpendicular"
        ],
        "type": "string",
        "description": "Represents the type of the cut"
      },
      "CutPart": {
        "enum": [
          "begin",
          "end"
        ],
        "type": "string"
      },
      "DappedEnd": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of dapped end in IDEA StatiCa Detail"
      },
      "DesignMember": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "DesignMember"
      },
      "DetailCombination": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Load case"
      },
      "DetailLoadCase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Load case"
      },
      "DistanceComparison": {
        "enum": [
          "closer",
          "farther",
          "same"
        ],
        "type": "string",
        "description": "Represents the result of comparison of distances of two object from the same point"
      },
      "DrawData": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IGroup"
            },
            "nullable": true
          },
          "vertices": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "normals": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Element1D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of element1D"
      },
      "Element2D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of element2D"
      },
      "FatigueTypeOfPrestressingSteel": {
        "enum": [
          "postTensioningSingleStrandsInPlasticDucts",
          "postTensioningStraightTendonsOrCurvedTendonsInPlasticDucts",
          "postTensioningCurvedTendonsInSteelDucts",
          "postTensioningSplicingDevices",
          "preTensioning",
          "externalTendon"
        ],
        "type": "string",
        "description": "Posttensioned reinforcement type"
      },
      "FoldedPlateData": {
        "type": "object",
        "properties": {
          "plates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PlateData"
            },
            "description": "List of plates belong to folded plate",
            "nullable": true
          },
          "bends": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BendData"
            },
            "description": "List of bends connected plates of foldedplate",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the folded plate"
      },
      "HingeElement1D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of hinge element 1D"
      },
      "IGroup": {
        "type": "object",
        "properties": {
          "faces": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "selected": {
            "$ref": "#/components/schemas/Selected"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Line"
            },
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Text"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IOutputFormatter": {
        "type": "object",
        "additionalProperties": false
      },
      "ISDModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Model of IDEA StatiCa Detail"
      },
      "IdeaParameter": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "expression": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          },
          "unit": {
            "type": "string",
            "nullable": true
          },
          "parameterType": {
            "type": "string",
            "nullable": true
          },
          "validationExpression": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "validationStatus": {
            "type": "string",
            "nullable": true
          },
          "isVisible": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdeaParameterUpdate": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "expression": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InitialImperfectionOfPoint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Initial deformation of point - geometry nonlinear calculation"
      },
      "Line": {
        "type": "object",
        "properties": {
          "color": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "pairs": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "thickness": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "LineSegment3D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a line segment in three-dimensional space."
      },
      "LineSupportSegment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Line support on segment"
      },
      "LoadCase": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Load case in the model"
      },
      "LoadEffectData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "internalForces": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "purpose": {
            "$ref": "#/components/schemas/ePurpose"
          }
        },
        "additionalProperties": false
      },
      "LoadGroup": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Load group"
      },
      "LoadInPoint": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Concentrated load"
      },
      "LoadOnLine": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Load on line"
      },
      "LoadOnSurface": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Load on surface"
      },
      "Loading": {
        "type": "object",
        "properties": {
          "loadingType": {
            "$ref": "#/components/schemas/LoadingType"
          },
          "id": {
            "type": "integer",
            "description": "Id of loading",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Loading identification"
      },
      "LoadingType": {
        "enum": [
          "loadCase",
          "combination",
          "resultClass"
        ],
        "type": "string",
        "description": "Type of loading"
      },
      "MatConcrete": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of material",
            "nullable": true
          },
          "loadFromLibrary": {
            "type": "boolean",
            "description": "Load from library - try override properties from library find material by name"
          },
          "e": {
            "type": "number",
            "description": "Young's modulus",
            "format": "double"
          },
          "g": {
            "type": "number",
            "description": "Shear modulus",
            "format": "double"
          },
          "poisson": {
            "type": "number",
            "description": "Poisson's ratio",
            "format": "double"
          },
          "unitMass": {
            "type": "number",
            "description": "Unit weight",
            "format": "double"
          },
          "specificHeat": {
            "type": "number",
            "description": "Specific heat capacity",
            "format": "double"
          },
          "thermalExpansion": {
            "type": "number",
            "description": "Thermal expansion",
            "format": "double"
          },
          "thermalConductivity": {
            "type": "number",
            "description": "Thermal conductivity",
            "format": "double"
          },
          "isDefaultMaterial": {
            "type": "boolean",
            "description": "True if material is default material from the code"
          },
          "orderInCode": {
            "type": "integer",
            "description": "Order of this material in the code",
            "format": "int32"
          },
          "stateOfThermalExpansion": {
            "$ref": "#/components/schemas/ThermalExpansionState"
          },
          "stateOfThermalConductivity": {
            "$ref": "#/components/schemas/ThermalConductivityState"
          },
          "stateOfThermalSpecificHeat": {
            "$ref": "#/components/schemas/ThermalSpecificHeatState"
          },
          "stateOfThermalStressStrain": {
            "$ref": "#/components/schemas/ThermalStressStrainState"
          },
          "stateOfThermalStrain": {
            "$ref": "#/components/schemas/ThermalStrainState"
          },
          "userThermalSpecificHeatCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalConductivityCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalExpansionCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalStrainCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalStressStrainCurvature": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemperatureCurve2D"
            },
            "description": "User-defined curvature for thermal stress,strain { Temperature = Θ[K], {x = ε[-], y = σ[Pa]}}",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Material concrete base class"
      },
      "MatPrestressSteel": {
        "type": "object",
        "properties": {
          "diameter": {
            "type": "number",
            "description": "Diameter",
            "format": "double"
          },
          "area": {
            "type": "number",
            "description": "Area",
            "format": "double"
          },
          "numberOfWires": {
            "type": "integer",
            "description": "number of wires in strand",
            "format": "int32"
          },
          "equivalentDiameter": {
            "type": "number",
            "description": "Equivalent diameter",
            "format": "double"
          },
          "name": {
            "type": "string",
            "description": "Name of material",
            "nullable": true
          },
          "loadFromLibrary": {
            "type": "boolean",
            "description": "Load from library - try override properties from library find material by name"
          },
          "e": {
            "type": "number",
            "description": "Young's modulus",
            "format": "double"
          },
          "g": {
            "type": "number",
            "description": "Shear modulus",
            "format": "double"
          },
          "poisson": {
            "type": "number",
            "description": "Poisson's ratio",
            "format": "double"
          },
          "unitMass": {
            "type": "number",
            "description": "Unit weight",
            "format": "double"
          },
          "specificHeat": {
            "type": "number",
            "description": "Specific heat capacity",
            "format": "double"
          },
          "thermalExpansion": {
            "type": "number",
            "description": "Thermal expansion",
            "format": "double"
          },
          "thermalConductivity": {
            "type": "number",
            "description": "Thermal conductivity",
            "format": "double"
          },
          "isDefaultMaterial": {
            "type": "boolean",
            "description": "True if material is default material from the code"
          },
          "orderInCode": {
            "type": "integer",
            "description": "Order of this material in the code",
            "format": "int32"
          },
          "stateOfThermalExpansion": {
            "$ref": "#/components/schemas/ThermalExpansionState"
          },
          "stateOfThermalConductivity": {
            "$ref": "#/components/schemas/ThermalConductivityState"
          },
          "stateOfThermalSpecificHeat": {
            "$ref": "#/components/schemas/ThermalSpecificHeatState"
          },
          "stateOfThermalStressStrain": {
            "$ref": "#/components/schemas/ThermalStressStrainState"
          },
          "stateOfThermalStrain": {
            "$ref": "#/components/schemas/ThermalStrainState"
          },
          "userThermalSpecificHeatCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalConductivityCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalExpansionCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalStrainCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalStressStrainCurvature": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemperatureCurve2D"
            },
            "description": "User-defined curvature for thermal stress,strain { Temperature = Θ[K], {x = ε[-], y = σ[Pa]}}",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Material prestressing steel base class"
      },
      "MatReinforcement": {
        "type": "object",
        "properties": {
          "barSurface": {
            "$ref": "#/components/schemas/ReinfBarSurface"
          },
          "name": {
            "type": "string",
            "description": "Name of material",
            "nullable": true
          },
          "loadFromLibrary": {
            "type": "boolean",
            "description": "Load from library - try override properties from library find material by name"
          },
          "e": {
            "type": "number",
            "description": "Young's modulus",
            "format": "double"
          },
          "g": {
            "type": "number",
            "description": "Shear modulus",
            "format": "double"
          },
          "poisson": {
            "type": "number",
            "description": "Poisson's ratio",
            "format": "double"
          },
          "unitMass": {
            "type": "number",
            "description": "Unit weight",
            "format": "double"
          },
          "specificHeat": {
            "type": "number",
            "description": "Specific heat capacity",
            "format": "double"
          },
          "thermalExpansion": {
            "type": "number",
            "description": "Thermal expansion",
            "format": "double"
          },
          "thermalConductivity": {
            "type": "number",
            "description": "Thermal conductivity",
            "format": "double"
          },
          "isDefaultMaterial": {
            "type": "boolean",
            "description": "True if material is default material from the code"
          },
          "orderInCode": {
            "type": "integer",
            "description": "Order of this material in the code",
            "format": "int32"
          },
          "stateOfThermalExpansion": {
            "$ref": "#/components/schemas/ThermalExpansionState"
          },
          "stateOfThermalConductivity": {
            "$ref": "#/components/schemas/ThermalConductivityState"
          },
          "stateOfThermalSpecificHeat": {
            "$ref": "#/components/schemas/ThermalSpecificHeatState"
          },
          "stateOfThermalStressStrain": {
            "$ref": "#/components/schemas/ThermalStressStrainState"
          },
          "stateOfThermalStrain": {
            "$ref": "#/components/schemas/ThermalStrainState"
          },
          "userThermalSpecificHeatCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalConductivityCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalExpansionCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalStrainCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalStressStrainCurvature": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemperatureCurve2D"
            },
            "description": "User-defined curvature for thermal stress,strain { Temperature = Θ[K], {x = ε[-], y = σ[Pa]}}",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Material reinforcement base class"
      },
      "MatSteel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of material",
            "nullable": true
          },
          "loadFromLibrary": {
            "type": "boolean",
            "description": "Load from library - try override properties from library find material by name"
          },
          "e": {
            "type": "number",
            "description": "Young's modulus",
            "format": "double"
          },
          "g": {
            "type": "number",
            "description": "Shear modulus",
            "format": "double"
          },
          "poisson": {
            "type": "number",
            "description": "Poisson's ratio",
            "format": "double"
          },
          "unitMass": {
            "type": "number",
            "description": "Unit weight",
            "format": "double"
          },
          "specificHeat": {
            "type": "number",
            "description": "Specific heat capacity",
            "format": "double"
          },
          "thermalExpansion": {
            "type": "number",
            "description": "Thermal expansion",
            "format": "double"
          },
          "thermalConductivity": {
            "type": "number",
            "description": "Thermal conductivity",
            "format": "double"
          },
          "isDefaultMaterial": {
            "type": "boolean",
            "description": "True if material is default material from the code"
          },
          "orderInCode": {
            "type": "integer",
            "description": "Order of this material in the code",
            "format": "int32"
          },
          "stateOfThermalExpansion": {
            "$ref": "#/components/schemas/ThermalExpansionState"
          },
          "stateOfThermalConductivity": {
            "$ref": "#/components/schemas/ThermalConductivityState"
          },
          "stateOfThermalSpecificHeat": {
            "$ref": "#/components/schemas/ThermalSpecificHeatState"
          },
          "stateOfThermalStressStrain": {
            "$ref": "#/components/schemas/ThermalStressStrainState"
          },
          "stateOfThermalStrain": {
            "$ref": "#/components/schemas/ThermalStrainState"
          },
          "userThermalSpecificHeatCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalConductivityCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalExpansionCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalStrainCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalStressStrainCurvature": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemperatureCurve2D"
            },
            "description": "User-defined curvature for thermal stress,strain { Temperature = Θ[K], {x = ε[-], y = σ[Pa]}}",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Material steel base class"
      },
      "MatWelding": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of material",
            "nullable": true
          },
          "loadFromLibrary": {
            "type": "boolean",
            "description": "Load from library - try override properties from library find material by name"
          },
          "e": {
            "type": "number",
            "description": "Young's modulus",
            "format": "double"
          },
          "g": {
            "type": "number",
            "description": "Shear modulus",
            "format": "double"
          },
          "poisson": {
            "type": "number",
            "description": "Poisson's ratio",
            "format": "double"
          },
          "unitMass": {
            "type": "number",
            "description": "Unit weight",
            "format": "double"
          },
          "specificHeat": {
            "type": "number",
            "description": "Specific heat capacity",
            "format": "double"
          },
          "thermalExpansion": {
            "type": "number",
            "description": "Thermal expansion",
            "format": "double"
          },
          "thermalConductivity": {
            "type": "number",
            "description": "Thermal conductivity",
            "format": "double"
          },
          "isDefaultMaterial": {
            "type": "boolean",
            "description": "True if material is default material from the code"
          },
          "orderInCode": {
            "type": "integer",
            "description": "Order of this material in the code",
            "format": "int32"
          },
          "stateOfThermalExpansion": {
            "$ref": "#/components/schemas/ThermalExpansionState"
          },
          "stateOfThermalConductivity": {
            "$ref": "#/components/schemas/ThermalConductivityState"
          },
          "stateOfThermalSpecificHeat": {
            "$ref": "#/components/schemas/ThermalSpecificHeatState"
          },
          "stateOfThermalStressStrain": {
            "$ref": "#/components/schemas/ThermalStressStrainState"
          },
          "stateOfThermalStrain": {
            "$ref": "#/components/schemas/ThermalStrainState"
          },
          "userThermalSpecificHeatCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalConductivityCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalExpansionCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalStrainCurvature": {
            "$ref": "#/components/schemas/Polygon2D"
          },
          "userThermalStressStrainCurvature": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemperatureCurve2D"
            },
            "description": "User-defined curvature for thermal stress,strain { Temperature = Θ[K], {x = ε[-], y = σ[Pa]}}",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Welding material base class"
      },
      "MaterialDuct": {
        "enum": [
          "metal",
          "plastic"
        ],
        "type": "string",
        "description": "Tendon ducts material type"
      },
      "Member": {
        "type": "object",
        "properties": {
          "memberType": {
            "$ref": "#/components/schemas/MemberType"
          },
          "id": {
            "type": "integer",
            "description": "Id of member",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Member identification"
      },
      "Member1D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of member1D"
      },
      "Member2D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of member2D"
      },
      "MemberType": {
        "enum": [
          "member1D",
          "element1D"
        ],
        "type": "string",
        "description": "Type of member"
      },
      "MemoryStream": {
        "type": "object",
        "properties": {
          "canRead": {
            "type": "boolean",
            "readOnly": true
          },
          "canSeek": {
            "type": "boolean",
            "readOnly": true
          },
          "canWrite": {
            "type": "boolean",
            "readOnly": true
          },
          "capacity": {
            "type": "integer",
            "format": "int32"
          },
          "length": {
            "type": "integer",
            "format": "int64",
            "readOnly": true
          },
          "position": {
            "type": "integer",
            "format": "int64"
          },
          "canTimeout": {
            "type": "boolean",
            "readOnly": true
          },
          "readTimeout": {
            "type": "integer",
            "format": "int32"
          },
          "writeTimeout": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MessageNumber": {
        "enum": [
          "unspecified",
          "information",
          "warning",
          "warnNoPropertyInData",
          "warnValueOutOfRange",
          "warnCurveCount",
          "warnReinforcementBarsCollision",
          "error",
          "errNoOpenObject",
          "errDataObjectNotCreated",
          "errNoObjectInOpenModel",
          "errNoReferenceObjectInOpenModel",
          "errNoEquivalentObjectInDataModel",
          "errNoCrossSectionParameter",
          "errBoltsTooClose",
          "errBoltsTooCloseEdge",
          "errContactsAngle",
          "errIncorrentMaterialE",
          "errIncorrectMaterialEGP",
          "errPreloadedBoltGrade",
          "errValueOutOfRange",
          "errCurveZeroPoint",
          "errCurveFunction",
          "errCurveDecreaseFunction",
          "errCurveDerivation",
          "errCurveNotSet",
          "errValidPolyline",
          "errWarningLoad",
          "errTimeout",
          "errNoInLibrary",
          "errBadWeldMaterialProperty",
          "errOperation",
          "reserved"
        ],
        "type": "string",
        "description": "Message numbers"
      },
      "OkObjectResult": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "formatters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IOutputFormatter"
            },
            "nullable": true
          },
          "contentTypes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "declaredType": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OpenAttribute": {
        "type": "object",
        "additionalProperties": false,
        "description": "Open attribute base class"
      },
      "OpenElementId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Open element base class\r\nPOS - class can not be abstract -it causes problems with serialization"
      },
      "OpenMessage": {
        "type": "object",
        "properties": {
          "number": {
            "$ref": "#/components/schemas/MessageNumber"
          },
          "description": {
            "type": "string",
            "description": "Description of message",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Open message base class"
      },
      "OpenMessages": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenMessage"
            },
            "description": "List of messages",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Open messages collection"
      },
      "OpenModel": {
        "type": "object",
        "properties": {
          "version": {
            "type": "integer",
            "description": "Data format version",
            "format": "int32"
          },
          "originSettings": {
            "$ref": "#/components/schemas/OriginSettings"
          },
          "point3D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point3D"
            },
            "description": "List of Point3D",
            "nullable": true
          },
          "lineSegment3D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineSegment3D"
            },
            "description": "List of LineSegment3D",
            "nullable": true
          },
          "arcSegment3D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArcSegment3D"
            },
            "description": "List of ArcSegment3D",
            "nullable": true
          },
          "polyLine3D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolyLine3D"
            },
            "description": "List of PolyLine3D",
            "nullable": true
          },
          "region3D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Region3D"
            },
            "description": "List of Region3D",
            "nullable": true
          },
          "matConcrete": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatConcrete"
            },
            "description": "List of MatConcrete",
            "nullable": true
          },
          "matReinforcement": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatReinforcement"
            },
            "description": "List of MatReinforcement",
            "nullable": true
          },
          "matSteel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatSteel"
            },
            "description": "List of MatSteel",
            "nullable": true
          },
          "matPrestressSteel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatPrestressSteel"
            },
            "description": "List of MatPrestressSteel",
            "nullable": true
          },
          "matWelding": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MatWelding"
            },
            "description": "List of MatWelding",
            "nullable": true
          },
          "crossSection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CrossSection"
            },
            "description": "List of CrossSection",
            "nullable": true
          },
          "reinforcedCrossSection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReinforcedCrossSection"
            },
            "description": "List of Reinforced CrossSection",
            "nullable": true
          },
          "hingeElement1D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HingeElement1D"
            },
            "description": "List of hinge elements 1D",
            "nullable": true
          },
          "opening": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Opening"
            },
            "description": "List of openings for Detail",
            "nullable": true
          },
          "dappedEnd": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DappedEnd"
            },
            "description": "List of dapped ends in Detail",
            "nullable": true
          },
          "patchDevice": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchDevice"
            },
            "description": "List of dapped ends in Detail",
            "nullable": true
          },
          "element1D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Element1D"
            },
            "description": "List of Elements 1D",
            "nullable": true
          },
          "beam": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Beam"
            },
            "description": "List of Elements 1D",
            "nullable": true
          },
          "member1D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member1D"
            },
            "description": "List of Member 1D",
            "nullable": true
          },
          "element2D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Element2D"
            },
            "description": "List of Elements 2D",
            "nullable": true
          },
          "wall": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Wall"
            },
            "description": "List of Elements 2D",
            "nullable": true
          },
          "member2D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member2D"
            },
            "description": "List of Member 2D",
            "nullable": true
          },
          "rigidLink": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RigidLink"
            },
            "description": "List of Rigid link",
            "nullable": true
          },
          "pointOnLine3D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PointOnLine3D"
            },
            "description": "List of Point on line 3D",
            "nullable": true
          },
          "pointSupportNode": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PointSupportNode"
            },
            "description": "List of Point support in node",
            "nullable": true
          },
          "lineSupportSegment": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LineSupportSegment"
            },
            "description": "List of Line support on segment",
            "nullable": true
          },
          "loadsInPoint": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoadInPoint"
            },
            "description": "List of point load impulses in this load case",
            "nullable": true
          },
          "loadsOnLine": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoadOnLine"
            },
            "description": "List of line load impulses in this load case",
            "nullable": true
          },
          "strainLoadsOnLine": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StrainLoadOnLine"
            },
            "description": "List of generalized strain load impulses along the line in this load case.",
            "nullable": true
          },
          "pointLoadsOnLine": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PointLoadOnLine"
            },
            "description": "List of point load impulses in this load case",
            "nullable": true
          },
          "loadsOnSurface": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoadOnSurface"
            },
            "description": "List surafce load in this load case",
            "nullable": true
          },
          "settlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Settlement"
            },
            "description": "Settlements in this load case",
            "nullable": true
          },
          "temperatureLoadsOnLine": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TemperatureLoadOnLine"
            },
            "description": "List of temperature load in this load case",
            "nullable": true
          },
          "loadGroup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoadGroup"
            },
            "description": "List of Load groups",
            "nullable": true
          },
          "loadCase": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LoadCase"
            },
            "description": "List of Load cases",
            "nullable": true
          },
          "combiInput": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CombiInput"
            },
            "description": "List of Combinations",
            "nullable": true
          },
          "attribute": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OpenAttribute"
            },
            "description": "List of attributes",
            "nullable": true
          },
          "connectionPoint": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectionPoint"
            },
            "description": "List of Connection Points",
            "nullable": true
          },
          "connections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConnectionData"
            },
            "description": "List of Connection data",
            "nullable": true
          },
          "reinforcement": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reinforcement"
            },
            "description": "List of reinforcement in IDEA StatiCa Detail",
            "nullable": true
          },
          "isdModel": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ISDModel"
            },
            "description": "List of Details",
            "nullable": true
          },
          "initialImperfectionOfPoint": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InitialImperfectionOfPoint"
            },
            "description": "List of InitialmperfectionOfPoint",
            "nullable": true
          },
          "tendon": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tendon"
            },
            "description": "Tendon",
            "nullable": true
          },
          "resultClass": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultClass"
            },
            "description": "Result Class",
            "nullable": true
          },
          "designMember": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DesignMember"
            },
            "description": "Design Member",
            "nullable": true
          },
          "subStructure": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubStructure"
            },
            "description": "Design Member",
            "nullable": true
          },
          "connectionSetup": {
            "$ref": "#/components/schemas/ConnectionSetup"
          },
          "projectData": {
            "$ref": "#/components/schemas/ProjectData"
          },
          "checkMember": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckMember"
            },
            "description": "List of the Check members",
            "nullable": true
          },
          "concreteCheckSection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CheckSection"
            },
            "description": "List of the concrete check section",
            "nullable": true
          },
          "concreteSetup": {
            "$ref": "#/components/schemas/ConcreteSetup"
          },
          "projectDataConcrete": {
            "$ref": "#/components/schemas/ProjectDataConcrete"
          },
          "rebarShape": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RebarShape"
            },
            "description": "Gets or sets the rebars shapes",
            "nullable": true
          },
          "rebarGeneral": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RebarGeneral"
            },
            "description": "Gets or sets the rebar General collection",
            "nullable": true
          },
          "rebarSingle": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RebarSingle"
            },
            "description": "Gets or sets the rebar single collection",
            "nullable": true
          },
          "rebarStirrups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RebarStirrups"
            },
            "description": "Gets or sets the rebar group (stirrups) collection",
            "nullable": true
          },
          "taper": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Taper"
            },
            "nullable": true
          },
          "span": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Span"
            },
            "nullable": true
          },
          "solidBlocks3D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolidBlock3D"
            },
            "description": "List of Solid Blocks 3D",
            "nullable": true
          },
          "surfaceSupports3D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SurfaceSupport3D"
            },
            "description": "List of Surface Supports 3D",
            "nullable": true
          },
          "basePlates3D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BasePlate3D"
            },
            "description": "List of Base Plates 3D",
            "nullable": true
          },
          "anchors3D": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Anchor3D"
            },
            "description": "List of Anchors 3D",
            "nullable": true
          },
          "detailLoadCase": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DetailLoadCase"
            },
            "description": "List of Load cases",
            "nullable": true
          },
          "detailCombination": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DetailCombination"
            },
            "description": "List of Combinations",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Open model"
      },
      "OpenModelContainer": {
        "type": "object",
        "properties": {
          "openModel": {
            "$ref": "#/components/schemas/OpenModel"
          },
          "openModelResult": {
            "$ref": "#/components/schemas/OpenModelResult"
          }
        },
        "additionalProperties": false,
        "description": "OpenModelContainer is used to keep structural data and results of a finite element analysis in one place.\r\nThe main reason is easier moving (passing) pass the instance of OpenModel and corresponding instace of OpenModelResults."
      },
      "OpenModelResult": {
        "type": "object",
        "properties": {
          "resultOnMembers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultOnMembers"
            },
            "description": "Results on members",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Results of open model"
      },
      "Opening": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of opening in IDEA StatiCa Detail"
      },
      "OriginSettings": {
        "type": "object",
        "additionalProperties": false,
        "description": "OriginProject"
      },
      "ParameterData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "identifier": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "parameterType": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "nullable": true
          },
          "defaultValue": {
            "nullable": true
          },
          "evaluatedValue": {
            "nullable": true
          },
          "evaluatedDefaultValue": {
            "nullable": true
          },
          "validationValue": {
            "type": "string",
            "nullable": true
          },
          "evaluatedValidationValue": {
            "type": "string",
            "nullable": true
          },
          "validationType": {
            "$ref": "#/components/schemas/ValidationType"
          },
          "userUnitId": {
            "type": "integer",
            "format": "int32"
          },
          "isVisibleForSimpleConnection": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PatchDevice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Abstract class of patch support/load"
      },
      "PlateData": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the plate",
            "nullable": true
          },
          "thickness": {
            "type": "number",
            "description": "Thickness of the plate",
            "format": "double"
          },
          "material": {
            "type": "string",
            "description": "Name of the material",
            "nullable": true
          },
          "outlinePoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point2D"
            },
            "description": "Outline points",
            "nullable": true
          },
          "origin": {
            "$ref": "#/components/schemas/Point3D"
          },
          "axisX": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisY": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "axisZ": {
            "$ref": "#/components/schemas/Vector3D"
          },
          "region": {
            "type": "string",
            "description": "Geometry of the plate in svg format. In next version will be mark as OBSOLETE! New use property Geometry",
            "nullable": true
          },
          "geometry": {
            "$ref": "#/components/schemas/Region2D"
          },
          "originalModelId": {
            "type": "string",
            "description": "Get or set the identification in the original model\r\nIn the case of the imported connection from another application",
            "nullable": true
          },
          "isNegativeObject": {
            "type": "boolean",
            "description": "Is negative object"
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the single plate"
      },
      "Point2D": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "description": "Gets or sets the X-coordinate value",
            "format": "double"
          },
          "y": {
            "type": "number",
            "description": "Gets or sets the Y-coordinate value",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents an x- and y-coordinate pair in two-dimensional space."
      },
      "Point3D": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "description": "Gets or sets the X-coordinate value",
            "format": "double"
          },
          "y": {
            "type": "number",
            "description": "Gets or sets the Y-coordinate value",
            "format": "double"
          },
          "z": {
            "type": "number",
            "description": "Gets or sets the Z-coordinate value",
            "format": "double"
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents an x- , y- an z-coordinates in three-dimensional space."
      },
      "PointLoadOnLine": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Load in specific point on line"
      },
      "PointOnLine3D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a Point dependent on the line in three-dimensional space."
      },
      "PointSupportNode": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Point support in point"
      },
      "PolyLine2D": {
        "type": "object",
        "properties": {
          "startPoint": {
            "$ref": "#/components/schemas/Point2D"
          },
          "segments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Segment2D"
            },
            "description": "Gets segments of `PolyLine2D`.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a polyline in two-dimensional space."
      },
      "PolyLine3D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a polyline in three-dimensional space."
      },
      "Polygon2D": {
        "type": "object",
        "properties": {
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point2D"
            },
            "description": "List of polygon points",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a polygon in two-dimensional space."
      },
      "ProjectData": {
        "type": "object",
        "additionalProperties": false,
        "description": "Defines certain data about user project."
      },
      "ProjectDataConcrete": {
        "type": "object",
        "additionalProperties": false,
        "description": "Project data concrete"
      },
      "RebarGeneral": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a single main rebar in 3D space.\r\nHolds data from generated rebar or rebar imported from Tekla.\r\nthe rebarShape is in global coordinates and it is not possible to prject it along Member1D, Polyline, ... (referenceLine)"
      },
      "RebarShape": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a geometrical shape for Rebar in 3D space."
      },
      "RebarSingle": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a single main rebar in 3D space."
      },
      "RebarStirrups": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a rebar grouping in 3D space."
      },
      "ReferenceElement": {
        "type": "object",
        "properties": {
          "typeName": {
            "type": "string",
            "description": "Element type name",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          },
          "element": {
            "$ref": "#/components/schemas/OpenElementId"
          }
        },
        "additionalProperties": false,
        "description": "Reference element class"
      },
      "Region2D": {
        "type": "object",
        "properties": {
          "outline": {
            "$ref": "#/components/schemas/PolyLine2D"
          },
          "openings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolyLine2D"
            },
            "description": "Gets or sets the list of openings in the Region2D.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a region in two-dimensional space included outline (border) and openings."
      },
      "Region3D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Represents a region in three-dimensional space included outline (border) and openings."
      },
      "ReinfBarSurface": {
        "enum": [
          "smooth",
          "ribbed"
        ],
        "type": "string",
        "description": "Reinforcement bar surface"
      },
      "ReinforcedBar": {
        "type": "object",
        "properties": {
          "point": {
            "$ref": "#/components/schemas/Point2D"
          },
          "diameter": {
            "type": "number",
            "description": "Diameter",
            "format": "double"
          },
          "material": {
            "$ref": "#/components/schemas/ReferenceElement"
          }
        },
        "additionalProperties": false,
        "description": "Reinforced bar"
      },
      "ReinforcedCrossSection": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of cross-section",
            "nullable": true
          },
          "crossSection": {
            "$ref": "#/components/schemas/ReferenceElement"
          },
          "bars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReinforcedBar"
            },
            "description": "Reinforced bars",
            "nullable": true
          },
          "stirrups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Stirrup"
            },
            "description": "Stirrups",
            "nullable": true
          },
          "tendonBars": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TendonBar"
            },
            "description": "Tendon bars",
            "nullable": true
          },
          "tendonDucts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TendonDuct"
            },
            "description": "Tendon ducts",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Reinforced cross-section"
      },
      "Reinforcement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Base class representing reinforcement in IDEA StatiCa Detail"
      },
      "ResultBase": {
        "type": "object",
        "additionalProperties": false,
        "description": "Result base abstract class"
      },
      "ResultClass": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "ResultClass object"
      },
      "ResultLocalSystemType": {
        "enum": [
          "local",
          "global",
          "principle"
        ],
        "type": "string",
        "description": "Type of local system of result"
      },
      "ResultOnMember": {
        "type": "object",
        "properties": {
          "member": {
            "$ref": "#/components/schemas/Member"
          },
          "resultType": {
            "$ref": "#/components/schemas/ResultType"
          },
          "localSystemType": {
            "$ref": "#/components/schemas/ResultLocalSystemType"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultBase"
            },
            "description": "List of result",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Result of the member"
      },
      "ResultOnMembers": {
        "type": "object",
        "properties": {
          "loading": {
            "$ref": "#/components/schemas/Loading"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResultOnMember"
            },
            "description": "List of result of members",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Result of the member"
      },
      "ResultType": {
        "enum": [
          "internalForces",
          "deformation",
          "crossSectionNLA",
          "crossSectionTA",
          "interactionDiagram",
          "crossSectionMesh"
        ],
        "type": "string",
        "description": "Type of results"
      },
      "RigidLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Rigid link between nodes"
      },
      "Segment2D": {
        "type": "object",
        "properties": {
          "endPoint": {
            "$ref": "#/components/schemas/Point2D"
          }
        },
        "additionalProperties": false,
        "description": "Represents a segment in two-dimensional space."
      },
      "Selected": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/SelectedType"
          }
        },
        "additionalProperties": false
      },
      "SelectedType": {
        "type": "object",
        "properties": {
          "kind": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Settlement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Settlement of point support"
      },
      "SolidBlock3D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of Solid Block in IDEA StatiCa Detail"
      },
      "Span": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Span allows specifying haunched member.\r\n\r\nBoth cross-section must be of the same type. Spans must not overlap."
      },
      "SteelSetup": {
        "type": "object",
        "additionalProperties": false,
        "description": "ISteelSetup"
      },
      "Stirrup": {
        "type": "object",
        "properties": {
          "geometry": {
            "$ref": "#/components/schemas/PolyLine2D"
          },
          "diameter": {
            "type": "number",
            "description": "Diameter",
            "format": "double"
          },
          "material": {
            "$ref": "#/components/schemas/ReferenceElement"
          },
          "anchorageLenght": {
            "type": "number",
            "description": "Anchorage Lenght",
            "format": "double"
          },
          "diameterOfMandrel": {
            "type": "number",
            "description": "Radius of stirrup mandrel - refering to stirrup axis",
            "format": "double"
          },
          "isClosed": {
            "type": "boolean",
            "description": "Open / Closed stirrup"
          },
          "distance": {
            "type": "number",
            "description": "Longitudinal distance between stirrups",
            "format": "double"
          },
          "shearCheck": {
            "type": "boolean",
            "description": "Status of shear check, not possible for detailing stirrup"
          },
          "torsionCheck": {
            "type": "boolean",
            "description": "Status of torsion check, not possible for detailing stirrup"
          }
        },
        "additionalProperties": false,
        "description": "Stirrup"
      },
      "StrainLoadOnLine": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Linearly distributed generalized strain load along a line.\r\nStrain load is in local coordinate system and there are no possible eccentricities."
      },
      "SubStructure": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "SubStructure"
      },
      "SurfaceSupport3D": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of Surface Support 3D in IDEA StatiCa Detail"
      },
      "Taper": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Defines haunches (variyng cross-sections) along the member.\r\n\r\nOne IdeaRS.OpenModel.Model.Taper may be assigned to multiple <see cref=\"T:IdeaRS.OpenModel.Model.Member1D\">Members</see>.\r\nSections of the member not covered by a span will use the member's cross-section."
      },
      "TemperatureCurve2D": {
        "type": "object",
        "properties": {
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Point2D"
            },
            "description": "List of polygon points",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Reperesents a thermal curve."
      },
      "TemperatureLoadOnLine": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Temperature load on line"
      },
      "TemplateConversions": {
        "type": "object",
        "properties": {
          "conversions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BaseTemplateConversion"
            },
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Tendon": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Tendon base class"
      },
      "TendonBar": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Tendon Id",
            "format": "int32"
          },
          "tendonType": {
            "$ref": "#/components/schemas/TendonBarType"
          },
          "point": {
            "$ref": "#/components/schemas/Point2D"
          },
          "material": {
            "$ref": "#/components/schemas/ReferenceElement"
          },
          "prestressingOrder": {
            "type": "integer",
            "description": "order of tendon prestessing",
            "format": "int32"
          },
          "numStrandsInTendon": {
            "type": "integer",
            "description": "number of ropes in tendon",
            "format": "int32"
          },
          "prestressReinforcementType": {
            "$ref": "#/components/schemas/FatigueTypeOfPrestressingSteel"
          },
          "phase": {
            "type": "integer",
            "description": "Phase",
            "format": "int32"
          },
          "tendonDuct": {
            "$ref": "#/components/schemas/TendonDuct"
          }
        },
        "additionalProperties": false,
        "description": "Tendon bar"
      },
      "TendonBarType": {
        "enum": [
          "posttensioned",
          "pretensioned"
        ],
        "type": "string",
        "description": "Tendon bar type"
      },
      "TendonDuct": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Tendon duct Id",
            "format": "int32"
          },
          "point": {
            "$ref": "#/components/schemas/Point2D"
          },
          "materialDuct": {
            "$ref": "#/components/schemas/MaterialDuct"
          },
          "isDebondingTube": {
            "type": "boolean",
            "description": "rue for debonding tubes, false for tendon ducts"
          },
          "diameter": {
            "type": "number",
            "description": "Diameter",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Tendon duct"
      },
      "Text": {
        "type": "object",
        "properties": {
          "color": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          },
          "position": {
            "$ref": "#/components/schemas/TextPosition"
          },
          "fontSize": {
            "type": "number",
            "format": "double"
          },
          "tag": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "TextPosition": {
        "type": "object",
        "properties": {
          "origin": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          },
          "angles": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ThermalConductivityState": {
        "enum": [
          "none",
          "code",
          "user"
        ],
        "type": "string",
        "description": "Type of curvature - thermal conductivity"
      },
      "ThermalExpansionState": {
        "enum": [
          "none",
          "code",
          "user"
        ],
        "type": "string",
        "description": "Type of curvature -  thermal expansion"
      },
      "ThermalSpecificHeatState": {
        "enum": [
          "none",
          "code",
          "user"
        ],
        "type": "string",
        "description": "Type of curvature - thermal specific heat"
      },
      "ThermalStrainState": {
        "enum": [
          "none",
          "code",
          "user"
        ],
        "type": "string",
        "description": "Type of curvature - thermal strain curvature"
      },
      "ThermalStressStrainState": {
        "enum": [
          "none",
          "code",
          "user"
        ],
        "type": "string",
        "description": "Type of curvature - thermal stress-strain curvature"
      },
      "ValidationType": {
        "enum": [
          "warning",
          "restricted"
        ],
        "type": "string"
      },
      "Vector3D": {
        "type": "object",
        "properties": {
          "x": {
            "type": "number",
            "description": "Gets or sets the X-dirrection value",
            "format": "double"
          },
          "y": {
            "type": "number",
            "description": "Gets or sets the Y-dirrection value",
            "format": "double"
          },
          "z": {
            "type": "number",
            "description": "Gets or sets the Z-dirrection value",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents a vector in three-dimensional space."
      },
      "Wall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Element Id",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Representation of Wall in IDEA StatiCa Detail"
      },
      "WeldData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the weld",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the weld",
            "nullable": true
          },
          "thickness": {
            "type": "number",
            "description": "Thickness of the weld",
            "format": "double"
          },
          "material": {
            "type": "string",
            "description": "Name of the material",
            "nullable": true
          },
          "weldMaterial": {
            "$ref": "#/components/schemas/ReferenceElement"
          },
          "weldType": {
            "$ref": "#/components/schemas/WeldType"
          },
          "connectedPartIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Id of the weld",
            "nullable": true
          },
          "start": {
            "$ref": "#/components/schemas/Point3D"
          },
          "end": {
            "$ref": "#/components/schemas/Point3D"
          }
        },
        "additionalProperties": false,
        "description": "Provides data of the single weld"
      },
      "WeldEvaluation": {
        "enum": [
          "maxForceElement",
          "forceResultant",
          "applyPlasticWelds"
        ],
        "type": "string",
        "description": "WeldEvaluation"
      },
      "WeldType": {
        "enum": [
          "notSpecified",
          "fillet",
          "doubleFillet",
          "bevel",
          "pjp",
          "pjpRear",
          "lengthAtHaunch",
          "filletRear",
          "contact",
          "intermittent"
        ],
        "type": "string",
        "description": "enum of weld types"
      },
      "ePurpose": {
        "enum": [
          "common",
          "maxCapacityCalculation",
          "maxCapacityCalculationNegative",
          "horizontalTyingCalculation"
        ],
        "type": "string"
      }
    }
  }
}