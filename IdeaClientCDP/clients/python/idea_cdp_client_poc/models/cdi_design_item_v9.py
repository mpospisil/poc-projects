# coding: utf-8

"""
    ConDesignProposer API 9.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 9.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from idea_cdp_client_poc.models.con_design_item import ConDesignItem
from typing import Optional, Set
from typing_extensions import Self

class CdiDesignItemV9(BaseModel):
    """
    CdiDesignItemV9
    """ # noqa: E501
    con_design_item: Optional[ConDesignItem] = Field(default=None, alias="conDesignItem")
    picture_url: Optional[StrictStr] = Field(default=None, alias="pictureUrl")
    project_url: Optional[StrictStr] = Field(default=None, alias="projectUrl")
    scene3d_url: Optional[StrictStr] = Field(default=None, alias="scene3dUrl")
    __properties: ClassVar[List[str]] = ["conDesignItem", "pictureUrl", "projectUrl", "scene3dUrl"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CdiDesignItemV9 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of con_design_item
        if self.con_design_item:
            _dict['conDesignItem'] = self.con_design_item.to_dict()
        # set to None if picture_url (nullable) is None
        # and model_fields_set contains the field
        if self.picture_url is None and "picture_url" in self.model_fields_set:
            _dict['pictureUrl'] = None

        # set to None if project_url (nullable) is None
        # and model_fields_set contains the field
        if self.project_url is None and "project_url" in self.model_fields_set:
            _dict['projectUrl'] = None

        # set to None if scene3d_url (nullable) is None
        # and model_fields_set contains the field
        if self.scene3d_url is None and "scene3d_url" in self.model_fields_set:
            _dict['scene3dUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CdiDesignItemV9 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "conDesignItem": ConDesignItem.from_dict(obj["conDesignItem"]) if obj.get("conDesignItem") is not None else None,
            "pictureUrl": obj.get("pictureUrl"),
            "projectUrl": obj.get("projectUrl"),
            "scene3dUrl": obj.get("scene3dUrl")
        })
        return _obj


