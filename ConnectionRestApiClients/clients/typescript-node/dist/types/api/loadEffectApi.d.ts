/**
 * Connection Rest API 1.0
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import http from 'http';
import { ConLoadEffect } from '../model/conLoadEffect';
import { LoadEffectData } from '../model/loadEffectData';
import { Authentication, Interceptor } from '../model/models';
export declare enum LoadEffectApiApiKeys {
}
export declare class LoadEffectApi {
    protected _basePath: string;
    protected _defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
    };
    protected interceptors: Interceptor[];
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    set defaultHeaders(defaultHeaders: any);
    get defaultHeaders(): any;
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: LoadEffectApiApiKeys, value: string): void;
    addInterceptor(interceptor: Interceptor): void;
    /**
     *
     * @summary Add new load effect to the connection
     * @param projectId
     * @param connectionId
     * @param conLoadEffect
     */
    addLoadEffect(projectId: string, connectionId: number, conLoadEffect?: ConLoadEffect, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: LoadEffectData;
    }>;
    /**
     *
     * @summary Delete load effect loadEffectId
     * @param projectId
     * @param connectionId
     * @param loadEffectId
     */
    deleteLoadEffect(projectId: string, connectionId: number, loadEffectId: number, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: number;
    }>;
    /**
     *
     * @summary Get load impulses from loadEffectId
     * @param projectId
     * @param connectionId
     * @param loadEffectId
     * @param isPercentage
     */
    getLoadEffect(projectId: string, connectionId: number, loadEffectId: number, isPercentage?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConLoadEffect;
    }>;
    /**
     *
     * @summary Get all load effects which are defined in connectionId
     * @param projectId
     * @param connectionId
     * @param isPercentage
     */
    getLoadEffects(projectId: string, connectionId: number, isPercentage?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Array<ConLoadEffect>;
    }>;
    /**
     *
     * @summary Update the option \'LoadsInEquilibrium\' for connectionId
     * @param projectId
     * @param connectionId
     * @param loadsInEquilibrium Value to be set
     */
    setLoadsInEquilibrium(projectId: string, connectionId: number, loadsInEquilibrium?: boolean, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: boolean;
    }>;
    /**
     *
     * @summary Update load impulses in loadEffectId
     * @param projectId
     * @param connectionId
     * @param loadEffectId
     * @param conLoadEffect
     */
    updateLoadEffect(projectId: string, connectionId: number, loadEffectId: number, conLoadEffect?: ConLoadEffect, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ConLoadEffect;
    }>;
}
