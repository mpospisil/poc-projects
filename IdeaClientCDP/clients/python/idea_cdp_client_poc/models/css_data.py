# coding: utf-8

"""
    ConDesignProposer API 1.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from idea_cdp_client_poc.models.css_class import CssClass
from idea_cdp_client_poc.models.css_size import CssSize
from idea_cdp_client_poc.models.form_code import FormCode
from idea_cdp_client_poc.models.integrality_type import IntegralityType
from idea_cdp_client_poc.models.shape import Shape
from typing import Optional, Set
from typing_extensions import Self

class CssData(BaseModel):
    """
    CssData
    """ # noqa: E501
    arc_segment_count: Optional[StrictInt] = Field(default=None, alias="arcSegmentCount")
    css_class: Optional[CssClass] = Field(default=None, alias="cssClass")
    css_size: Optional[CssSize] = Field(default=None, alias="cssSize")
    integrality_type: Optional[IntegralityType] = Field(default=None, alias="integralityType")
    label: Optional[StrictStr] = None
    main_segment_count: Optional[StrictInt] = Field(default=None, alias="mainSegmentCount")
    shape: Optional[Shape] = None
    type: Optional[StrictStr] = None
    form_code: Optional[FormCode] = Field(default=None, alias="formCode")
    __properties: ClassVar[List[str]] = ["arcSegmentCount", "cssClass", "cssSize", "integralityType", "label", "mainSegmentCount", "shape", "type", "formCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CssData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of css_size
        if self.css_size:
            _dict['cssSize'] = self.css_size.to_dict()
        # set to None if label (nullable) is None
        # and model_fields_set contains the field
        if self.label is None and "label" in self.model_fields_set:
            _dict['label'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CssData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "arcSegmentCount": obj.get("arcSegmentCount"),
            "cssClass": obj.get("cssClass"),
            "cssSize": CssSize.from_dict(obj["cssSize"]) if obj.get("cssSize") is not None else None,
            "integralityType": obj.get("integralityType"),
            "label": obj.get("label"),
            "mainSegmentCount": obj.get("mainSegmentCount"),
            "shape": obj.get("shape"),
            "type": obj.get("type"),
            "formCode": obj.get("formCode")
        })
        return _obj


