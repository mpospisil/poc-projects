/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// OkObjectResult
    /// </summary>
    [DataContract(Name = "OkObjectResult")]
    public partial class OkObjectResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OkObjectResult" /> class.
        /// </summary>
        /// <param name="value">value.</param>
        /// <param name="formatters">formatters.</param>
        /// <param name="contentTypes">contentTypes.</param>
        /// <param name="declaredType">declaredType.</param>
        /// <param name="statusCode">statusCode.</param>
        public OkObjectResult(Object value = default(Object), List<Object> formatters = default(List<Object>), List<string> contentTypes = default(List<string>), string declaredType = default(string), int? statusCode = default(int?))
        {
            this.Value = value;
            this.Formatters = formatters;
            this.ContentTypes = contentTypes;
            this.DeclaredType = declaredType;
            this.StatusCode = statusCode;
        }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = true)]
        public Object Value { get; set; }

        /// <summary>
        /// Gets or Sets Formatters
        /// </summary>
        [DataMember(Name = "formatters", EmitDefaultValue = true)]
        public List<Object> Formatters { get; set; }

        /// <summary>
        /// Gets or Sets ContentTypes
        /// </summary>
        [DataMember(Name = "contentTypes", EmitDefaultValue = true)]
        public List<string> ContentTypes { get; set; }

        /// <summary>
        /// Gets or Sets DeclaredType
        /// </summary>
        [DataMember(Name = "declaredType", EmitDefaultValue = true)]
        public string DeclaredType { get; set; }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name = "statusCode", EmitDefaultValue = true)]
        public int? StatusCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OkObjectResult {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Formatters: ").Append(Formatters).Append("\n");
            sb.Append("  ContentTypes: ").Append(ContentTypes).Append("\n");
            sb.Append("  DeclaredType: ").Append(DeclaredType).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
