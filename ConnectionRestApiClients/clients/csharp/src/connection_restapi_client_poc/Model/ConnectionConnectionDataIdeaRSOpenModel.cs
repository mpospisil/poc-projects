/*
 * Connection Rest API 1.0
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = connection_restapi_client_poc.Client.OpenAPIDateConverter;

namespace connection_restapi_client_poc.Model
{
    /// <summary>
    /// Provides data of the connection
    /// </summary>
    [DataContract(Name = "Connection_ConnectionData-IdeaRS_OpenModel")]
    public partial class ConnectionConnectionDataIdeaRSOpenModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectionConnectionDataIdeaRSOpenModel" /> class.
        /// </summary>
        /// <param name="conenctionPointId">Connection Point Id.</param>
        /// <param name="beams">Connected beams.</param>
        /// <param name="plates">Plates of the connection.</param>
        /// <param name="foldedPlates">Folded plate of the connection.</param>
        /// <param name="boltGrids">Bolt grids which belongs to the connection.</param>
        /// <param name="anchorGrids">Anchor grids which belongs to the connection.</param>
        /// <param name="welds">Welds of the connection.</param>
        /// <param name="concreteBlocks">ConcreteBlocksof the connection.</param>
        /// <param name="cutBeamByBeams">cut beam by beams.</param>
        public ConnectionConnectionDataIdeaRSOpenModel(int conenctionPointId = default(int), List<ConnectionBeamDataIdeaRSOpenModel> beams = default(List<ConnectionBeamDataIdeaRSOpenModel>), List<ConnectionPlateDataIdeaRSOpenModel> plates = default(List<ConnectionPlateDataIdeaRSOpenModel>), List<ConnectionFoldedPlateDataIdeaRSOpenModel> foldedPlates = default(List<ConnectionFoldedPlateDataIdeaRSOpenModel>), List<ConnectionBoltGridIdeaRSOpenModel> boltGrids = default(List<ConnectionBoltGridIdeaRSOpenModel>), List<ConnectionAnchorGridIdeaRSOpenModel> anchorGrids = default(List<ConnectionAnchorGridIdeaRSOpenModel>), List<ConnectionWeldDataIdeaRSOpenModel> welds = default(List<ConnectionWeldDataIdeaRSOpenModel>), List<ConnectionConcreteBlockDataIdeaRSOpenModel> concreteBlocks = default(List<ConnectionConcreteBlockDataIdeaRSOpenModel>), List<ConnectionCutBeamByBeamDataIdeaRSOpenModel> cutBeamByBeams = default(List<ConnectionCutBeamByBeamDataIdeaRSOpenModel>))
        {
            this.ConenctionPointId = conenctionPointId;
            this.Beams = beams;
            this.Plates = plates;
            this.FoldedPlates = foldedPlates;
            this.BoltGrids = boltGrids;
            this.AnchorGrids = anchorGrids;
            this.Welds = welds;
            this.ConcreteBlocks = concreteBlocks;
            this.CutBeamByBeams = cutBeamByBeams;
        }

        /// <summary>
        /// Connection Point Id
        /// </summary>
        /// <value>Connection Point Id</value>
        [DataMember(Name = "conenctionPointId", EmitDefaultValue = false)]
        public int ConenctionPointId { get; set; }

        /// <summary>
        /// Connected beams
        /// </summary>
        /// <value>Connected beams</value>
        [DataMember(Name = "beams", EmitDefaultValue = true)]
        public List<ConnectionBeamDataIdeaRSOpenModel> Beams { get; set; }

        /// <summary>
        /// Plates of the connection
        /// </summary>
        /// <value>Plates of the connection</value>
        [DataMember(Name = "plates", EmitDefaultValue = true)]
        public List<ConnectionPlateDataIdeaRSOpenModel> Plates { get; set; }

        /// <summary>
        /// Folded plate of the connection
        /// </summary>
        /// <value>Folded plate of the connection</value>
        [DataMember(Name = "foldedPlates", EmitDefaultValue = true)]
        public List<ConnectionFoldedPlateDataIdeaRSOpenModel> FoldedPlates { get; set; }

        /// <summary>
        /// Bolt grids which belongs to the connection
        /// </summary>
        /// <value>Bolt grids which belongs to the connection</value>
        [DataMember(Name = "boltGrids", EmitDefaultValue = true)]
        public List<ConnectionBoltGridIdeaRSOpenModel> BoltGrids { get; set; }

        /// <summary>
        /// Anchor grids which belongs to the connection
        /// </summary>
        /// <value>Anchor grids which belongs to the connection</value>
        [DataMember(Name = "anchorGrids", EmitDefaultValue = true)]
        public List<ConnectionAnchorGridIdeaRSOpenModel> AnchorGrids { get; set; }

        /// <summary>
        /// Welds of the connection
        /// </summary>
        /// <value>Welds of the connection</value>
        [DataMember(Name = "welds", EmitDefaultValue = true)]
        public List<ConnectionWeldDataIdeaRSOpenModel> Welds { get; set; }

        /// <summary>
        /// ConcreteBlocksof the connection
        /// </summary>
        /// <value>ConcreteBlocksof the connection</value>
        [DataMember(Name = "concreteBlocks", EmitDefaultValue = true)]
        public List<ConnectionConcreteBlockDataIdeaRSOpenModel> ConcreteBlocks { get; set; }

        /// <summary>
        /// cut beam by beams
        /// </summary>
        /// <value>cut beam by beams</value>
        [DataMember(Name = "cutBeamByBeams", EmitDefaultValue = true)]
        public List<ConnectionCutBeamByBeamDataIdeaRSOpenModel> CutBeamByBeams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConnectionConnectionDataIdeaRSOpenModel {\n");
            sb.Append("  ConenctionPointId: ").Append(ConenctionPointId).Append("\n");
            sb.Append("  Beams: ").Append(Beams).Append("\n");
            sb.Append("  Plates: ").Append(Plates).Append("\n");
            sb.Append("  FoldedPlates: ").Append(FoldedPlates).Append("\n");
            sb.Append("  BoltGrids: ").Append(BoltGrids).Append("\n");
            sb.Append("  AnchorGrids: ").Append(AnchorGrids).Append("\n");
            sb.Append("  Welds: ").Append(Welds).Append("\n");
            sb.Append("  ConcreteBlocks: ").Append(ConcreteBlocks).Append("\n");
            sb.Append("  CutBeamByBeams: ").Append(CutBeamByBeams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
