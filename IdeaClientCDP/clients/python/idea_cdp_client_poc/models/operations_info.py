# coding: utf-8

"""
    ConDesignProposer API 1.0

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from idea_cdp_client_poc.models.anchoring import Anchoring
from idea_cdp_client_poc.models.bolt_grid import BoltGrid
from idea_cdp_client_poc.models.cleat import Cleat
from idea_cdp_client_poc.models.connecting_plate import ConnectingPlate
from idea_cdp_client_poc.models.end_plate import EndPlate
from idea_cdp_client_poc.models.fin_plate import FinPlate
from idea_cdp_client_poc.models.general_plate import GeneralPlate
from idea_cdp_client_poc.models.gusset_plate import GussetPlate
from idea_cdp_client_poc.models.opening import Opening
from idea_cdp_client_poc.models.pin_grid import PinGrid
from idea_cdp_client_poc.models.plate_to_plate import PlateToPlate
from idea_cdp_client_poc.models.shifted_end_plate import ShiftedEndPlate
from idea_cdp_client_poc.models.splice_plate import SplicePlate
from idea_cdp_client_poc.models.stiffener import Stiffener
from idea_cdp_client_poc.models.stub import Stub
from typing import Optional, Set
from typing_extensions import Self

class OperationsInfo(BaseModel):
    """
    OperationsInfo
    """ # noqa: E501
    end_plate: Optional[EndPlate] = Field(default=None, alias="endPlate")
    shifted_end_plate: Optional[ShiftedEndPlate] = Field(default=None, alias="shiftedEndPlate")
    stub: Optional[Stub] = None
    plate_to_plate: Optional[PlateToPlate] = Field(default=None, alias="plateToPlate")
    splice_plate: Optional[SplicePlate] = Field(default=None, alias="splicePlate")
    gusset_plate: Optional[GussetPlate] = Field(default=None, alias="gussetPlate")
    connecting_plate: Optional[ConnectingPlate] = Field(default=None, alias="connectingPlate")
    fin_plate: Optional[FinPlate] = Field(default=None, alias="finPlate")
    cleat: Optional[Cleat] = None
    anchoring: Optional[Anchoring] = None
    opening: Optional[Opening] = None
    general_plate: Optional[GeneralPlate] = Field(default=None, alias="generalPlate")
    stiffener: Optional[Stiffener] = None
    bolt_grid: Optional[BoltGrid] = Field(default=None, alias="boltGrid")
    pin_grid: Optional[PinGrid] = Field(default=None, alias="pinGrid")
    __properties: ClassVar[List[str]] = ["endPlate", "shiftedEndPlate", "stub", "plateToPlate", "splicePlate", "gussetPlate", "connectingPlate", "finPlate", "cleat", "anchoring", "opening", "generalPlate", "stiffener", "boltGrid", "pinGrid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OperationsInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of end_plate
        if self.end_plate:
            _dict['endPlate'] = self.end_plate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shifted_end_plate
        if self.shifted_end_plate:
            _dict['shiftedEndPlate'] = self.shifted_end_plate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stub
        if self.stub:
            _dict['stub'] = self.stub.to_dict()
        # override the default output from pydantic by calling `to_dict()` of plate_to_plate
        if self.plate_to_plate:
            _dict['plateToPlate'] = self.plate_to_plate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of splice_plate
        if self.splice_plate:
            _dict['splicePlate'] = self.splice_plate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gusset_plate
        if self.gusset_plate:
            _dict['gussetPlate'] = self.gusset_plate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connecting_plate
        if self.connecting_plate:
            _dict['connectingPlate'] = self.connecting_plate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fin_plate
        if self.fin_plate:
            _dict['finPlate'] = self.fin_plate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cleat
        if self.cleat:
            _dict['cleat'] = self.cleat.to_dict()
        # override the default output from pydantic by calling `to_dict()` of anchoring
        if self.anchoring:
            _dict['anchoring'] = self.anchoring.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opening
        if self.opening:
            _dict['opening'] = self.opening.to_dict()
        # override the default output from pydantic by calling `to_dict()` of general_plate
        if self.general_plate:
            _dict['generalPlate'] = self.general_plate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stiffener
        if self.stiffener:
            _dict['stiffener'] = self.stiffener.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bolt_grid
        if self.bolt_grid:
            _dict['boltGrid'] = self.bolt_grid.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pin_grid
        if self.pin_grid:
            _dict['pinGrid'] = self.pin_grid.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OperationsInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endPlate": EndPlate.from_dict(obj["endPlate"]) if obj.get("endPlate") is not None else None,
            "shiftedEndPlate": ShiftedEndPlate.from_dict(obj["shiftedEndPlate"]) if obj.get("shiftedEndPlate") is not None else None,
            "stub": Stub.from_dict(obj["stub"]) if obj.get("stub") is not None else None,
            "plateToPlate": PlateToPlate.from_dict(obj["plateToPlate"]) if obj.get("plateToPlate") is not None else None,
            "splicePlate": SplicePlate.from_dict(obj["splicePlate"]) if obj.get("splicePlate") is not None else None,
            "gussetPlate": GussetPlate.from_dict(obj["gussetPlate"]) if obj.get("gussetPlate") is not None else None,
            "connectingPlate": ConnectingPlate.from_dict(obj["connectingPlate"]) if obj.get("connectingPlate") is not None else None,
            "finPlate": FinPlate.from_dict(obj["finPlate"]) if obj.get("finPlate") is not None else None,
            "cleat": Cleat.from_dict(obj["cleat"]) if obj.get("cleat") is not None else None,
            "anchoring": Anchoring.from_dict(obj["anchoring"]) if obj.get("anchoring") is not None else None,
            "opening": Opening.from_dict(obj["opening"]) if obj.get("opening") is not None else None,
            "generalPlate": GeneralPlate.from_dict(obj["generalPlate"]) if obj.get("generalPlate") is not None else None,
            "stiffener": Stiffener.from_dict(obj["stiffener"]) if obj.get("stiffener") is not None else None,
            "boltGrid": BoltGrid.from_dict(obj["boltGrid"]) if obj.get("boltGrid") is not None else None,
            "pinGrid": PinGrid.from_dict(obj["pinGrid"]) if obj.get("pinGrid") is not None else None
        })
        return _obj


